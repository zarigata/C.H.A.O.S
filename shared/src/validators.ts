// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * ######################################################
 * #  VALIDATORS MODULE                                 #
 * ######################################################
 *
 * This module contains validation functions for all ChatEra data types.
 * It leverages Zod schemas to provide runtime type safety and validation.
 */

import { 
  UserSchema, 
  MessageSchema, 
  ChannelSchema, 
  ServerSchema,
  CallSchema,
  RoleSchema,
  EventSchema
} from './types';

/**
 * ######################################################
 * #  USER VALIDATORS                                   #
 * ######################################################
 */

/**
 * Validates user data
 * @param data User data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateUser = (data: unknown) => {
  return UserSchema.safeParse(data);
};

/**
 * Validates partial user data for updates
 * @param data Partial user data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateUserUpdate = (data: unknown) => {
  return UserSchema.partial().safeParse(data);
};

/**
 * ######################################################
 * #  MESSAGE VALIDATORS                                #
 * ######################################################
 */

/**
 * Validates message data
 * @param data Message data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateMessage = (data: unknown) => {
  return MessageSchema.safeParse(data);
};

/**
 * Validates partial message data for updates
 * @param data Partial message data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateMessageUpdate = (data: unknown) => {
  return MessageSchema.partial()
    .omit({ id: true, senderId: true, channelId: true, createdAt: true })
    .safeParse(data);
};

/**
 * ######################################################
 * #  CHANNEL VALIDATORS                                #
 * ######################################################
 */

/**
 * Validates channel data
 * @param data Channel data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateChannel = (data: unknown) => {
  return ChannelSchema.safeParse(data);
};

/**
 * Validates partial channel data for updates
 * @param data Partial channel data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateChannelUpdate = (data: unknown) => {
  return ChannelSchema.partial()
    .omit({ id: true, type: true, serverId: true, createdAt: true })
    .safeParse(data);
};

/**
 * ######################################################
 * #  SERVER VALIDATORS                                 #
 * ######################################################
 */

/**
 * Validates server data
 * @param data Server data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateServer = (data: unknown) => {
  return ServerSchema.safeParse(data);
};

/**
 * Validates partial server data for updates
 * @param data Partial server data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateServerUpdate = (data: unknown) => {
  return ServerSchema.partial()
    .omit({ id: true, ownerId: true, createdAt: true })
    .safeParse(data);
};

/**
 * ######################################################
 * #  CALL VALIDATORS                                   #
 * ######################################################
 */

/**
 * Validates call data
 * @param data Call data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateCall = (data: unknown) => {
  return CallSchema.safeParse(data);
};

/**
 * Validates call update data
 * @param data Call update data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateCallUpdate = (data: unknown) => {
  return CallSchema.partial()
    .omit({ id: true, initiatorId: true, startTime: true })
    .safeParse(data);
};

/**
 * ######################################################
 * #  ROLE VALIDATORS                                   #
 * ######################################################
 */

/**
 * Validates role data
 * @param data Role data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateRole = (data: unknown) => {
  return RoleSchema.safeParse(data);
};

/**
 * Validates partial role data for updates
 * @param data Partial role data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateRoleUpdate = (data: unknown) => {
  return RoleSchema.partial()
    .omit({ id: true, serverId: true })
    .safeParse(data);
};

/**
 * ######################################################
 * #  EVENT VALIDATORS                                  #
 * ######################################################
 */

/**
 * Validates event data
 * @param data Event data to validate
 * @returns Validation result with parsed data or errors
 */
export const validateEvent = (data: unknown) => {
  return EventSchema.safeParse(data);
};

/**
 * ######################################################
 * #  UTILITY VALIDATORS                                #
 * ######################################################
 */

/**
 * Creates a detailed validation error message from Zod errors
 * @param error Zod validation error
 * @returns Formatted error message
 */
export const formatValidationErrors = (error: any): string => {
  if (!error.errors) return 'Validation failed with unknown errors';
  
  return error.errors
    .map((err: any) => {
      const path = err.path.join('.');
      return `${path}: ${err.message}`;
    })
    .join(', ');
};

/**
 * Validates a UUID format
 * @param id String to validate as UUID
 * @returns Whether the string is a valid UUID
 */
export const isValidUUID = (id: string): boolean => {
  const uuidRegex = 
    /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(id);
};
