// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * ######################################################
 * #  PLATFORM DETECTION AND CROSS-PLATFORM UTILITIES   #
 * ######################################################
 * 
 * These utilities ensure consistent behavior across Windows and Linux
 * operating systems, handling path differences, file system operations,
 * and platform-specific behaviors.
 */

/**
 * Detects the operating system platform
 * @returns Platform identification string
 */
export const detectPlatform = (): 'windows' | 'linux' | 'macos' | 'unknown' => {
  if (typeof window !== 'undefined') {
    // Browser environment detection
    const userAgent = window.navigator.userAgent.toLowerCase();
    if (userAgent.indexOf('windows') !== -1) return 'windows';
    if (userAgent.indexOf('linux') !== -1) return 'linux';
    if (userAgent.indexOf('mac') !== -1) return 'macos';
    return 'unknown';
  } else {
    // Node.js environment detection
    const platform = process.platform;
    if (platform === 'win32') return 'windows';
    if (platform === 'linux') return 'linux';
    if (platform === 'darwin') return 'macos';
    return 'unknown';
  }
};

/**
 * Normalizes file paths for cross-platform compatibility
 * @param path File or directory path
 * @returns Normalized path for the current platform
 */
export const normalizePath = (path: string): string => {
  // Replace backslashes with forward slashes for consistency across platforms
  const normalizedPath = path.replace(/\\/g, '/');
  return normalizedPath;
};

/**
 * Generates a platform-appropriate path for storing application data
 * @param appName Application name
 * @returns Path for storing application data
 */
export const getAppDataPath = (appName: string): string => {
  if (typeof process === 'undefined') {
    return `/${appName}/data`; // Fallback for browser environments
  }

  const platform = process.platform;
  const homedir = require('os').homedir();

  if (platform === 'win32') {
    return `${process.env.APPDATA}\\${appName}`;
  } else if (platform === 'darwin') {
    return `${homedir}/Library/Application Support/${appName}`;
  } else {
    // Linux and others
    return `${homedir}/.${appName.toLowerCase()}`;
  }
};

/**
 * ######################################################
 * #  ENCRYPTION UTILITIES                              #
 * ######################################################
 * 
 * End-to-end encryption utilities for secure communications.
 */

/**
 * Creates a secure random cryptographic key
 * @param length Key length in bytes
 * @returns Base64 encoded key string
 */
export const generateCryptoKey = (length = 32): string => {
  if (typeof window !== 'undefined' && window.crypto) {
    // Browser environment
    const buffer = new Uint8Array(length);
    window.crypto.getRandomValues(buffer);
    return btoa(String.fromCharCode.apply(null, Array.from(buffer)));
  } else if (typeof require !== 'undefined') {
    // Node.js environment
    try {
      const crypto = require('crypto');
      return crypto.randomBytes(length).toString('base64');
    } catch (error) {
      console.error('Failed to generate crypto key:', error);
      throw new Error('Crypto module not available');
    }
  }
  throw new Error('Crypto functions not available in this environment');
};

/**
 * ######################################################
 * #  DATE AND TIME UTILITIES                          #
 * ######################################################
 */

/**
 * Formats a date in a user-friendly format with timezone awareness
 * @param date Date to format
 * @param includeTime Whether to include time in the output
 * @returns Formatted date string
 */
export const formatDate = (date: Date, includeTime = true): string => {
  try {
    const options: Intl.DateTimeFormatOptions = {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: includeTime ? '2-digit' : undefined,
      minute: includeTime ? '2-digit' : undefined,
      timeZoneName: includeTime ? 'short' : undefined,
    };
    
    return new Intl.DateTimeFormat('en-US', options).format(date);
  } catch (error) {
    // Fallback if Intl API fails or is not supported
    return date.toLocaleString();
  }
};

/**
 * ######################################################
 * #  DATA VALIDATION UTILITIES                        #
 * ######################################################
 */

/**
 * Validates an email address format
 * @param email Email address to validate
 * @returns Whether the email has a valid format
 */
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

/**
 * Validates a username format
 * @param username Username to validate
 * @returns Whether the username has a valid format
 */
export const isValidUsername = (username: string): boolean => {
  // Allow alphanumeric characters, underscores, and periods
  // Between 3 and 30 characters
  const usernameRegex = /^[a-zA-Z0-9_.]{3,30}$/;
  return usernameRegex.test(username);
};

/**
 * ######################################################
 * #  ERROR HANDLING UTILITIES                         #
 * ######################################################
 */

/**
 * Application-wide error class with error codes
 */
export class AppError extends Error {
  code: string;
  statusCode?: number;
  
  constructor(message: string, code: string, statusCode?: number) {
    super(message);
    this.name = 'AppError';
    this.code = code;
    this.statusCode = statusCode;
  }
}

/**
 * Creates a standardized error response
 * @param error The error object
 * @returns Standardized error response object
 */
export const createErrorResponse = (error: unknown): {
  success: false;
  error: {
    message: string;
    code?: string;
    stack?: string;
  };
} => {
  if (error instanceof AppError) {
    return {
      success: false,
      error: {
        message: error.message,
        code: error.code,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined,
      },
    };
  }
  
  const message = error instanceof Error ? error.message : 'Unknown error occurred';
  
  return {
    success: false,
    error: {
      message,
      code: 'UNKNOWN_ERROR',
      stack: process.env.NODE_ENV === 'development' && error instanceof Error 
        ? error.stack 
        : undefined,
    },
  };
};
