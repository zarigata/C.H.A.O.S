// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀ █░█ ▄▀█ █▀█ █▀▀ █▀▄   ▀█▀ █▄█ █▀█ █▀▀ █▀
 * ▄█ █▀█ █▀█ █▀▄ ██▄ █▄▀   ░█░ ░█░ █▀▀ ██▄ ▄█
 * 
 * [CODEX] Core Type Definitions
 * 
 * This file contains shared type definitions used across both
 * frontend and backend components of the ChatEra application.
 * 
 * All types are designed to be serializable for cross-platform
 * communication via WebSockets, REST APIs, and IPC channels.
 */

/**
 * [H4X] USER TYPES
 * 
 * Core user model and authentication related types
 */
export interface User {
  id: string;
  username: string;
  displayName: string;
  email?: string;
  avatar?: string;
  status?: UserStatus;
  statusMessage?: string;
  createdAt?: string | Date;
  updatedAt?: string | Date;
}

export type UserStatus = 'online' | 'away' | 'busy' | 'invisible' | 'offline';

export interface UserCredentials {
  username: string;
  password: string;
}

export interface UserRegistration extends UserCredentials {
  displayName: string;
  email: string;
}

export interface UserSession {
  user: User;
  token: string;
  expiresAt: number;
}

/**
 * [H4X] MESSAGE TYPES
 * 
 * Message-related types for conversations
 */
export interface Message {
  id: string;
  conversationId: string;
  sender: Pick<User, 'id' | 'username' | 'displayName' | 'avatar'>;
  content: string;
  timestamp: number;
  isEdited?: boolean;
  isDeleted?: boolean;
  isSystemMessage?: boolean;
  attachments?: Attachment[];
  reactions?: Reaction[];
  replyToId?: string;
  replyToMessage?: Message;
  nudge?: boolean;
  status: MessageStatus;
}

export type MessageStatus = 'sending' | 'sent' | 'delivered' | 'read' | 'failed';

export interface Attachment {
  url: string;
  name?: string;
  size: number;
  type: string;
}

export interface Reaction {
  userId: string;
  emoji: string;
  timestamp: number;
}

/**
 * [H4X] CONVERSATION TYPES
 * 
 * Conversation and channel related types
 */
export interface Conversation {
  id: string;
  participants: User[];
  lastMessage?: Message;
  unreadCount: number;
  createdAt: string | Date;
  updatedAt: string | Date;
  isGroup: boolean;
  groupName?: string;
  groupAvatar?: string;
}

export interface Channel {
  id: string;
  serverId: string;
  name: string;
  description?: string;
  isPrivate: boolean;
  allowedUsers?: string[];
  createdAt: string | Date;
  updatedAt: string | Date;
}

export interface Server {
  id: string;
  name: string;
  icon?: string;
  ownerId: string;
  members: ServerMember[];
  channels: Channel[];
  inviteCode?: string;
  createdAt: string | Date;
  updatedAt: string | Date;
}

export interface ServerMember {
  userId: string;
  serverId: string;
  roles: ServerRole[];
  nickname?: string;
  joinedAt: string | Date;
}

export type ServerRole = 'owner' | 'admin' | 'moderator' | 'member';

/**
 * [H4X] SOCKET EVENT TYPES
 * 
 * Socket.IO event types for real-time communication
 */
export enum EventType {
  // Connection events
  CONNECT = 'connect',
  DISCONNECT = 'disconnect',
  
  // Presence events
  PRESENCE_UPDATE = 'presence:update',
  PRESENCE_GET = 'presence:get',
  
  // Message events
  MESSAGE_SEND = 'message:send',
  MESSAGE_NEW = 'message:new',
  MESSAGE_EDIT = 'message:edit',
  MESSAGE_DELETE = 'message:delete',
  MESSAGE_REACTION = 'message:reaction',
  MESSAGE_NUDGE = 'message:nudge',
  
  // Typing indicators
  TYPING = 'typing',
  TYPING_STOP = 'typing:stop',
  
  // Voice/Video events
  CALL_OFFER = 'call:offer',
  CALL_ANSWER = 'call:answer',
  CALL_ICE_CANDIDATE = 'call:ice-candidate',
  CALL_HANGUP = 'call:hangup',
  
  // Notification events
  NOTIFICATION_NEW = 'notification:new',
  NOTIFICATION_READ = 'notification:read',
  
  // Error events
  ERROR = 'error'
}

/**
 * [H4X] API RESPONSE TYPES
 * 
 * Standardized API response formats
 */
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: ApiError;
  timestamp: number;
}

export interface ApiError {
  code: string;
  message: string;
  details?: Record<string, any>;
}

/**
 * [H4X] APPLICATION SETTINGS
 * 
 * User configurable application settings
 */
export interface UserSettings {
  theme: 'light' | 'dark' | 'system';
  notifications: NotificationSettings;
  privacy: PrivacySettings;
  appearance: AppearanceSettings;
  accessibility: AccessibilitySettings;
  encryption: EncryptionSettings;
}

export interface NotificationSettings {
  enabled: boolean;
  sounds: boolean;
  desktop: boolean;
  mentions: boolean;
  doNotDisturb: boolean;
  doNotDisturbSchedule?: {
    start: string; // HH:MM format
    end: string;   // HH:MM format
    days: ('mon' | 'tue' | 'wed' | 'thu' | 'fri' | 'sat' | 'sun')[];
  };
}

export interface PrivacySettings {
  allowFriendRequests: 'everyone' | 'friends-of-friends' | 'nobody';
  readReceipts: boolean;
  typingIndicators: boolean;
  lastSeen: boolean;
  blockList: string[]; // User IDs
}

export interface AppearanceSettings {
  fontSize: 'small' | 'medium' | 'large';
  messageGrouping: boolean;
  compactMode: boolean;
  showAvatars: boolean;
  customCss?: string;
}

export interface AccessibilitySettings {
  highContrastMode: boolean;
  reducedMotion: boolean;
  screenReader: boolean;
  keyboardShortcuts: boolean;
}

export interface EncryptionSettings {
  endToEndEncryption: boolean;
  backupEncryptionKey: boolean;
  verifyContacts: boolean;
  autoDestructMessages: boolean;
  autoDestructTime?: number; // In seconds
}

// Export all types as a namespace
export const Types = {
  User,
  Message,
  Conversation,
  Server,
  Channel,
  EventType
};

export default Types;
