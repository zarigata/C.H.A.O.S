// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * ▄▀█ █░█ ▀█▀ █░█ █▀▀ █▄░█ ▀█▀ █ █▀▀ ▄▀█ ▀█▀ █ █▀█ █▄░█   ▀█▀ █▄█ █▀█ █▀▀ █▀
 * █▀█ █▄█ ░█░ █▀█ ██▄ █░▀█ ░█░ █ █▄▄ █▀█ ░█░ █ █▄█ █░▀█   ░█░ ░█░ █▀▀ ██▄ ▄█
 * 
 * [CODEX] Authentication Types
 * 
 * This module defines shared type definitions for authentication-related
 * entities and operations used across both frontend and backend.
 * 
 * Includes types for:
 * - User accounts and profiles
 * - Authentication requests and responses
 * - JWT payload structure
 * - User status and presence
 */

/**
 * [H4X] User Status
 * 
 * Possible online status values for a user
 */
export type UserStatus = 'online' | 'away' | 'busy' | 'invisible' | 'offline';

/**
 * [H4X] User Role
 * 
 * User permission roles within the system
 */
export type UserRole = 'user' | 'moderator' | 'admin';

/**
 * [H4X] User Object
 * 
 * Core user data structure with profile information
 */
export interface User {
  id: string;
  username: string;
  email: string;
  displayName: string;
  avatar?: string | null;
  statusMessage?: string | null;
  status: UserStatus;
  role: UserRole;
  createdAt: string;
  updatedAt: string;
  lastActive?: string | null;
  requiresOnboarding?: boolean;
  isVerified: boolean;
}

/**
 * [H4X] Authentication Token Response
 * 
 * Response structure when authenticating a user
 */
export interface AuthTokenResponse {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
  user: User;
}

/**
 * [H4X] Login Request
 * 
 * Data structure for user login attempts
 */
export interface LoginRequest {
  username: string;
  password: string;
  rememberMe?: boolean;
}

/**
 * [H4X] Registration Request
 * 
 * Data structure for new user registration
 */
export interface RegisterRequest {
  username: string;
  email: string;
  password: string;
  displayName: string;
}

/**
 * [H4X] Password Reset Request
 * 
 * Data for requesting a password reset
 */
export interface PasswordResetRequest {
  email: string;
}

/**
 * [H4X] Password Reset Confirmation
 * 
 * Data for confirming a password reset with a token
 */
export interface PasswordResetConfirmation {
  token: string;
  newPassword: string;
}

/**
 * [H4X] JWT Token Payload
 * 
 * Structure of the decoded JWT token
 */
export interface JwtPayload {
  sub: string; // user ID
  username: string;
  email: string;
  role: UserRole;
  iat: number; // issued at
  exp: number; // expiration time
}

/**
 * [H4X] Username Availability Check
 * 
 * Request/response for checking username availability
 */
export interface UsernameAvailabilityRequest {
  username: string;
}

export interface UsernameAvailabilityResponse {
  available: boolean;
  suggestions?: string[];
}

/**
 * [H4X] Profile Update Request
 * 
 * Data for updating user profile information
 */
export interface ProfileUpdateRequest {
  displayName?: string;
  statusMessage?: string;
  avatar?: string | null;
}

/**
 * [H4X] Preferences Update Request
 * 
 * Data for updating user application preferences
 */
export interface PreferencesUpdateRequest {
  theme?: 'light' | 'dark' | 'system';
  notifications?: boolean;
  notificationSound?: boolean;
  startupLaunch?: boolean;
  statusOnStartup?: UserStatus | 'last';
  showTypingIndicators?: boolean;
}

/**
 * [H4X] Auth Error Response
 * 
 * Standard error response format for auth operations
 */
export interface AuthErrorResponse {
  error: string;
  message: string;
  statusCode: number;
  details?: Record<string, string[]>;
}
