// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

import { z } from 'zod';

/**
 * ############################
 * #  USER IDENTITY SCHEMAS   #
 * ############################
 */

export const UserSchema = z.object({
  id: z.string().uuid(),
  username: z.string().min(3).max(30),
  displayName: z.string().min(1).max(50),
  email: z.string().email(),
  avatar: z.string().url().optional(),
  status: z.enum(['online', 'away', 'busy', 'offline']),
  bio: z.string().max(200).optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type User = z.infer<typeof UserSchema>;

/**
 * ############################
 * #  MESSAGING SCHEMAS      #
 * ############################
 */

export const MessageSchema = z.object({
  id: z.string().uuid(),
  content: z.string(),
  senderId: z.string().uuid(),
  channelId: z.string().uuid(),
  edited: z.boolean().default(false),
  attachments: z.array(z.string().url()).optional(),
  reactions: z.record(z.string(), z.number()).optional(),
  mentions: z.array(z.string().uuid()).optional(),
  replyToId: z.string().uuid().optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type Message = z.infer<typeof MessageSchema>;

/**
 * ############################
 * #  CHANNEL SCHEMAS        #
 * ############################
 */

export const ChannelSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1).max(50),
  description: z.string().max(200).optional(),
  type: z.enum(['direct', 'group', 'server']),
  serverId: z.string().uuid().optional(),
  members: z.array(z.string().uuid()),
  createdAt: z.date(),
  updatedAt: z.date(),
  isEncrypted: z.boolean().default(false),
});

export type Channel = z.infer<typeof ChannelSchema>;

/**
 * ############################
 * #  SERVER SCHEMAS         #
 * ############################
 */

export const ServerSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1).max(50),
  description: z.string().max(200).optional(),
  icon: z.string().url().optional(),
  ownerId: z.string().uuid(),
  members: z.array(z.string().uuid()),
  roles: z.record(z.string(), z.array(z.string())).optional(),
  createdAt: z.date(),
  updatedAt: z.date(),
});

export type Server = z.infer<typeof ServerSchema>;

/**
 * ############################
 * #  CALL SCHEMAS           #
 * ############################
 */

export const CallSchema = z.object({
  id: z.string().uuid(),
  initiatorId: z.string().uuid(),
  recipientIds: z.array(z.string().uuid()),
  channelId: z.string().uuid().optional(),
  status: z.enum(['ringing', 'ongoing', 'ended']),
  startTime: z.date(),
  endTime: z.date().optional(),
  hasVideo: z.boolean().default(false),
});

export type Call = z.infer<typeof CallSchema>;

/**
 * ############################
 * #  PERMISSIONS SCHEMAS    #
 * ############################
 */

export const PermissionSchema = z.enum([
  'manage_server',
  'manage_channels',
  'manage_roles',
  'kick_members',
  'ban_members',
  'send_messages',
  'manage_messages',
  'embed_links',
  'attach_files',
  'mention_everyone',
  'use_voice',
  'use_video',
  'screen_share',
]);

export type Permission = z.infer<typeof PermissionSchema>;

export const RoleSchema = z.object({
  id: z.string().uuid(),
  name: z.string().min(1).max(30),
  color: z.string().regex(/^#[0-9A-F]{6}$/i).optional(),
  permissions: z.array(PermissionSchema),
  position: z.number().int().min(0),
  serverId: z.string().uuid(),
});

export type Role = z.infer<typeof RoleSchema>;

/**
 * ############################
 * #  EVENT SCHEMAS          #
 * ############################
 */

export const EventTypeSchema = z.enum([
  'message_sent',
  'message_edited',
  'message_deleted',
  'reaction_added',
  'reaction_removed',
  'user_typing',
  'user_joined',
  'user_left',
  'user_status_changed',
  'call_started',
  'call_ended',
  'server_updated',
  'channel_created',
  'channel_updated',
  'channel_deleted',
]);

export type EventType = z.infer<typeof EventTypeSchema>;

export const EventSchema = z.object({
  type: EventTypeSchema,
  payload: z.any(),
  timestamp: z.date(),
});

export type Event = z.infer<typeof EventSchema>;
