// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▀ █▀█ █▄░█ █▀▀ █ █▀▀   █░█ ▄▀█ █▀█ █ ▄▀█ █▄▄ █░░ █▀▀ █▀
 * █▄▄ █▄█ █░▀█ █▀░ █ █▄█   ▀▄▀ █▀█ █▀▄ █ █▀█ █▄█ █▄▄ ██▄ ▄█
 * 
 * The env.ts file loads and validates all environment variables
 * required by the application. It ensures type safety and proper
 * error messages when config is missing.
 * 
 * Platform Compatibility: Ensures proper path resolution for both
 * Windows and Linux environments.
 */

import { z } from 'zod';
import * as dotenv from 'dotenv';
import * as path from 'path';
import * as fs from 'fs';
import { normalizePath } from '@chatera/shared/utils';

// Determine whether we're running in production or development
const isProduction = process.env.NODE_ENV === 'production';

// Load environment variables from .env file
const envPath = path.resolve(process.cwd(), isProduction ? '.env' : '.env.development');

// Check if .env file exists, if not, it will use environment variables
if (fs.existsSync(envPath)) {
  console.info(`[ENV_CONFIG] Loading environment from ${envPath}`);
  const result = dotenv.config({ path: envPath });
  
  if (result.error) {
    console.warn(`[ENV_CONFIG] Error loading .env file: ${result.error.message}`);
  }
} else {
  console.info('[ENV_CONFIG] No .env file found, using environment variables');
}

// Define schema for environment variables
const envSchema = z.object({
  // Server configuration
  PORT: z.string().default('3001'),
  HOST: z.string().default('0.0.0.0'),
  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),
  LOG_LEVEL: z.enum(['error', 'warn', 'info', 'http', 'debug']).default('info'),
  
  // Database configuration
  DATABASE_URL: z.string().url(),
  REDIS_URL: z.string().url(),
  
  // Auth configuration
  JWT_SECRET: z.string().min(32),
  JWT_EXPIRES_IN: z.string().default('7d'),
  
  // Storage configuration
  S3_ENDPOINT: z.string().url(),
  S3_REGION: z.string(),
  S3_BUCKET: z.string(),
  S3_ACCESS_KEY: z.string(),
  S3_SECRET_KEY: z.string(),
  
  // CORS and security
  CORS_ORIGIN: z.string().default('*'),
  RATE_LIMIT_WINDOW_MS: z.string().transform(Number).default('60000'),
  RATE_LIMIT_MAX: z.string().transform(Number).default('100'),
  
  // Optional features
  ENABLE_E2EE: z.enum(['true', 'false']).default('true').transform(val => val === 'true'),
  
  // AI integration with Ollama (for bots and AI features)
  OLLAMA_API_URL: z.string().url().optional(),
  OLLAMA_MODEL: z.string().default('llama3.2'),
});

// Process and validate environment variables
const processEnv = {
  PORT: process.env.PORT,
  HOST: process.env.HOST,
  NODE_ENV: process.env.NODE_ENV,
  LOG_LEVEL: process.env.LOG_LEVEL,
  DATABASE_URL: process.env.DATABASE_URL,
  REDIS_URL: process.env.REDIS_URL,
  JWT_SECRET: process.env.JWT_SECRET,
  JWT_EXPIRES_IN: process.env.JWT_EXPIRES_IN,
  S3_ENDPOINT: process.env.S3_ENDPOINT,
  S3_REGION: process.env.S3_REGION,
  S3_BUCKET: process.env.S3_BUCKET,
  S3_ACCESS_KEY: process.env.S3_ACCESS_KEY,
  S3_SECRET_KEY: process.env.S3_SECRET_KEY,
  CORS_ORIGIN: process.env.CORS_ORIGIN,
  RATE_LIMIT_WINDOW_MS: process.env.RATE_LIMIT_WINDOW_MS,
  RATE_LIMIT_MAX: process.env.RATE_LIMIT_MAX,
  ENABLE_E2EE: process.env.ENABLE_E2EE,
  OLLAMA_API_URL: process.env.OLLAMA_API_URL,
  OLLAMA_MODEL: process.env.OLLAMA_MODEL,
};

// Parse and validate environment variables
const parseResult = envSchema.safeParse(processEnv);

// Handle validation errors or provide typed environment variables
if (!parseResult.success) {
  console.error('[ENV_CONFIG] Environment variables validation failed:');
  
  parseResult.error.errors.forEach(error => {
    console.error(`[ENV_CONFIG] - ${error.path.join('.')}: ${error.message}`);
  });
  
  process.exit(1);
}

// Export validated environment variables with proper types
export const env = parseResult.data;

// Additional configuration derived from environment variables
export const config = {
  // Server configuration
  server: {
    port: parseInt(env.PORT, 10),
    host: env.HOST,
    isProduction: env.NODE_ENV === 'production',
    isDevelopment: env.NODE_ENV === 'development',
    isTest: env.NODE_ENV === 'test',
  },
  
  // Feature flags
  features: {
    e2ee: env.ENABLE_E2EE,
  },
  
  // API URLs and endpoints
  api: {
    basePath: '/api/v1',
    ollama: {
      url: env.OLLAMA_API_URL,
      model: env.OLLAMA_MODEL,
    },
  },
  
  // File storage paths (platform-aware)
  paths: {
    uploads: normalizePath(path.join(process.cwd(), 'uploads')),
    temp: normalizePath(path.join(process.cwd(), 'temp')),
    logs: normalizePath(path.join(process.cwd(), 'logs')),
  },
  
  // Security settings
  security: {
    rateLimitWindowMs: env.RATE_LIMIT_WINDOW_MS,
    rateLimitMax: env.RATE_LIMIT_MAX,
  },
};
