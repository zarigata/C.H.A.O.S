// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

// ████████████████████████████████████████████████████████████████████
// █▄─▄▄─█▄─▄▄▀█▄─▄█─▄▄▄▄█▄─▀█▀─▄██▀▄─██
// ██─▄▄▄██─▄─▄██─██▄▄▄▄─██─█▄█─███─▀─██
// ▀▄▄▄▀▀▀▄▄▀▄▄▀▄▄▄▀▄▄▄▄▄▀▄▄▄▀▄▄▄▀▄▄▀▄▄▀
// DATABASE SCHEMA FOR CHATERA MESSAGING PLATFORM
// ████████████████████████████████████████████████████████████████████

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ████████████████████████████████████████████████████████████████████
// █▄─█▀▀▀█─▄█─▄▄▄▄█▄─▄▄─█▄─▄▄▀█─▄▄▄▄█
// ██─█─█─█─██▄▄▄▄─██─▄█▀██─▄─▄█▄▄▄▄─█
// ▀▀▄▄▄▀▄▄▄▀▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  displayName   String
  email         String    @unique
  passwordHash  String
  avatar        String?
  status        String    @default("offline") // online, away, busy, offline
  bio           String?   @db.Text
  lastSeen      DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  sentMessages     Message[]      @relation("SentMessages")
  ownedServers     Server[]       @relation("ServerOwner")
  memberOfServers  ServerMember[] @relation("ServerMembers")
  memberOfChannels ChannelMember[] @relation("ChannelMembers")
  initiatedCalls   Call[]         @relation("CallInitiator")
  callParticipants CallParticipant[] @relation("CallParticipants")
  userRoles        UserRole[]     @relation("UserRoles")
  sentFriendRequests FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")
  friends          Friend[]       @relation("UserFriends")
  friendsOf        Friend[]       @relation("FriendsOf")
  messageReactions MessageReaction[] @relation("UserReactions")
  userSettings     UserSettings?
}

model UserSettings {
  id              String   @id @default(uuid())
  userId          String   @unique
  theme           String   @default("system") // light, dark, system
  notificationsEnabled Boolean @default(true)
  soundEffects    Boolean  @default(true)
  messagePreview  Boolean  @default(true)
  status          String   @default("online")
  customStatus    String?
  autoDownloadMedia Boolean @default(true)
  language        String   @default("en")
  timezone        String   @default("UTC")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ████████████████████████████████████████████████████████████████████
// █▄─▀█▀─▄█▄─▄▄─█─▄▄▄▄█─▄▄▄▄█▄─▄▄─█▄─▀█▄─▄█─▄▄▄▄█▄─▄▄─█─▄▄▄▄█
// ██─█▄█─███─▄█▀█▄▄▄▄─█▄▄▄▄─██─▄█▀██─█▄▀─██▄▄▄▄─██─▄█▀█▄▄▄▄─█
// ▀▄▄▄▀▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model Message {
  id          String      @id @default(uuid())
  content     String      @db.Text
  senderId    String
  channelId   String
  edited      Boolean     @default(false)
  replyToId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  sender      User        @relation("SentMessages", fields: [senderId], references: [id])
  channel     Channel     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  replyTo     Message?    @relation("MessageReplies", fields: [replyToId], references: [id])
  replies     Message[]   @relation("MessageReplies")
  reactions   MessageReaction[] @relation("MessageReactions")
  attachments Attachment[] @relation("MessageAttachments")
  mentions    MessageMention[] @relation("MessageMentions")
}

model MessageReaction {
  id          String    @id @default(uuid())
  emoji       String
  userId      String
  messageId   String
  createdAt   DateTime  @default(now())

  // Relationships
  user        User      @relation("UserReactions", fields: [userId], references: [id], onDelete: Cascade)
  message     Message   @relation("MessageReactions", fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model MessageMention {
  id          String    @id @default(uuid())
  messageId   String
  mentionedId String
  mentionType String    // "user", "channel", "role", "everyone"
  createdAt   DateTime  @default(now())

  // Relationships
  message     Message   @relation("MessageMentions", fields: [messageId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, mentionedId, mentionType])
}

model Attachment {
  id          String    @id @default(uuid())
  messageId   String
  type        String    // image, video, file, audio
  url         String
  filename    String
  size        Int
  width       Int?      // For images and videos
  height      Int?      // For images and videos
  duration    Int?      // For audio and videos (in seconds)
  createdAt   DateTime  @default(now())

  // Relationships
  message     Message   @relation("MessageAttachments", fields: [messageId], references: [id], onDelete: Cascade)
}

// ████████████████████████████████████████████████████████████████████
// █▄─▄▄─█▄─▄▄▀█▄─▄█▄─▄▄─█▄─▀█▄─▄█▄─▄▄▀█─▄▄▄▄█
// ██─▄▄▄██─▄─▄██─███─▄█▀██─█▄▀─███─██─█▄▄▄▄─█
// ▀▄▄▄▀▀▀▄▄▀▄▄▀▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▀▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model Friend {
  id            String    @id @default(uuid())
  userId        String
  friendId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  user          User      @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friend        User      @relation("FriendsOf", fields: [friendId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model FriendRequest {
  id            String    @id @default(uuid())
  senderId      String
  receiverId    String
  status        String    @default("pending") // pending, accepted, rejected
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  sender        User      @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver      User      @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

// ████████████████████████████████████████████████████████████████████
// █─▄▄▄▄█▄─▄▄─█▄─▄▄▀█▄─█─▄█▄─▄▄─█▄─▄▄▀█─▄▄▄▄█
// █▄▄▄▄─██─▄█▀██─▄─▄██─▄▀███─▄████─██─█▄▄▄▄─█
// ▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▀▄▄▀▄▄▄▀▀▀▄▄▄▄▀▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model Server {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  icon        String?
  inviteCode  String?   @unique
  ownerId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  owner       User      @relation("ServerOwner", fields: [ownerId], references: [id])
  members     ServerMember[] @relation("ServerToMembers")
  channels    Channel[] @relation("ServerChannels")
  roles       Role[]    @relation("ServerRoles")
}

model ServerMember {
  id          String    @id @default(uuid())
  userId      String
  serverId    String
  nickname    String?
  joinedAt    DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  user        User      @relation("ServerMembers", fields: [userId], references: [id], onDelete: Cascade)
  server      Server    @relation("ServerToMembers", fields: [serverId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serverId])
}

// ████████████████████████████████████████████████████████████████████
// █▄─▄▄─█▄─▄▄─█▄─▄▄▀█▄─▀█▀─▄█▄─▄█─▄▄▄▄█─▄▄▄▄█▄─▄█▄─▄▄─█▄─▀█▄─▄█─▄▄▄▄█
// ██─██─██─▄█▀██─▄─▄██─█▄█─███─██▄▄▄▄─█▄▄▄▄─██─███─▄████─█▄▀─██▄▄▄▄─█
// ▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▄▄▄▀▄▄▄▀▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▄▄▄▀▀▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model Role {
  id          String    @id @default(uuid())
  name        String
  color       String?
  permissions String[]  // Array of permission strings
  position    Int
  serverId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  server      Server    @relation("ServerRoles", fields: [serverId], references: [id], onDelete: Cascade)
  users       UserRole[] @relation("RoleUsers")
}

model UserRole {
  id          String    @id @default(uuid())
  userId      String
  roleId      String
  createdAt   DateTime  @default(now())

  // Relationships
  user        User      @relation("UserRoles", fields: [userId], references: [id], onDelete: Cascade)
  role        Role      @relation("RoleUsers", fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

// ████████████████████████████████████████████████████████████████████
// █▄─▄▄─█─█─█▄─▄▄─█▄─▀█▄─▄█▄─▀█▄─▄█▄─▄▄─█▄─▄███─▄▄▄▄█
// ██─█▀▀█─█─██─▄█▀██─█▄▀─███─█▄▀─███─▄█▀██─██▀█▄▄▄▄─█
// ▀▄▄▄▄▄▀▄▄▄▄▀▄▄▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model Channel {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  type        String    // "text", "voice", "video", "direct", "group"
  serverId    String?
  isEncrypted Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  server      Server?   @relation("ServerChannels", fields: [serverId], references: [id], onDelete: Cascade)
  messages    Message[] @relation()
  members     ChannelMember[] @relation("ChannelToMembers")
  calls       Call[]    @relation("ChannelCalls")
}

model ChannelMember {
  id          String    @id @default(uuid())
  userId      String
  channelId   String
  joinedAt    DateTime  @default(now())
  lastRead    DateTime  @default(now())

  // Relationships
  user        User      @relation("ChannelMembers", fields: [userId], references: [id], onDelete: Cascade)
  channel     Channel   @relation("ChannelToMembers", fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
}

// ████████████████████████████████████████████████████████████████████
// █▄─▄▄─█▄─▄▄─█▄─▄███▄─█─▄█─▄─▄─█▄─▄█▄─▀█▄─▄█▄─▄▄─█
// ██─▄████─▄█▀██─██▀██─▄▀███─███─███─███─█▄▀─███─▄█▀█
// ▀▄▄▄▀▀▀▄▄▄▄▄▀▄▄▄▄▄▀▄▄▀▄▄▀▀▄▄▄▀▀▄▄▄▀▄▄▄▀▀▄▄▀▄▄▄▄▄▀
// ████████████████████████████████████████████████████████████████████

model Call {
  id                String    @id @default(uuid())
  channelId         String
  initiatorId       String
  startTime         DateTime  @default(now())
  endTime           DateTime?
  status            String    @default("ringing") // ringing, ongoing, ended
  hasVideo          Boolean   @default(false)
  
  // Relationships
  channel           Channel   @relation("ChannelCalls", fields: [channelId], references: [id], onDelete: Cascade)
  initiator         User      @relation("CallInitiator", fields: [initiatorId], references: [id])
  participants      CallParticipant[] @relation("CallToParticipants")
}

model CallParticipant {
  id                String    @id @default(uuid())
  userId            String
  callId            String
  joinTime          DateTime  @default(now())
  leaveTime         DateTime?
  hasVideo          Boolean   @default(false)
  hasAudio          Boolean   @default(true)
  isScreenSharing   Boolean   @default(false)

  // Relationships
  user              User      @relation("CallParticipants", fields: [userId], references: [id], onDelete: Cascade)
  call              Call      @relation("CallToParticipants", fields: [callId], references: [id], onDelete: Cascade)

  @@unique([userId, callId])
}
