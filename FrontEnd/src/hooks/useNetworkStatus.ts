// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▄░█ █▀▀ ▀█▀ █░█░█ █▀█ █▀█ █▄▀   █▀ ▀█▀ ▄▀█ ▀█▀ █░█ █▀
 * █░▀█ ██▄ ░█░ ▀▄▀▄▀ █▄█ █▀▄ █░█   ▄█ ░█░ █▀█ ░█░ █▄█ ▄█
 * 
 * [CODEX] Network Status Hook
 * 
 * This custom hook monitors the network connectivity status
 * to handle online/offline state gracefully across both web
 * and desktop environments. It's used for connection management
 * and fallback behavior when connectivity is lost.
 */

import { useState, useEffect } from 'react';

/**
 * [H4X] NETWORK STATUS MONITOR
 * 
 * React hook that tracks online/offline status and handles
 * cross-platform detection methods for reliable connectivity awareness.
 */
export function useNetworkStatus(): boolean {
  const [isOnline, setIsOnline] = useState<boolean>(
    typeof navigator !== 'undefined' ? navigator.onLine : true
  );
  
  useEffect(() => {
    // Avoid running in SSR context
    if (typeof window === 'undefined') {
      return;
    }
    
    // Define handlers
    const handleOnline = () => {
      console.info('[NETWORK] Connection restored');
      setIsOnline(true);
    };
    
    const handleOffline = () => {
      console.warn('[NETWORK] Connection lost');
      setIsOnline(false);
    };
    
    // Register listeners
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Secondary check using fetch API for more reliability
    const checkConnectivity = async () => {
      try {
        // Simple HEAD request to check connectivity
        const response = await fetch('/api/health', { 
          method: 'HEAD',
          // Small timeout to avoid long waiting periods
          signal: AbortSignal.timeout(3000)
        });
        setIsOnline(response.ok);
      } catch (error) {
        // If fetch fails, we're likely offline
        console.warn('[NETWORK] Connectivity check failed:', error);
        setIsOnline(false);
      }
    };
    
    // Initial check
    checkConnectivity();
    
    // Periodic check every 30 seconds while tab is active
    let intervalId: NodeJS.Timeout | null = null;
    
    // Only set up interval when document is visible
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible') {
        intervalId = setInterval(checkConnectivity, 30000);
      } else if (intervalId) {
        clearInterval(intervalId);
        intervalId = null;
      }
    };
    
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    // Initial setup based on current visibility
    if (document.visibilityState === 'visible') {
      intervalId = setInterval(checkConnectivity, 30000);
    }
    
    // Cleanup
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, []);
  
  return isOnline;
}
