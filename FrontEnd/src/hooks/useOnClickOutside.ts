// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▀ █░░ █ █▀▀ █▄▀   █▀█ █░█ ▀█▀ █▀ █ █▀▄ █▀▀
 * █▄▄ █▄▄ █ █▄▄ █░█   █▄█ █▄█ ░█░ ▄█ █ █▄▀ ██▄
 * 
 * [CODEX] Click Outside Hook
 * 
 * This custom hook detects clicks outside of a specified element
 * to handle closing dropdowns, modals, and other floating UI elements.
 * 
 * It's a foundational utility for building accessible and intuitive UIs
 * that follow expected dismissal patterns.
 */

import { useEffect, RefObject } from 'react';

type Handler = (event: MouseEvent | TouchEvent) => void;

/**
 * [H4X] CLICK OUTSIDE DETECTOR
 * 
 * This hook tracks mouse and touch events to detect interactions
 * outside of a referenced element. When such interactions occur,
 * it executes the provided callback function.
 * 
 * Optimized for cross-platform compatibility and accessibility.
 * 
 * @param ref - Reference to the element to monitor
 * @param handler - Function to call when a click outside occurs
 * @param mouseEvent - Mouse event type to listen for (default: 'mousedown')
 * @param touchEvent - Touch event type to listen for (default: 'touchstart')
 */
export function useOnClickOutside<T extends HTMLElement = HTMLElement>(
  ref: RefObject<T>,
  handler: Handler,
  mouseEvent: 'mousedown' | 'mouseup' = 'mousedown',
  touchEvent: 'touchstart' | 'touchend' = 'touchstart'
): void {
  useEffect(() => {
    // Bail early if no ref or handler
    if (!ref.current || !handler) {
      return;
    }
    
    /**
     * [H4X] EVENT PROCESSOR
     * 
     * Determines if a click/touch event occurred outside the ref element
     * and calls the handler if so. Handles platform-specific event variations.
     */
    const listener = (event: MouseEvent | TouchEvent) => {
      // Do nothing if clicking ref's element or its children
      const el = ref.current;
      
      // Check if the click was inside the referenced element
      if (!el || el.contains(event.target as Node)) {
        return;
      }
      
      // Call handler only if the click is outside
      handler(event);
    };
    
    // Register event listeners for both mouse and touch events
    document.addEventListener(mouseEvent, listener);
    document.addEventListener(touchEvent, listener);
    
    // Add listener for the Escape key for accessibility
    const escapeListener = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        handler(event as unknown as MouseEvent);
      }
    };
    document.addEventListener('keydown', escapeListener);
    
    // Clean up event listeners on unmount
    return () => {
      document.removeEventListener(mouseEvent, listener);
      document.removeEventListener(touchEvent, listener);
      document.removeEventListener('keydown', escapeListener);
    };
  }, [ref, handler, mouseEvent, touchEvent]);
}
