// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * ▄▀█ █▀█ █▀█ █▀▀ ▄▀█ █▀█ ▄▀█ █▄░█ █▀▀ █▀▀   █▀ █▀▀ ▀█▀ ▀█▀ █ █▄░█ █▀▀ █▀
 * █▀█ █▀▀ █▀▀ ██▄ █▀█ █▀▄ █▀█ █░▀█ █▄▄ ██▄   ▄█ ██▄ ░█░ ░█░ █ █░▀█ █▄█ ▄█
 * 
 * [CODEX] Appearance Settings Component
 * 
 * This component allows users to customize the visual appearance
 * of the ChatEra application, with options for theme selection,
 * layout configuration, and font settings.
 * 
 * Features:
 * - Theme selection (light/dark/system/custom)
 * - Font size and family configuration
 * - Layout density options
 * - Color scheme customization
 * - MSN-inspired visual options
 * - Cross-platform support (Windows/Linux)
 */

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Moon, 
  Sun, 
  Monitor, 
  Type, 
  Layout, 
  Grid,
  LayoutGrid,
  Palette
} from 'lucide-react';
import { useTauri } from '@/lib/tauri';

interface AppearanceSettingsProps {
  onSaveChanges: (hasChanges: boolean) => void;
}

/**
 * [H4X] APPEARANCE SETTINGS COMPONENT
 * 
 * Component for customizing the visual appearance of ChatEra
 */
const AppearanceSettings: React.FC<AppearanceSettingsProps> = ({ onSaveChanges }) => {
  const { isDesktop } = useTauri();
  
  // Form state
  const [settings, setSettings] = useState({
    theme: 'system', // 'light', 'dark', 'system', 'custom'
    fontSize: 'medium', // 'small', 'medium', 'large'
    fontFamily: 'system', // 'system', 'serif', 'mono'
    density: 'comfortable', // 'compact', 'comfortable', 'spacious'
    showAvatars: true,
    enableAnimations: true,
    enableSounds: true,
    msnClassicMode: false, // Easter egg: enables classic MSN Messenger styling
    customCss: '',
    showStatusInTabs: true,
    chatBubbleStyle: 'modern', // 'modern', 'classic', 'minimal'
    emojiStyle: 'native', // 'native', 'twitter', 'facebook', 'google'
  });
  
  // Color schemes
  const [customColors, setCustomColors] = useState({
    primary: '#0078d7', // MSN blue
    secondary: '#6c2dc7', // MSN purple
    accent: '#00cc6a', // MSN green
    background: '#ffffff',
    text: '#333333',
  });
  
  // Track unsaved changes
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // Notify parent component about unsaved changes
  useEffect(() => {
    onSaveChanges(hasUnsavedChanges);
  }, [hasUnsavedChanges, onSaveChanges]);
  
  /**
   * [H4X] Form change handlers
   */
  const handleSettingChange = (
    name: keyof typeof settings,
    value: string | boolean
  ) => {
    setSettings(prev => ({ ...prev, [name]: value }));
    setHasUnsavedChanges(true);
  };
  
  const handleColorChange = (
    name: keyof typeof customColors,
    value: string
  ) => {
    setCustomColors(prev => ({ ...prev, [name]: value }));
    setHasUnsavedChanges(true);
  };
  
  /**
   * [H4X] Theme preview component
   */
  const ThemePreview = ({ theme }: { theme: string }) => {
    let bgColor, textColor, borderColor;
    
    switch (theme) {
      case 'light':
        bgColor = 'bg-white';
        textColor = 'text-msn-gray-800';
        borderColor = 'border-msn-gray-200';
        break;
      case 'dark':
        bgColor = 'bg-msn-gray-800';
        textColor = 'text-white';
        borderColor = 'border-msn-gray-700';
        break;
      case 'system':
        bgColor = 'bg-gradient-to-r from-white to-msn-gray-800';
        textColor = 'text-msn-gray-800';
        borderColor = 'border-msn-gray-300';
        break;
      case 'custom':
        bgColor = 'bg-gradient-to-r from-msn-blue to-msn-purple';
        textColor = 'text-white';
        borderColor = 'border-msn-blue';
        break;
      default:
        bgColor = 'bg-white';
        textColor = 'text-msn-gray-800';
        borderColor = 'border-msn-gray-200';
    }
    
    return (
      <div className={`${bgColor} ${textColor} ${borderColor} border rounded-md p-3 text-center w-full h-24 flex flex-col items-center justify-center`}>
        <div className="text-xs mb-1">Preview</div>
        <div className="font-medium">ChatEra Theme</div>
        {theme === 'system' && (
          <div className="flex items-center mt-1 text-xs">
            <Moon size={12} className="mr-1" />
            <span>Auto</span>
            <Sun size={12} className="ml-1" />
          </div>
        )}
      </div>
    );
  };
  
  /**
   * [H4X] Font size preview component
   */
  const FontSizePreview = ({ size }: { size: string }) => {
    let fontSize;
    
    switch (size) {
      case 'small':
        fontSize = 'text-xs';
        break;
      case 'medium':
        fontSize = 'text-base';
        break;
      case 'large':
        fontSize = 'text-lg';
        break;
      default:
        fontSize = 'text-base';
    }
    
    return (
      <div className={`${fontSize} border border-msn-gray-200 dark:border-msn-gray-700 rounded-md p-3 text-center bg-white dark:bg-msn-gray-800 w-full h-20 flex items-center justify-center`}>
        <span>Sample Text</span>
      </div>
    );
  };
  
  return (
    <div className="space-y-8">
      <h2 className="text-xl font-semibold mb-4">Appearance Settings</h2>
      
      {/* Theme Selection */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium mb-2">Theme</h3>
        <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mb-4">
          Choose how ChatEra looks to you. Select a theme or let your system settings decide.
        </p>
        
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="space-y-2">
            <ThemePreview theme="light" />
            <button
              type="button"
              className={`w-full py-2 rounded-md text-sm ${
                settings.theme === 'light'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('theme', 'light')}
            >
              <Sun size={16} className="inline mr-1.5" />
              Light
            </button>
          </div>
          
          <div className="space-y-2">
            <ThemePreview theme="dark" />
            <button
              type="button"
              className={`w-full py-2 rounded-md text-sm ${
                settings.theme === 'dark'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('theme', 'dark')}
            >
              <Moon size={16} className="inline mr-1.5" />
              Dark
            </button>
          </div>
          
          <div className="space-y-2">
            <ThemePreview theme="system" />
            <button
              type="button"
              className={`w-full py-2 rounded-md text-sm ${
                settings.theme === 'system'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('theme', 'system')}
            >
              <Monitor size={16} className="inline mr-1.5" />
              System
            </button>
          </div>
          
          <div className="space-y-2">
            <ThemePreview theme="custom" />
            <button
              type="button"
              className={`w-full py-2 rounded-md text-sm ${
                settings.theme === 'custom'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('theme', 'custom')}
            >
              <Palette size={16} className="inline mr-1.5" />
              Custom
            </button>
          </div>
        </div>
      </div>
      
      {/* Font Settings */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium mb-2">Text</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">Font Size</label>
            <div className="grid grid-cols-3 gap-4">
              <div className="space-y-2">
                <FontSizePreview size="small" />
                <button
                  type="button"
                  className={`w-full py-2 rounded-md text-sm ${
                    settings.fontSize === 'small'
                      ? 'bg-msn-blue text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                  }`}
                  onClick={() => handleSettingChange('fontSize', 'small')}
                >
                  Small
                </button>
              </div>
              
              <div className="space-y-2">
                <FontSizePreview size="medium" />
                <button
                  type="button"
                  className={`w-full py-2 rounded-md text-sm ${
                    settings.fontSize === 'medium'
                      ? 'bg-msn-blue text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                  }`}
                  onClick={() => handleSettingChange('fontSize', 'medium')}
                >
                  Medium
                </button>
              </div>
              
              <div className="space-y-2">
                <FontSizePreview size="large" />
                <button
                  type="button"
                  className={`w-full py-2 rounded-md text-sm ${
                    settings.fontSize === 'large'
                      ? 'bg-msn-blue text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                  }`}
                  onClick={() => handleSettingChange('fontSize', 'large')}
                >
                  Large
                </button>
              </div>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">Font Family</label>
            <div className="grid grid-cols-3 gap-4">
              <button
                type="button"
                className={`py-2 rounded-md text-sm ${
                  settings.fontFamily === 'system'
                    ? 'bg-msn-blue text-white'
                    : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                }`}
                onClick={() => handleSettingChange('fontFamily', 'system')}
              >
                System
              </button>
              
              <button
                type="button"
                className={`py-2 rounded-md text-sm font-serif ${
                  settings.fontFamily === 'serif'
                    ? 'bg-msn-blue text-white'
                    : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                }`}
                onClick={() => handleSettingChange('fontFamily', 'serif')}
              >
                Serif
              </button>
              
              <button
                type="button"
                className={`py-2 rounded-md text-sm font-mono ${
                  settings.fontFamily === 'mono'
                    ? 'bg-msn-blue text-white'
                    : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                }`}
                onClick={() => handleSettingChange('fontFamily', 'mono')}
              >
                Monospace
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Layout Density */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium mb-2">Layout</h3>
        
        <div>
          <label className="block text-sm font-medium mb-2">Density</label>
          <div className="grid grid-cols-3 gap-4">
            <button
              type="button"
              className={`py-2 rounded-md text-sm ${
                settings.density === 'compact'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('density', 'compact')}
            >
              <LayoutGrid size={16} className="inline mr-1.5" />
              Compact
            </button>
            
            <button
              type="button"
              className={`py-2 rounded-md text-sm ${
                settings.density === 'comfortable'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('density', 'comfortable')}
            >
              <Layout size={16} className="inline mr-1.5" />
              Comfortable
            </button>
            
            <button
              type="button"
              className={`py-2 rounded-md text-sm ${
                settings.density === 'spacious'
                  ? 'bg-msn-blue text-white'
                  : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
              }`}
              onClick={() => handleSettingChange('density', 'spacious')}
            >
              <Grid size={16} className="inline mr-1.5" />
              Spacious
            </button>
          </div>
        </div>
      </div>
      
      {/* Visual Effects */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium mb-2">Visual Effects</h3>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">Show avatars</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="showAvatars"
                  id="showAvatars"
                  checked={settings.showAvatars}
                  onChange={() => handleSettingChange('showAvatars', !settings.showAvatars)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.showAvatars
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">Enable animations</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="enableAnimations"
                  id="enableAnimations"
                  checked={settings.enableAnimations}
                  onChange={() => handleSettingChange('enableAnimations', !settings.enableAnimations)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.enableAnimations
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">Enable sounds</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="enableSounds"
                  id="enableSounds"
                  checked={settings.enableSounds}
                  onChange={() => handleSettingChange('enableSounds', !settings.enableSounds)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.enableSounds
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">MSN Classic Mode</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="msnClassicMode"
                  id="msnClassicMode"
                  checked={settings.msnClassicMode}
                  onChange={() => handleSettingChange('msnClassicMode', !settings.msnClassicMode)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.msnClassicMode
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AppearanceSettings;
