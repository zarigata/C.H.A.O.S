// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀ █▀▀ ▀█▀ ▀█▀ █ █▄░█ █▀▀ █▀   █░░ ▄▀█ █▄█ █▀█ █░█ ▀█▀
 * ▄█ ██▄ ░█░ ░█░ █ █░▀█ █▄█ ▄█   █▄▄ █▀█ ░█░ █▄█ █▄█ ░█░
 * 
 * [CODEX] Settings Layout Component
 * 
 * This component provides the main layout for the settings interface,
 * including a sidebar navigation and content area for different settings
 * categories. It's designed to mimic the classic MSN Messenger options
 * dialog with modern UX improvements.
 * 
 * Features:
 * - MSN-inspired category navigation
 * - Responsive layout for all screen sizes
 * - Breadcrumb navigation
 * - Unsaved changes warnings
 * - Cross-platform compatibility
 */

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  User, 
  Bell, 
  Shield, 
  Palette, 
  MonitorSmartphone,
  HelpCircle, 
  ChevronRight,
  Save,
  X,
  AlertTriangle,
  KeyRound,
  Accessibility
} from 'lucide-react';
import { useTauri } from '@/lib/tauri';

interface NavItem {
  id: string;
  label: string;
  icon: React.ReactNode;
  path: string;
}

interface SettingsLayoutProps {
  children: React.ReactNode;
  title?: string;
  hasUnsavedChanges?: boolean;
  onSave?: () => Promise<void>;
  onCancel?: () => void;
  currentSection?: string;
}

/**
 * [H4X] NAVIGATION CONFIGURATION
 * 
 * Define the main navigation items for the settings sidebar
 */
const NAVIGATION_ITEMS: NavItem[] = [
  {
    id: 'account',
    label: 'Account',
    icon: <User size={18} />,
    path: '/settings/account'
  },
  {
    id: 'notifications',
    label: 'Notifications',
    icon: <Bell size={18} />,
    path: '/settings/notifications'
  },
  {
    id: 'privacy',
    label: 'Privacy & Security',
    icon: <Shield size={18} />,
    path: '/settings/privacy'
  },
  {
    id: 'appearance',
    label: 'Appearance',
    icon: <Palette size={18} />,
    path: '/settings/appearance'
  },
  {
    id: 'devices',
    label: 'Devices',
    icon: <MonitorSmartphone size={18} />,
    path: '/settings/devices'
  },
  {
    id: 'accessibility',
    label: 'Accessibility',
    icon: <Accessibility size={18} />,
    path: '/settings/accessibility'
  },
  {
    id: 'encryption',
    label: 'Encryption',
    icon: <KeyRound size={18} />,
    path: '/settings/encryption'
  },
  {
    id: 'help',
    label: 'Help & Support',
    icon: <HelpCircle size={18} />,
    path: '/settings/help'
  }
];

/**
 * [H4X] SETTINGS LAYOUT COMPONENT
 * 
 * Main container component for the settings interface
 */
const SettingsLayout: React.FC<SettingsLayoutProps> = ({
  children,
  title = 'Settings',
  hasUnsavedChanges = false,
  onSave,
  onCancel,
  currentSection
}) => {
  const router = useRouter();
  const { isDesktop } = useTauri();
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [showUnsavedWarning, setShowUnsavedWarning] = useState(false);
  const [pendingNavigation, setPendingNavigation] = useState<string | null>(null);

  // Determine current section from path if not explicitly provided
  const activeSectionId = currentSection || router.pathname.split('/').pop() || 'account';
  
  // Find the current navigation item
  const activeNavItem = NAVIGATION_ITEMS.find(item => item.id === activeSectionId);

  // Handle navigation with unsaved changes check
  const handleNavigation = (path: string) => {
    if (hasUnsavedChanges) {
      setShowUnsavedWarning(true);
      setPendingNavigation(path);
    } else {
      router.push(path);
      setMobileMenuOpen(false);
    }
  };

  // Proceed with navigation after confirming discard changes
  const proceedWithNavigation = () => {
    if (pendingNavigation) {
      if (onCancel) onCancel();
      router.push(pendingNavigation);
      setShowUnsavedWarning(false);
      setPendingNavigation(null);
      setMobileMenuOpen(false);
    }
  };

  // Cancel navigation and stay on current page
  const cancelNavigation = () => {
    setShowUnsavedWarning(false);
    setPendingNavigation(null);
  };

  // Handle save and navigation
  const handleSaveAndNavigate = async () => {
    if (onSave) {
      try {
        await onSave();
        if (pendingNavigation) {
          router.push(pendingNavigation);
          setPendingNavigation(null);
        }
        setShowUnsavedWarning(false);
      } catch (error) {
        console.error('Error saving settings:', error);
      }
    }
  };

  // Listen for navigation events to show warning if necessary
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (hasUnsavedChanges) {
        e.preventDefault();
        e.returnValue = '';
        return '';
      }
    };

    // Add event listener for browser navigation (refresh/close)
    window.addEventListener('beforeunload', handleBeforeUnload);

    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [hasUnsavedChanges]);

  // Define animation variants
  const sidebarVariants = {
    hidden: { x: -300, opacity: 0 },
    visible: { 
      x: 0, 
      opacity: 1,
      transition: { type: 'spring', stiffness: 300, damping: 30 }
    },
    exit: { 
      x: -300, 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };

  // Content animation variants
  const contentVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { duration: 0.3 }
    }
  };

  return (
    <div className="flex flex-col min-h-screen bg-msn-gray-100 dark:bg-msn-gray-900">
      {/* Top app bar */}
      <header className="bg-white dark:bg-msn-gray-800 shadow-sm py-3 px-4 flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <button
            className="lg:hidden p-2 text-msn-gray-600 dark:text-msn-gray-300 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700 rounded-md"
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
          >
            <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
          <h1 className="text-xl font-semibold text-msn-gray-800 dark:text-white">{title}</h1>
        </div>

        {/* Save/Cancel buttons (only show when there are unsaved changes) */}
        {hasUnsavedChanges && (
          <div className="flex items-center space-x-2">
            <button
              className="flex items-center px-3 py-1.5 text-sm bg-msn-blue text-white rounded hover:bg-msn-blue-dark transition-colors"
              onClick={onSave}
            >
              <Save size={16} className="mr-1.5" />
              Save
            </button>
            <button
              className="flex items-center px-3 py-1.5 text-sm bg-msn-gray-200 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300 rounded hover:bg-msn-gray-300 dark:hover:bg-msn-gray-600 transition-colors"
              onClick={onCancel}
            >
              <X size={16} className="mr-1.5" />
              Cancel
            </button>
          </div>
        )}
      </header>

      {/* Main content area with sidebar */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar - Desktop always visible, mobile conditionally */}
        <AnimatePresence>
          {(mobileMenuOpen || window.innerWidth >= 1024) && (
            <motion.aside
              className={`lg:block bg-white dark:bg-msn-gray-800 w-64 border-r border-msn-gray-200 dark:border-msn-gray-700 overflow-y-auto ${
                mobileMenuOpen ? 'fixed inset-0 z-40 lg:relative' : 'hidden'
              }`}
              variants={sidebarVariants}
              initial="hidden"
              animate="visible"
              exit="exit"
            >
              {/* Close button for mobile */}
              {mobileMenuOpen && (
                <div className="lg:hidden flex justify-end p-2">
                  <button
                    className="p-2 text-msn-gray-600 dark:text-msn-gray-400 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700 rounded-full"
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <X size={20} />
                  </button>
                </div>
              )}

              {/* Navigation items */}
              <nav className="py-4">
                <ul className="space-y-1 px-2">
                  {NAVIGATION_ITEMS.map((item) => (
                    <li key={item.id}>
                      <button
                        onClick={() => handleNavigation(item.path)}
                        className={`w-full flex items-center justify-between px-3 py-2.5 rounded-md transition-colors ${
                          activeSectionId === item.id
                            ? 'bg-msn-blue/10 text-msn-blue dark:bg-msn-blue/20'
                            : 'text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700'
                        }`}
                      >
                        <div className="flex items-center">
                          <span className="mr-3">{item.icon}</span>
                          <span>{item.label}</span>
                        </div>
                        {activeSectionId === item.id && (
                          <ChevronRight size={16} className="text-msn-blue" />
                        )}
                      </button>
                    </li>
                  ))}
                </ul>
              </nav>

              {/* MSN nostalgic branding footer */}
              <div className="px-4 py-3 mt-auto border-t border-msn-gray-200 dark:border-msn-gray-700">
                <div className="flex items-center">
                  <div className="h-8 w-8 bg-gradient-to-r from-msn-blue to-msn-blue-light rounded-full flex items-center justify-center mr-2">
                    <span className="text-white text-xs font-bold">CE</span>
                  </div>
                  <div>
                    <p className="text-xs text-msn-gray-600 dark:text-msn-gray-400">ChatEra v1.0</p>
                    <p className="text-xs text-msn-gray-500 dark:text-msn-gray-500">© 2025 ChatEra Corp.</p>
                  </div>
                </div>
              </div>
            </motion.aside>
          )}
        </AnimatePresence>

        {/* Main content */}
        <motion.main
          className="flex-1 overflow-y-auto p-6"
          variants={contentVariants}
          initial="hidden"
          animate="visible"
        >
          {/* Breadcrumb navigation */}
          <div className="mb-6">
            <nav className="flex" aria-label="Breadcrumb">
              <ol className="inline-flex items-center space-x-1 md:space-x-3">
                <li className="inline-flex items-center">
                  <Link href="/settings" className="text-sm text-msn-gray-500 dark:text-msn-gray-400 hover:text-msn-gray-700 dark:hover:text-msn-gray-300">
                    Settings
                  </Link>
                </li>
                {activeNavItem && (
                  <li>
                    <div className="flex items-center">
                      <ChevronRight size={16} className="text-msn-gray-400" />
                      <span className="ml-1 text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300">
                        {activeNavItem.label}
                      </span>
                    </div>
                  </li>
                )}
              </ol>
            </nav>
          </div>

          {/* Content area */}
          <div className="bg-white dark:bg-msn-gray-800 rounded-lg shadow p-6">
            {children}
          </div>
        </motion.main>
      </div>

      {/* Unsaved changes warning modal */}
      {showUnsavedWarning && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-msn-gray-800 rounded-lg shadow-xl max-w-md w-full p-6">
            <div className="flex items-start">
              <div className="mr-4 text-msn-yellow">
                <AlertTriangle size={24} />
              </div>
              <div>
                <h3 className="text-lg font-medium text-msn-gray-900 dark:text-white">
                  Unsaved changes
                </h3>
                <p className="mt-2 text-sm text-msn-gray-600 dark:text-msn-gray-400">
                  You have unsaved changes that will be lost if you navigate away. Would you like to save your changes?
                </p>
                <div className="mt-4 flex justify-end space-x-3">
                  <button
                    className="px-3 py-1.5 text-sm text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700 rounded"
                    onClick={proceedWithNavigation}
                  >
                    Discard
                  </button>
                  <button
                    className="px-3 py-1.5 text-sm bg-msn-gray-200 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-300 dark:hover:bg-msn-gray-600 rounded"
                    onClick={cancelNavigation}
                  >
                    Cancel
                  </button>
                  <button
                    className="px-3 py-1.5 text-sm bg-msn-blue text-white rounded hover:bg-msn-blue-dark"
                    onClick={handleSaveAndNavigate}
                  >
                    Save
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default SettingsLayout;
