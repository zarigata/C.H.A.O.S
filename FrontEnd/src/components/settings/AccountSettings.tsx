// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * ▄▀█ █▀▀ █▀▀ █▀█ █░█ █▄░█ ▀█▀   █▀ █▀▀ ▀█▀ ▀█▀ █ █▄░█ █▀▀ █▀
 * █▀█ █▄▄ █▄▄ █▄█ █▄█ █░▀█ ░█░   ▄█ ██▄ ░█░ ░█░ █ █░▀█ █▄█ ▄█
 * 
 * [CODEX] Account Settings Component
 * 
 * This component allows users to manage their profile information,
 * account credentials, and linked services with an MSN-inspired
 * interface and modern security practices.
 * 
 * Features:
 * - Profile information updates
 * - Password management
 * - Account status controls
 * - Linked devices management
 * - Account deletion options
 * - Cross-platform compatibility
 */

import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { toast } from 'react-hot-toast';
import { 
  Camera, 
  Upload, 
  Lock, 
  Mail, 
  User, 
  Smartphone, 
  AlertTriangle,
  X,
  LogOut,
  Trash2,
  Check,
  Info
} from 'lucide-react';
import { useTauri } from '@/lib/tauri';
import { useAuth } from '@/lib/auth';
import ErrorMessage from '@/components/ui/ErrorMessage';

interface AccountSettingsProps {
  onSaveChanges: (hasChanges: boolean) => void;
}

/**
 * [H4X] SECTION TYPES
 * 
 * Define the different sections of the account settings
 */
type AccountSettingSection = 'profile' | 'security' | 'devices' | 'danger';

/**
 * [H4X] ACCOUNT SETTINGS COMPONENT
 * 
 * Main component for managing user account information
 */
const AccountSettings: React.FC<AccountSettingsProps> = ({ onSaveChanges }) => {
  const { user, updateProfile, logout } = useAuth();
  const { isDesktop } = useTauri();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Form states
  const [activeSection, setActiveSection] = useState<AccountSettingSection>('profile');
  const [isEditing, setIsEditing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  
  // Profile form state
  const [profileForm, setProfileForm] = useState({
    displayName: user?.displayName || '',
    username: user?.username || '',
    email: user?.email || '',
    statusMessage: user?.statusMessage || '',
    avatar: user?.avatar || null as string | null
  });
  
  // Security form state
  const [securityForm, setSecurityForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });
  
  // Form validation
  const [errors, setErrors] = useState<Record<string, string>>({});
  
  // Track form changes to determine if there are unsaved changes
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // Notify parent component about unsaved changes
  useEffect(() => {
    onSaveChanges(hasUnsavedChanges);
  }, [hasUnsavedChanges, onSaveChanges]);
  
  /**
   * [H4X] Handle form field changes
   */
  const handleProfileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setProfileForm(prev => ({ ...prev, [name]: value }));
    setHasUnsavedChanges(true);
    
    // Clear related error when field is edited
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };
  
  const handleSecurityChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setSecurityForm(prev => ({ ...prev, [name]: value }));
    setHasUnsavedChanges(true);
    
    // Clear related error when field is edited
    if (errors[name]) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name];
        return newErrors;
      });
    }
  };
  
  /**
   * [H4X] Avatar handling functions
   */
  const handleAvatarUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
      setErrors(prev => ({ ...prev, avatar: 'Please select an image file' }));
      return;
    }
    
    // For demo purposes, create a local URL
    // In a real app, you'd upload the file to a server
    const imageUrl = URL.createObjectURL(file);
    setProfileForm(prev => ({ ...prev, avatar: imageUrl }));
    setHasUnsavedChanges(true);
    
    // Clear related error
    if (errors.avatar) {
      setErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors.avatar;
        return newErrors;
      });
    }
  };
  
  const selectAvatarFile = () => {
    if (isDesktop) {
      // For Tauri desktop app
      // Would use Tauri's dialog API
      fileInputRef.current?.click();
    } else {
      // Web browser
      fileInputRef.current?.click();
    }
  };
  
  const removeAvatar = () => {
    setProfileForm(prev => ({ ...prev, avatar: null }));
    setHasUnsavedChanges(true);
  };
  
  /**
   * [H4X] Form validation
   */
  const validateProfileForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!profileForm.displayName.trim()) {
      newErrors.displayName = 'Display name is required';
    }
    
    if (!profileForm.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i.test(profileForm.email)) {
      newErrors.email = 'Invalid email address';
    }
    
    if (!profileForm.username.trim()) {
      newErrors.username = 'Username is required';
    } else if (profileForm.username.length < 3) {
      newErrors.username = 'Username must be at least 3 characters';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  const validateSecurityForm = (): boolean => {
    const newErrors: Record<string, string> = {};
    
    if (!securityForm.currentPassword) {
      newErrors.currentPassword = 'Current password is required';
    }
    
    if (!securityForm.newPassword) {
      newErrors.newPassword = 'New password is required';
    } else if (securityForm.newPassword.length < 8) {
      newErrors.newPassword = 'Password must be at least 8 characters';
    }
    
    if (!securityForm.confirmPassword) {
      newErrors.confirmPassword = 'Please confirm your new password';
    } else if (securityForm.newPassword !== securityForm.confirmPassword) {
      newErrors.confirmPassword = 'Passwords do not match';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };
  
  /**
   * [H4X] Form submission handlers
   */
  const handleProfileSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateProfileForm()) return;
    
    setIsSaving(true);
    
    try {
      // Simulate API call with delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Would call updateProfile() with the new data
      // await updateProfile(profileForm);
      
      toast.success('Profile updated successfully!');
      setHasUnsavedChanges(false);
      setIsEditing(false);
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('Failed to update profile. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };
  
  const handleSecuritySubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateSecurityForm()) return;
    
    setIsSaving(true);
    
    try {
      // Simulate API call with delay
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Would call an API to update password
      
      toast.success('Password updated successfully!');
      setHasUnsavedChanges(false);
      setSecurityForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
    } catch (error) {
      console.error('Error updating password:', error);
      toast.error('Failed to update password. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };
  
  const handleDeleteAccount = async () => {
    setIsSaving(true);
    
    try {
      // Simulate API call with delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Would call an API to delete the account
      
      toast.success('Account deleted. We\'re sad to see you go!');
      logout();
    } catch (error) {
      console.error('Error deleting account:', error);
      toast.error('Failed to delete account. Please try again.');
    } finally {
      setIsSaving(false);
      setShowDeleteConfirm(false);
    }
  };
  
  const cancelChanges = () => {
    // Reset forms to original values
    if (user) {
      setProfileForm({
        displayName: user.displayName || '',
        username: user.username || '',
        email: user.email || '',
        statusMessage: user.statusMessage || '',
        avatar: user.avatar || null
      });
      
      setSecurityForm({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
    }
    
    setErrors({});
    setHasUnsavedChanges(false);
    setIsEditing(false);
  };

  // Continue with the JSX implementation in the next part
  return (
    <div className="space-y-8">
      {/* Section tabs */}
      <div className="flex border-b border-msn-gray-200 dark:border-msn-gray-700 overflow-x-auto">
        <button
          className={`px-4 py-2 font-medium text-sm border-b-2 mr-4 ${
            activeSection === 'profile'
              ? 'border-msn-blue text-msn-blue dark:text-msn-blue-light'
              : 'border-transparent text-msn-gray-600 dark:text-msn-gray-400 hover:text-msn-gray-800 dark:hover:text-msn-gray-200'
          }`}
          onClick={() => setActiveSection('profile')}
        >
          <User size={18} className="inline mr-2" />
          Profile
        </button>
        <button
          className={`px-4 py-2 font-medium text-sm border-b-2 mr-4 ${
            activeSection === 'security'
              ? 'border-msn-blue text-msn-blue dark:text-msn-blue-light'
              : 'border-transparent text-msn-gray-600 dark:text-msn-gray-400 hover:text-msn-gray-800 dark:hover:text-msn-gray-200'
          }`}
          onClick={() => setActiveSection('security')}
        >
          <Lock size={18} className="inline mr-2" />
          Security
        </button>
        <button
          className={`px-4 py-2 font-medium text-sm border-b-2 mr-4 ${
            activeSection === 'devices'
              ? 'border-msn-blue text-msn-blue dark:text-msn-blue-light'
              : 'border-transparent text-msn-gray-600 dark:text-msn-gray-400 hover:text-msn-gray-800 dark:hover:text-msn-gray-200'
          }`}
          onClick={() => setActiveSection('devices')}
        >
          <Smartphone size={18} className="inline mr-2" />
          Devices
        </button>
        <button
          className={`px-4 py-2 font-medium text-sm border-b-2 ${
            activeSection === 'danger'
              ? 'border-msn-red text-msn-red dark:text-msn-red-light'
              : 'border-transparent text-msn-gray-600 dark:text-msn-gray-400 hover:text-msn-red'
          }`}
          onClick={() => setActiveSection('danger')}
        >
          <AlertTriangle size={18} className="inline mr-2" />
          Danger Zone
        </button>
      </div>

      {/* Section content - will be expanded in the next parts */}
      <div className="mt-6">
        {activeSection === 'profile' && (
          <div>
            <h2 className="text-xl font-semibold mb-4">Profile Settings</h2>
            {/* Profile form will be added in the next part */}
          </div>
        )}

        {activeSection === 'security' && (
          <div>
            <h2 className="text-xl font-semibold mb-4">Security Settings</h2>
            {/* Security form will be added in the next part */}
          </div>
        )}

        {activeSection === 'devices' && (
          <div>
            <h2 className="text-xl font-semibold mb-4">Connected Devices</h2>
            {/* Devices list will be added in the next part */}
          </div>
        )}

        {activeSection === 'danger' && (
          <div>
            <h2 className="text-xl font-semibold text-msn-red mb-4">Danger Zone</h2>
            {/* Danger zone options will be added in the next part */}
          </div>
        )}
      </div>

      {/* Hidden file input for avatar upload */}
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        className="hidden"
        onChange={handleAvatarUpload}
      />
    </div>
  );
};

export default AccountSettings;
