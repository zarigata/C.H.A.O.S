// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▀█ █ █░█ ▄▀█ █▀▀ █▄█   █▀ █▀▀ ▀█▀ ▀█▀ █ █▄░█ █▀▀ █▀
 * █▀▀ █▀▄ █ ▀▄▀ █▀█ █▄▄ ░█░   ▄█ ██▄ ░█░ ░█░ █ █░▀█ █▄█ ▄█
 * 
 * [CODEX] Privacy Settings Component
 * 
 * This component allows users to control privacy aspects of the ChatEra
 * application, including visibility settings, data sharing, blocking,
 * and content controls.
 * 
 * Features:
 * - Online status visibility control
 * - Last seen and activity indicators
 * - Read receipts management
 * - Data sharing preferences
 * - Blocked contacts management
 * - Content moderation settings
 * - Cross-platform support (Windows/Linux)
 */

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Eye, 
  EyeOff,
  Users,
  Shield,
  Clock,
  Check,
  X,
  AlertCircle,
  Lock,
  User,
  UserPlus,
  UserX
} from 'lucide-react';
import { useTauri } from '@/lib/tauri';

interface PrivacySettingsProps {
  onSaveChanges: (hasChanges: boolean) => void;
}

/**
 * [H4X] PRIVACY SETTINGS COMPONENT
 * 
 * Component for customizing privacy and security settings
 */
const PrivacySettings: React.FC<PrivacySettingsProps> = ({ onSaveChanges }) => {
  const { isDesktop } = useTauri();
  
  // Form state
  const [settings, setSettings] = useState({
    visibility: {
      onlineStatus: 'all', // 'all', 'contacts', 'selected', 'none'
      lastSeen: 'contacts', // 'all', 'contacts', 'none'
      typingIndicator: true,
      readReceipts: true,
      activityStatus: true
    },
    dataSharing: {
      shareAnalytics: false,
      improveServices: true,
      storeMessages: true,
      messageRetention: '30days' // '7days', '30days', '90days', '1year', 'forever'
    },
    blockList: [] as string[],
    contentControl: {
      filterExplicitContent: true,
      allowMediaDownloads: 'all', // 'all', 'contacts', 'none'
      autoDownloadMedia: true,
      linkPreview: true
    },
    profilePrivacy: {
      whoCanSeeProfile: 'contacts', // 'all', 'contacts', 'selected', 'none'
      whoCanSendRequests: 'all', // 'all', 'contactsOfContacts', 'none'
      requireApproval: true
    }
  });
  
  // Track unsaved changes
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // Mock contacts for the UI (in a real app, these would come from an API)
  const [contacts, setContacts] = useState([
    { id: '1', name: 'Alice Smith', avatar: '/avatars/default-1.png', blocked: false },
    { id: '2', name: 'Bob Johnson', avatar: '/avatars/default-2.png', blocked: false },
    { id: '3', name: 'Carol Williams', avatar: '/avatars/default-3.png', blocked: true },
    { id: '4', name: 'Dave Brown', avatar: '/avatars/default-4.png', blocked: false }
  ]);
  
  // Initialize blockList from contacts
  useEffect(() => {
    const blockedIds = contacts
      .filter(contact => contact.blocked)
      .map(contact => contact.id);
    
    setSettings(prev => ({
      ...prev,
      blockList: blockedIds
    }));
  }, []);
  
  // Notify parent component about unsaved changes
  useEffect(() => {
    onSaveChanges(hasUnsavedChanges);
  }, [hasUnsavedChanges, onSaveChanges]);
  
  /**
   * [H4X] Form change handlers
   */
  const handleSettingChange = (
    key: string, 
    value: any
  ) => {
    // Handle nested settings
    const keys = key.split('.');
    
    if (keys.length === 1) {
      setSettings(prev => ({ ...prev, [key]: value }));
    } else if (keys.length === 2) {
      const [parent, child] = keys;
      setSettings(prev => ({
        ...prev,
        [parent]: {
          ...prev[parent as keyof typeof prev],
          [child]: value
        }
      }));
    }
    
    setHasUnsavedChanges(true);
  };
  
  /**
   * [H4X] Block/unblock contact handler
   */
  const toggleBlockContact = (contactId: string) => {
    // Update UI state
    setContacts(prevContacts => 
      prevContacts.map(contact => 
        contact.id === contactId 
          ? { ...contact, blocked: !contact.blocked } 
          : contact
      )
    );
    
    // Update settings
    if (settings.blockList.includes(contactId)) {
      // Unblock
      handleSettingChange('blockList', settings.blockList.filter(id => id !== contactId));
    } else {
      // Block
      handleSettingChange('blockList', [...settings.blockList, contactId]);
    }
  };
  
  return (
    <div className="space-y-8">
      <h2 className="text-xl font-semibold mb-4">Privacy Settings</h2>
      
      {/* Visibility Settings */}
      <div className="space-y-4">
        <h3 className="text-lg font-medium flex items-center">
          <Eye className="mr-2 h-5 w-5" /> 
          Visibility
        </h3>
        <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mb-4">
          Control who can see your online status and activity
        </p>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              Who can see my online status
            </label>
            <select
              value={settings.visibility.onlineStatus}
              onChange={(e) => handleSettingChange('visibility.onlineStatus', e.target.value)}
              className="w-full px-3 py-2 bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-msn-blue"
            >
              <option value="all">Everyone</option>
              <option value="contacts">My contacts only</option>
              <option value="selected">Selected contacts</option>
              <option value="none">Nobody</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">
              Who can see when I was last online
            </label>
            <select
              value={settings.visibility.lastSeen}
              onChange={(e) => handleSettingChange('visibility.lastSeen', e.target.value)}
              className="w-full px-3 py-2 bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-msn-blue"
            >
              <option value="all">Everyone</option>
              <option value="contacts">My contacts only</option>
              <option value="none">Nobody</option>
            </select>
          </div>
          
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">Show when I'm typing</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="typingIndicator"
                  id="typingIndicator"
                  checked={settings.visibility.typingIndicator}
                  onChange={() => handleSettingChange('visibility.typingIndicator', !settings.visibility.typingIndicator)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.visibility.typingIndicator
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">Send read receipts</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="readReceipts"
                  id="readReceipts"
                  checked={settings.visibility.readReceipts}
                  onChange={() => handleSettingChange('visibility.readReceipts', !settings.visibility.readReceipts)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.visibility.readReceipts
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
          
          <div className="flex items-center justify-between">
            <label className="flex items-center">
              <span className="mr-2">Show activity status</span>
              <div className="relative inline-block w-10 align-middle select-none">
                <input
                  type="checkbox"
                  name="activityStatus"
                  id="activityStatus"
                  checked={settings.visibility.activityStatus}
                  onChange={() => handleSettingChange('visibility.activityStatus', !settings.visibility.activityStatus)}
                  className="sr-only"
                />
                <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
                <div
                  className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                    settings.visibility.activityStatus
                      ? 'transform translate-x-4 bg-msn-blue'
                      : 'bg-white'
                  }`}
                ></div>
              </div>
            </label>
          </div>
        </div>
      </div>
      
      {/* Data Sharing Settings */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium flex items-center">
          <Shield className="mr-2 h-5 w-5" /> 
          Data & Sharing
        </h3>
        <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mb-4">
          Control how your data is used and stored
        </p>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Share analytics data</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Help us improve by sending anonymous usage data
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="shareAnalytics"
                id="shareAnalytics"
                checked={settings.dataSharing.shareAnalytics}
                onChange={() => handleSettingChange('dataSharing.shareAnalytics', !settings.dataSharing.shareAnalytics)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.dataSharing.shareAnalytics
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Contribute to service improvements</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Allow language processing to improve chat suggestions
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="improveServices"
                id="improveServices"
                checked={settings.dataSharing.improveServices}
                onChange={() => handleSettingChange('dataSharing.improveServices', !settings.dataSharing.improveServices)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.dataSharing.improveServices
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Store message history</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Save your conversations in the cloud
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="storeMessages"
                id="storeMessages"
                checked={settings.dataSharing.storeMessages}
                onChange={() => handleSettingChange('dataSharing.storeMessages', !settings.dataSharing.storeMessages)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.dataSharing.storeMessages
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
          
          {settings.dataSharing.storeMessages && (
            <div>
              <label className="block text-sm font-medium mb-2">
                Message retention period
              </label>
              <select
                value={settings.dataSharing.messageRetention}
                onChange={(e) => handleSettingChange('dataSharing.messageRetention', e.target.value)}
                className="w-full px-3 py-2 bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-msn-blue"
              >
                <option value="7days">7 days</option>
                <option value="30days">30 days</option>
                <option value="90days">90 days</option>
                <option value="1year">1 year</option>
                <option value="forever">Forever</option>
              </select>
            </div>
          )}
        </div>
      </div>
      
      {/* Blocked Contacts */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium flex items-center">
          <UserX className="mr-2 h-5 w-5" /> 
          Blocked Contacts
        </h3>
        <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mb-4">
          Manage users who cannot contact you
        </p>
        
        <div className="space-y-2">
          {contacts.map(contact => (
            <div 
              key={contact.id}
              className="flex items-center justify-between p-3 border border-msn-gray-200 dark:border-msn-gray-700 rounded-md"
            >
              <div className="flex items-center">
                <img 
                  src={contact.avatar} 
                  alt={contact.name}
                  className="w-8 h-8 rounded-full mr-3"
                />
                <span>{contact.name}</span>
              </div>
              
              <button
                type="button"
                className={`px-3 py-1.5 rounded-md text-xs flex items-center ${
                  contact.blocked
                    ? 'bg-msn-red text-white'
                    : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-800 dark:text-msn-gray-200'
                }`}
                onClick={() => toggleBlockContact(contact.id)}
              >
                {contact.blocked ? (
                  <>
                    <UserX size={14} className="mr-1.5" />
                    Blocked
                  </>
                ) : (
                  <>
                    <UserPlus size={14} className="mr-1.5" />
                    Unblocked
                  </>
                )}
              </button>
            </div>
          ))}
        </div>
      </div>
      
      {/* Content Controls */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium flex items-center">
          <Shield className="mr-2 h-5 w-5" /> 
          Content Controls
        </h3>
        <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mb-4">
          Manage content filtering and media settings
        </p>
        
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Filter explicit content</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Automatically detect and blur potentially inappropriate media
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="filterExplicitContent"
                id="filterExplicitContent"
                checked={settings.contentControl.filterExplicitContent}
                onChange={() => handleSettingChange('contentControl.filterExplicitContent', !settings.contentControl.filterExplicitContent)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.contentControl.filterExplicitContent
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">
              Allow media downloads from
            </label>
            <select
              value={settings.contentControl.allowMediaDownloads}
              onChange={(e) => handleSettingChange('contentControl.allowMediaDownloads', e.target.value)}
              className="w-full px-3 py-2 bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-msn-blue"
            >
              <option value="all">Everyone</option>
              <option value="contacts">My contacts only</option>
              <option value="none">Nobody</option>
            </select>
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Auto-download media</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Automatically download images and videos
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="autoDownloadMedia"
                id="autoDownloadMedia"
                checked={settings.contentControl.autoDownloadMedia}
                onChange={() => handleSettingChange('contentControl.autoDownloadMedia', !settings.contentControl.autoDownloadMedia)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.contentControl.autoDownloadMedia
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Generate link previews</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Show previews for shared URLs
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="linkPreview"
                id="linkPreview"
                checked={settings.contentControl.linkPreview}
                onChange={() => handleSettingChange('contentControl.linkPreview', !settings.contentControl.linkPreview)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.contentControl.linkPreview
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Profile Privacy */}
      <div className="pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 space-y-4">
        <h3 className="text-lg font-medium flex items-center">
          <User className="mr-2 h-5 w-5" /> 
          Profile Privacy
        </h3>
        <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mb-4">
          Control who can see your profile and send you requests
        </p>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-2">
              Who can see my profile
            </label>
            <select
              value={settings.profilePrivacy.whoCanSeeProfile}
              onChange={(e) => handleSettingChange('profilePrivacy.whoCanSeeProfile', e.target.value)}
              className="w-full px-3 py-2 bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-msn-blue"
            >
              <option value="all">Everyone</option>
              <option value="contacts">My contacts only</option>
              <option value="selected">Selected contacts</option>
              <option value="none">Nobody</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-2">
              Who can send me friend requests
            </label>
            <select
              value={settings.profilePrivacy.whoCanSendRequests}
              onChange={(e) => handleSettingChange('profilePrivacy.whoCanSendRequests', e.target.value)}
              className="w-full px-3 py-2 bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-msn-blue"
            >
              <option value="all">Everyone</option>
              <option value="contactsOfContacts">Friends of friends</option>
              <option value="none">Nobody</option>
            </select>
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <label className="flex items-center">
                <span className="font-medium">Require approval for new contacts</span>
              </label>
              <p className="text-sm text-msn-gray-600 dark:text-msn-gray-400 mt-1">
                Manually approve all friend requests
              </p>
            </div>
            
            <div className="relative inline-block w-10 align-middle select-none">
              <input
                type="checkbox"
                name="requireApproval"
                id="requireApproval"
                checked={settings.profilePrivacy.requireApproval}
                onChange={() => handleSettingChange('profilePrivacy.requireApproval', !settings.profilePrivacy.requireApproval)}
                className="sr-only"
              />
              <div className="block h-6 rounded-full bg-msn-gray-300 dark:bg-msn-gray-700 cursor-pointer"></div>
              <div
                className={`absolute left-0 top-0 mt-1 ml-1 h-4 w-4 rounded-full transition-transform duration-200 ease-in-out ${
                  settings.profilePrivacy.requireApproval
                    ? 'transform translate-x-4 bg-msn-blue'
                    : 'bg-white'
                }`}
              ></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PrivacySettings;
