// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ ▄▀█ █▀ █▀ █░█░█ █▀█ █▀█ █▀▄   █▀ ▀█▀ █▀█ █▀▀ █▄░█ █▀▀ ▀█▀ █░█   █▀▄▀█ █▀▀ ▀█▀ █▀▀ █▀█
 * █▀▀ █▀█ ▄█ ▄█ ▀▄▀▄▀ █▄█ █▀▄ █▄▀   ▄█ ░█░ █▀▄ ██▄ █░▀█ █▄█ ░█░ █▀█   █░▀░█ ██▄ ░█░ ██▄ █▀▄
 * 
 * [CODEX] Password Strength Meter Component
 * 
 * This component provides visual feedback on password strength
 * with animated bars and color-coded indicators inspired by
 * classic MSN password strength requirements.
 * 
 * Features:
 * - Real-time password strength calculation
 * - Color-coded strength indication
 * - Detailed requirement checking
 * - Responsive animation
 */

import React, { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import { Check, X } from 'lucide-react';

interface PasswordStrengthMeterProps {
  password: string;
  showDetails?: boolean;
}

interface PasswordRequirement {
  label: string;
  met: boolean;
}

/**
 * [H4X] PASSWORD STRENGTH CALCULATION
 * 
 * Evaluates password strength based on various criteria
 * and returns a score from 0-100
 */
const calculatePasswordStrength = (password: string): number => {
  if (!password) return 0;
  
  // Base score starts at 0
  let score = 0;
  
  // Length contribution (up to 30 points)
  const lengthScore = Math.min(30, password.length * 3);
  score += lengthScore;
  
  // Character variety contribution (up to 70 points)
  const hasLowercase = /[a-z]/.test(password);
  const hasUppercase = /[A-Z]/.test(password);
  const hasDigit = /\d/.test(password);
  const hasSpecial = /[^A-Za-z0-9]/.test(password);
  
  if (hasLowercase) score += 15;
  if (hasUppercase) score += 15;
  if (hasDigit) score += 20;
  if (hasSpecial) score += 20;
  
  // Penalize sequential or repeated patterns
  const sequentialLetters = /abc|bcd|cde|def|efg|fgh|ghi|hij|ijk|jkl|klm|lmn|mno|nop|opq|pqr|qrs|rst|stu|tuv|uvw|vwx|wxy|xyz/i;
  const sequentialNumbers = /012|123|234|345|456|567|678|789/;
  const repeatedChars = /(.)\1{2,}/;
  
  if (sequentialLetters.test(password)) score -= 10;
  if (sequentialNumbers.test(password)) score -= 10;
  if (repeatedChars.test(password)) score -= 10;
  
  // Ensure score is within 0-100 range
  return Math.max(0, Math.min(100, score));
};

/**
 * [H4X] PASSWORD REQUIREMENTS CHECK
 * 
 * Evaluates specific password requirements and returns
 * their status for detailed feedback
 */
const checkPasswordRequirements = (password: string): PasswordRequirement[] => {
  return [
    {
      label: 'At least 8 characters long',
      met: password.length >= 8
    },
    {
      label: 'Contains lowercase letters (a-z)',
      met: /[a-z]/.test(password)
    },
    {
      label: 'Contains uppercase letters (A-Z)',
      met: /[A-Z]/.test(password)
    },
    {
      label: 'Contains numbers (0-9)',
      met: /\d/.test(password)
    },
    {
      label: 'Contains special characters (e.g. !@#$%)',
      met: /[^A-Za-z0-9]/.test(password)
    }
  ];
};

/**
 * [H4X] STRENGTH LEVEL DETERMINATION
 * 
 * Maps numeric score to descriptive strength level
 */
const getStrengthLevel = (score: number): {
  label: string;
  color: string;
} => {
  if (score < 30) {
    return { label: 'Very Weak', color: 'bg-msn-red' };
  } else if (score < 50) {
    return { label: 'Weak', color: 'bg-msn-orange' };
  } else if (score < 70) {
    return { label: 'Moderate', color: 'bg-msn-yellow' };
  } else if (score < 90) {
    return { label: 'Strong', color: 'bg-msn-green' };
  } else {
    return { label: 'Very Strong', color: 'bg-msn-blue' };
  }
};

/**
 * [H4X] PASSWORD STRENGTH METER COMPONENT
 * 
 * Visual indicator of password security with optional details
 */
const PasswordStrengthMeter: React.FC<PasswordStrengthMeterProps> = ({
  password,
  showDetails = false
}) => {
  const [strength, setStrength] = useState(0);
  const [requirements, setRequirements] = useState<PasswordRequirement[]>([]);
  
  // Calculate strength whenever password changes
  useEffect(() => {
    setStrength(calculatePasswordStrength(password));
    setRequirements(checkPasswordRequirements(password));
  }, [password]);
  
  // Get the strength level details
  const strengthLevel = getStrengthLevel(strength);
  
  // Calculate how many segments to fill in the meter
  const segments = 5;
  const filledSegments = Math.round((strength / 100) * segments);
  
  return (
    <div className="w-full space-y-2">
      {/* Password strength label */}
      {password && (
        <div className="flex justify-between items-center text-xs mb-1">
          <span>Password Strength:</span>
          <span className={`font-medium ${
            strengthLevel.label === 'Very Weak' || strengthLevel.label === 'Weak'
              ? 'text-msn-red-500'
              : strengthLevel.label === 'Moderate'
              ? 'text-msn-yellow-500'
              : 'text-msn-green-600'
          }`}>
            {strengthLevel.label}
          </span>
        </div>
      )}
      
      {/* Strength meter segments */}
      <div className="flex gap-1 h-1.5">
        {[...Array(segments)].map((_, i) => (
          <motion.div
            key={i}
            className={`h-full flex-1 rounded-full ${
              i < filledSegments ? strengthLevel.color : 'bg-msn-gray-200 dark:bg-msn-gray-700'
            }`}
            initial={{ opacity: 0, scaleX: 0 }}
            animate={{ 
              opacity: password ? 1 : 0.5,
              scaleX: password ? 1 : 0.3
            }}
            transition={{
              duration: 0.3,
              delay: i * 0.05
            }}
          />
        ))}
      </div>
      
      {/* Detailed requirements list */}
      {showDetails && password && (
        <motion.div
          className="mt-3 text-xs space-y-1.5"
          initial={{ opacity: 0, height: 0 }}
          animate={{ 
            opacity: password ? 1 : 0,
            height: password ? 'auto' : 0
          }}
          transition={{ duration: 0.3 }}
        >
          {requirements.map((req, index) => (
            <div key={index} className="flex items-center gap-2">
              {req.met ? (
                <Check className="h-3.5 w-3.5 text-msn-green" />
              ) : (
                <X className="h-3.5 w-3.5 text-msn-red" />
              )}
              <span className={req.met ? 'text-msn-gray-600 dark:text-msn-gray-400' : 'text-msn-gray-500 dark:text-msn-gray-500'}>
                {req.label}
              </span>
            </div>
          ))}
        </motion.div>
      )}
    </div>
  );
};

export default PasswordStrengthMeter;
