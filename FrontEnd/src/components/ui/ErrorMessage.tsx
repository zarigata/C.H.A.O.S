// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▀ █▀█ █▀█ █▀█ █▀█   █▀▄▀█ █▀▀ █▀ █▀ ▄▀█ █▀▀ █▀▀
 * ██▄ █▀▄ █▀▄ █▄█ █▀▄   █░▀░█ ██▄ ▄█ ▄█ █▀█ █▄█ ██▄
 * 
 * [CODEX] Error Message Component
 * 
 * This component provides consistent error message styling throughout
 * the application, with animation and appropriate semantic markup
 * for accessibility.
 * 
 * Features:
 * - Attention-grabbing animation for new errors
 * - Icon and color coding for different error types
 * - Responsive design fits any container
 * - Accessible error presentation
 */

import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AlertCircle, AlertTriangle, Info, X } from 'lucide-react';

interface ErrorMessageProps {
  message: string | null | undefined;
  type?: 'error' | 'warning' | 'info';
  className?: string;
  dismissable?: boolean;
  onDismiss?: () => void;
}

/**
 * [H4X] ERROR MESSAGE COMPONENT
 * 
 * Displays form errors and validation messages consistently
 */
const ErrorMessage: React.FC<ErrorMessageProps> = ({
  message,
  type = 'error',
  className = '',
  dismissable = false,
  onDismiss
}) => {
  // Don't render anything if no message
  if (!message) return null;
  
  // Define styling based on message type
  const typeStyles = {
    error: {
      bg: 'bg-msn-red-50 dark:bg-msn-red-950/30',
      border: 'border-msn-red-200 dark:border-msn-red-900',
      text: 'text-msn-red-700 dark:text-msn-red-300',
      icon: <AlertCircle className="h-4 w-4 text-msn-red-400 dark:text-msn-red-500" />
    },
    warning: {
      bg: 'bg-msn-yellow-50 dark:bg-msn-yellow-950/30',
      border: 'border-msn-yellow-200 dark:border-msn-yellow-900',
      text: 'text-msn-yellow-700 dark:text-msn-yellow-300',
      icon: <AlertTriangle className="h-4 w-4 text-msn-yellow-500" />
    },
    info: {
      bg: 'bg-msn-blue-50 dark:bg-msn-blue-950/30',
      border: 'border-msn-blue-200 dark:border-msn-blue-900',
      text: 'text-msn-blue-700 dark:text-msn-blue-300',
      icon: <Info className="h-4 w-4 text-msn-blue-500" />
    }
  };
  
  const styles = typeStyles[type];
  
  // Animation variants
  const errorVariants = {
    initial: { 
      opacity: 0,
      y: -5,
      scale: 0.95
    },
    animate: { 
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        duration: 0.2,
        ease: 'easeOut'
      }
    },
    exit: { 
      opacity: 0,
      scale: 0.95,
      transition: {
        duration: 0.1
      }
    }
  };
  
  return (
    <AnimatePresence mode="wait">
      <motion.div
        key={message}
        variants={errorVariants}
        initial="initial"
        animate="animate"
        exit="exit"
        className={`
          flex items-start gap-2 px-3 py-2 rounded-md text-sm
          ${styles.bg} ${styles.border} ${styles.text} border
          ${className}
        `}
        role="alert"
      >
        <div className="flex-shrink-0 mt-0.5">
          {styles.icon}
        </div>
        
        <div className="flex-1">
          {message}
        </div>
        
        {dismissable && onDismiss && (
          <button 
            onClick={onDismiss}
            className="flex-shrink-0 ml-2 text-msn-gray-500 hover:text-msn-gray-700 dark:text-msn-gray-400 dark:hover:text-msn-gray-300"
            aria-label="Dismiss error message"
          >
            <X className="h-4 w-4" />
          </button>
        )}
      </motion.div>
    </AnimatePresence>
  );
};

export default ErrorMessage;
