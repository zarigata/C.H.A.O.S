// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▀█ █▀█ █▀▀ █ █░░ █▀▀   █▀ █▀▀ ▀█▀ █░█ █▀█
 * █▀▀ █▀▄ █▄█ █▀  █ █▄▄ ██▄   ▄█ ██▄ ░█░ █▄█ █▀▀
 * 
 * [CODEX] Profile Setup Step
 * 
 * This component allows new users to personalize their profile
 * with an avatar, display name, and status message during onboarding.
 * 
 * Features:
 * - Avatar selection and upload
 * - Display name customization
 * - Status message setting
 * - Cross-platform compatibility (web/desktop)
 */

import React, { useState, useRef, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Camera, Upload, X, User, Check } from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useTauri } from '@/lib/tauri';

interface ProfileSetupStepProps {
  onComplete: (data: ProfileData) => void;
  onSkip?: () => void;
  isOptional?: boolean;
}

export interface ProfileData {
  displayName: string;
  statusMessage: string;
  avatar?: File | string | null;
}

/**
 * [H4X] DEFAULT AVATARS
 * 
 * Built-in avatar options to choose from
 */
const DEFAULT_AVATARS = [
  '/avatars/default-1.png',
  '/avatars/default-2.png',
  '/avatars/default-3.png',
  '/avatars/default-4.png',
  '/avatars/default-5.png',
  '/avatars/default-6.png',
];

/**
 * [H4X] PROFILE SETUP COMPONENT
 * 
 * Handles user profile personalization during onboarding
 */
const ProfileSetupStep: React.FC<ProfileSetupStepProps> = ({
  onComplete,
  onSkip,
  isOptional = false
}) => {
  const { user, updateProfile } = useAuth();
  const { isDesktop } = useTauri();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Form state
  const [displayName, setDisplayName] = useState(user?.displayName || '');
  const [statusMessage, setStatusMessage] = useState(user?.statusMessage || '');
  const [avatarPreview, setAvatarPreview] = useState<string | null>(user?.avatar || null);
  const [avatarFile, setAvatarFile] = useState<File | null>(null);
  const [selectedDefaultAvatar, setSelectedDefaultAvatar] = useState<string | null>(null);
  const [showDefaultAvatars, setShowDefaultAvatars] = useState(false);
  
  // Validation state
  const [displayNameError, setDisplayNameError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Clear errors when inputs change
  useEffect(() => {
    if (displayName) setDisplayNameError(null);
  }, [displayName]);
  
  /**
   * [H4X] FILE SELECTION HANDLERS
   * 
   * Manage avatar upload and selection with cross-platform support
   */
  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file.');
      return;
    }
    
    // Create preview URL
    const previewUrl = URL.createObjectURL(file);
    setAvatarPreview(previewUrl);
    setAvatarFile(file);
    setSelectedDefaultAvatar(null);
    setShowDefaultAvatars(false);
  };
  
  // Platform-specific file selection
  const selectFile = async () => {
    if (isDesktop) {
      try {
        // For Tauri desktop app
        const { open } = await import('@tauri-apps/api/dialog');
        const { convertFileSrc } = await import('@tauri-apps/api/tauri');
        
        const selected = await open({
          multiple: false,
          filters: [{ name: 'Images', extensions: ['png', 'jpeg', 'jpg'] }]
        });
        
        if (selected && !Array.isArray(selected)) {
          // This is a simplification - in a real app you'd need to handle the file
          const fileName = selected.split('\\').pop() || selected;
          
          // Set the preview using Tauri's convertFileSrc
          setAvatarPreview(convertFileSrc(selected));
          
          // We'd need to convert this to a File object somehow for API upload
          // For this demo, we'll just store the path
          setSelectedDefaultAvatar(null);
          setShowDefaultAvatars(false);
        }
      } catch (err) {
        console.error('Error selecting file:', err);
      }
    } else {
      // Web browser - trigger the file input
      fileInputRef.current?.click();
    }
  };
  
  // Select a default avatar
  const selectDefaultAvatar = (avatarPath: string) => {
    setAvatarPreview(avatarPath);
    setSelectedDefaultAvatar(avatarPath);
    setAvatarFile(null);
  };
  
  // Clear avatar selection
  const clearAvatar = () => {
    if (avatarPreview) URL.revokeObjectURL(avatarPreview);
    setAvatarPreview(null);
    setAvatarFile(null);
    setSelectedDefaultAvatar(null);
  };
  
  /**
   * [H4X] FORM VALIDATION
   * 
   * Validate form inputs before submission
   */
  const validateForm = (): boolean => {
    let isValid = true;
    
    if (!displayName.trim()) {
      setDisplayNameError('Display name is required');
      isValid = false;
    } else if (displayName.length < 2) {
      setDisplayNameError('Display name must be at least 2 characters');
      isValid = false;
    }
    
    return isValid;
  };
  
  /**
   * [H4X] FORM SUBMISSION
   * 
   * Process and submit profile data
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    try {
      // In a real app, this would be an API call to update the profile
      // await updateProfile({
      //   displayName,
      //   statusMessage,
      //   avatar: avatarFile || selectedDefaultAvatar
      // });
      
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Return the profile data to the parent component
      onComplete({
        displayName,
        statusMessage,
        avatar: avatarFile || selectedDefaultAvatar
      });
    } catch (err) {
      console.error('Error updating profile:', err);
    } finally {
      setIsSubmitting(false);
    }
  };
  
  return (
    <div className="h-full flex flex-col">
      <form onSubmit={handleSubmit} className="space-y-6 flex-1">
        {/* MSN-style intro */}
        <div className="bg-gradient-to-r from-msn-blue-light to-msn-blue-lighter dark:from-msn-blue-dark dark:to-msn-blue p-4 rounded-lg text-msn-blue-dark dark:text-white mb-6">
          <h3 className="font-semibold mb-2">Personalize Your Profile</h3>
          <p className="text-sm">
            Let other users know who you are with a custom display name, status message, and avatar.
          </p>
        </div>
        
        {/* Avatar Selection */}
        <div className="flex flex-col items-center mb-6">
          <div className="relative mb-3">
            {avatarPreview ? (
              <div className="relative">
                <img 
                  src={avatarPreview} 
                  alt="Avatar preview" 
                  className="h-24 w-24 rounded-full object-cover border-4 border-msn-blue"
                />
                <button 
                  type="button"
                  onClick={clearAvatar}
                  className="absolute -top-2 -right-2 p-1 bg-msn-gray-200 dark:bg-msn-gray-700 rounded-full text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-300 dark:hover:bg-msn-gray-600"
                >
                  <X size={16} />
                </button>
              </div>
            ) : (
              <div className="h-24 w-24 rounded-full bg-msn-gray-200 dark:bg-msn-gray-700 flex items-center justify-center">
                <User size={40} className="text-msn-gray-400" />
              </div>
            )}
          </div>
          
          <div className="flex flex-wrap gap-2 justify-center">
            {/* Upload Button */}
            <button
              type="button"
              onClick={selectFile}
              className="px-3 py-1.5 text-sm rounded-md bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600 flex items-center"
            >
              <Upload size={16} className="mr-1" />
              Upload
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                className="hidden"
                onChange={handleFileSelect}
              />
            </button>
            
            {/* Camera Button (for desktop) */}
            {isDesktop && (
              <button
                type="button"
                onClick={selectFile}
                className="px-3 py-1.5 text-sm rounded-md bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600 flex items-center"
              >
                <Camera size={16} className="mr-1" />
                Camera
              </button>
            )}
            
            {/* Default Avatars Button */}
            <button
              type="button"
              onClick={() => setShowDefaultAvatars(!showDefaultAvatars)}
              className="px-3 py-1.5 text-sm rounded-md bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
            >
              {showDefaultAvatars ? 'Hide Options' : 'Choose Avatar'}
            </button>
          </div>
          
          {/* Default Avatars Grid */}
          {showDefaultAvatars && (
            <motion.div 
              className="grid grid-cols-3 gap-3 mt-4"
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
            >
              {DEFAULT_AVATARS.map((avatar, index) => (
                <button
                  key={index}
                  type="button"
                  onClick={() => selectDefaultAvatar(avatar)}
                  className={`
                    w-16 h-16 rounded-full overflow-hidden
                    ${selectedDefaultAvatar === avatar ? 'ring-2 ring-offset-2 ring-msn-blue' : ''}
                  `}
                >
                  <img 
                    src={avatar} 
                    alt={`Avatar option ${index + 1}`} 
                    className="w-full h-full object-cover"
                  />
                </button>
              ))}
            </motion.div>
          )}
        </div>
        
        {/* Display Name Field */}
        <div>
          <label htmlFor="displayName" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
            Display Name <span className="text-msn-red">*</span>
          </label>
          <input
            id="displayName"
            type="text"
            value={displayName}
            onChange={(e) => setDisplayName(e.target.value)}
            className={`
              w-full px-3 py-2 rounded-md 
              bg-white dark:bg-msn-gray-700 
              border ${displayNameError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
              focus:outline-none focus:ring-2 focus:ring-msn-blue
            `}
            placeholder="How you want to be known"
            maxLength={30}
          />
          {displayNameError && (
            <p className="mt-1 text-sm text-msn-red">{displayNameError}</p>
          )}
          <p className="mt-1 text-xs text-msn-gray-500 dark:text-msn-gray-400">
            This is the name that will be shown to others
          </p>
        </div>
        
        {/* Status Message Field */}
        <div>
          <label htmlFor="statusMessage" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
            Status Message
          </label>
          <input
            id="statusMessage"
            type="text"
            value={statusMessage}
            onChange={(e) => setStatusMessage(e.target.value)}
            className="w-full px-3 py-2 rounded-md bg-white dark:bg-msn-gray-700 border border-msn-gray-300 dark:border-msn-gray-600 focus:outline-none focus:ring-2 focus:ring-msn-blue"
            placeholder="What's on your mind? (optional)"
            maxLength={50}
          />
          <p className="mt-1 text-xs text-msn-gray-500 dark:text-msn-gray-400">
            A short message that appears with your name
          </p>
        </div>
        
        {/* Submit button rendered by the stepper */}
        <div className="flex justify-center mt-6">
          <button
            type="submit"
            disabled={isSubmitting}
            className="hidden" // Hidden because the stepper handles the next/submit button
          >
            {isSubmitting ? 'Saving...' : 'Save Profile'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProfileSetupStep;
