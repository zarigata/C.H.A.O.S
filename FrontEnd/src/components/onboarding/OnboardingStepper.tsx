// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▄░█ █▄▄ █▀█ ▄▀█ █▀█ █▀▄ █ █▄░█ █▀▀   █▀ ▀█▀ █▀▀ █▀█ █▀█ █▀▀ █▀█
 * █▄█ █░▀█ █▄█ █▄█ █▀█ █▀▄ █▄▀ █ █░▀█ █▄█   ▄█ ░█░ ██▄ █▀▀ █▀▀ ██▄ █▀▄
 * 
 * [CODEX] Onboarding Stepper Component
 * 
 * This component guides users through the onboarding process with
 * a step-by-step wizard interface styled like a classic MSN setup wizard.
 * 
 * Features:
 * - Animated step transitions
 * - Progress tracking and indication
 * - Navigation between steps
 * - Step completion validation
 * - Cross-platform compatibility (web/desktop)
 */

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Check, ChevronRight, ChevronLeft, Loader2 } from 'lucide-react';
import { useTauri } from '@/lib/tauri';

export interface Step {
  id: string;
  title: string;
  component: React.ReactNode;
  optional?: boolean;
  completed?: boolean;
}

interface OnboardingStepperProps {
  steps: Step[];
  onComplete: () => void;
  onUpdateStep: (stepId: string, data: any) => void;
}

/**
 * [H4X] ONBOARDING STEPPER WIZARD
 * 
 * Multi-step user onboarding flow with animated transitions
 */
const OnboardingStepper: React.FC<OnboardingStepperProps> = ({
  steps,
  onComplete,
  onUpdateStep
}) => {
  const { isDesktop } = useTauri();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [stepsState, setStepsState] = useState<Step[]>(steps);
  const [loading, setLoading] = useState(false);
  const [direction, setDirection] = useState<'right' | 'left'>('right');
  
  // Get current step
  const currentStep = stepsState[currentStepIndex];
  
  // Calculate progress percentage
  const progress = ((currentStepIndex + 1) / steps.length) * 100;
  
  // Navigation handlers
  const goToNextStep = () => {
    if (currentStepIndex < stepsState.length - 1) {
      setDirection('right');
      setCurrentStepIndex(prevIndex => prevIndex + 1);
    } else {
      // Handle completion
      completeOnboarding();
    }
  };
  
  const goToPrevStep = () => {
    if (currentStepIndex > 0) {
      setDirection('left');
      setCurrentStepIndex(prevIndex => prevIndex - 1);
    }
  };
  
  // Handle step completion
  const handleStepComplete = (stepId: string, data: any, isCompleted: boolean = true) => {
    // Update step state
    setStepsState(prevSteps =>
      prevSteps.map(step =>
        step.id === stepId ? { ...step, completed: isCompleted } : step
      )
    );
    
    // Send data to parent
    onUpdateStep(stepId, data);
    
    // Navigate to next step on completion
    if (isCompleted) {
      goToNextStep();
    }
  };
  
  // Handle entire onboarding completion
  const completeOnboarding = async () => {
    setLoading(true);
    
    try {
      // Final completion logic
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulated delay
      onComplete();
    } catch (error) {
      console.error('Error completing onboarding:', error);
    } finally {
      setLoading(false);
    }
  };
  
  // Animation variants
  const slideVariants = {
    enter: (direction: 'left' | 'right') => ({
      x: direction === 'right' ? 300 : -300,
      opacity: 0
    }),
    center: {
      x: 0,
      opacity: 1
    },
    exit: (direction: 'left' | 'right') => ({
      x: direction === 'right' ? -300 : 300,
      opacity: 0
    })
  };
  
  // Determine if can proceed to next step
  const canProceed = currentStep.optional || currentStep.completed;
  
  // Determine if on final step
  const isLastStep = currentStepIndex === stepsState.length - 1;
  
  return (
    <div className="flex flex-col h-full">
      {/* Header with progress */}
      <div className="mb-6">
        <div className="flex justify-between items-center mb-2">
          <h2 className="text-lg font-semibold">
            {currentStep.title}
          </h2>
          <div className="text-sm text-msn-gray-500">
            Step {currentStepIndex + 1} of {steps.length}
          </div>
        </div>
        
        <div className="h-2 bg-msn-gray-200 dark:bg-msn-gray-700 rounded-full overflow-hidden">
          <motion.div 
            className="h-full bg-msn-blue"
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.3 }}
          />
        </div>
      </div>
      
      {/* Step content with animation */}
      <div className="flex-1 overflow-hidden">
        <AnimatePresence initial={false} custom={direction} mode="wait">
          <motion.div
            key={currentStep.id}
            custom={direction}
            variants={slideVariants}
            initial="enter"
            animate="center"
            exit="exit"
            transition={{ type: 'tween', duration: 0.3 }}
            className="h-full"
          >
            {/* Inject the step component with necessary props */}
            {React.cloneElement(currentStep.component as React.ReactElement, {
              onComplete: (data: any) => handleStepComplete(currentStep.id, data, true),
              onSkip: () => handleStepComplete(currentStep.id, null, false),
              isOptional: currentStep.optional,
            })}
          </motion.div>
        </AnimatePresence>
      </div>
      
      {/* Navigation buttons */}
      <div className="flex justify-between items-center mt-6 pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700">
        {/* Back button */}
        <button
          onClick={goToPrevStep}
          disabled={currentStepIndex === 0}
          className={`
            flex items-center px-4 py-2 rounded-md
            ${currentStepIndex === 0
              ? 'text-msn-gray-400 cursor-not-allowed'
              : 'text-msn-gray-600 dark:text-msn-gray-300 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700'}
          `}
        >
          <ChevronLeft size={16} className="mr-1" />
          Back
        </button>
        
        {/* Next/Finish button */}
        <button
          onClick={goToNextStep}
          disabled={!canProceed || loading}
          className={`
            flex items-center px-4 py-2 rounded-md
            ${!canProceed || loading
              ? 'bg-msn-gray-300 dark:bg-msn-gray-700 text-msn-gray-500 cursor-not-allowed'
              : 'bg-msn-blue hover:bg-msn-blue-dark text-white'}
          `}
        >
          {loading ? (
            <>
              <Loader2 size={16} className="mr-1 animate-spin" />
              Processing...
            </>
          ) : isLastStep ? (
            <>
              <Check size={16} className="mr-1" />
              Finish
            </>
          ) : (
            <>
              Next
              <ChevronRight size={16} className="ml-1" />
            </>
          )}
        </button>
      </div>
      
      {/* Skip link for optional steps */}
      {currentStep.optional && !currentStep.completed && (
        <div className="mt-2 text-center">
          <button 
            onClick={() => handleStepComplete(currentStep.id, null, false)}
            className="text-sm text-msn-blue hover:underline"
          >
            Skip this step
          </button>
        </div>
      )}
      
      {/* Platform-specific footer */}
      {isDesktop && (
        <div className="mt-6 pt-4 border-t border-msn-gray-200 dark:border-msn-gray-700 text-xs text-center text-msn-gray-500">
          ChatEra Desktop Setup Wizard • {isLastStep ? 'Almost done!' : 'Setting up your experience...'}
        </div>
      )}
    </div>
  );
};

export default OnboardingStepper;
