// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▀█ █▀▀ █▀▀ █▀▀ █▀█ █▀▀ █▄░█ █▀▀ █▀▀ █▀   █▀ █▀▀ ▀█▀ █░█ █▀█
 * █▀▀ █▀▄ ██▄ █▀  ██▄ █▀▄ ██▄ █░▀█ █▄▄ ██▄ ▄█   ▄█ ██▄ ░█░ █▄█ █▀▀
 * 
 * [CODEX] Preferences Setup Step
 * 
 * This component allows users to configure application preferences
 * during the onboarding process, including notifications, theme,
 * and startup options.
 * 
 * Features:
 * - Theme selection (light/dark/system)
 * - Notification preferences
 * - Startup behavior configuration
 * - Sound settings
 * - Cross-platform settings differentiation
 */

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { 
  Bell, 
  Moon, 
  Sun, 
  Monitor, 
  Power, 
  Volume2, 
  VolumeX,
  Eye,
  Clock,
  Check
} from 'lucide-react';
import { useTauri } from '@/lib/tauri';

interface PreferencesSetupStepProps {
  onComplete: (data: PreferencesData) => void;
  onSkip?: () => void;
  isOptional?: boolean;
}

export interface PreferencesData {
  theme: 'light' | 'dark' | 'system';
  notifications: boolean;
  notificationSound: boolean;
  startupLaunch: boolean;
  statusOnStartup: 'online' | 'away' | 'busy' | 'invisible' | 'last';
  showTypingIndicators: boolean;
}

/**
 * [H4X] PREFERENCES SETUP COMPONENT
 * 
 * Handles user preferences configuration during onboarding
 */
const PreferencesSetupStep: React.FC<PreferencesSetupStepProps> = ({
  onComplete,
  onSkip,
  isOptional = true
}) => {
  const { isDesktop } = useTauri();
  
  // Form state with defaults
  const [preferences, setPreferences] = useState<PreferencesData>({
    theme: 'system',
    notifications: true,
    notificationSound: true,
    startupLaunch: false,
    statusOnStartup: 'last',
    showTypingIndicators: true
  });
  
  // Handle preference changes
  const handleChange = (key: keyof PreferencesData, value: any) => {
    setPreferences(prev => ({
      ...prev,
      [key]: value
    }));
  };
  
  // Theme option animation variant
  const themeOptionVariants = {
    inactive: { scale: 0.95, opacity: 0.7 },
    active: { scale: 1, opacity: 1 }
  };
  
  // Submit preferences
  const handleSubmit = () => {
    onComplete(preferences);
  };
  
  return (
    <div className="h-full">
      {/* MSN-style intro */}
      <div className="bg-gradient-to-r from-msn-purple-light to-msn-purple-lighter dark:from-msn-purple-dark dark:to-msn-purple p-4 rounded-lg text-msn-purple-dark dark:text-white mb-6">
        <h3 className="font-semibold mb-2">Your ChatEra Experience</h3>
        <p className="text-sm">
          Customize how ChatEra works for you. You can always change these settings later.
        </p>
      </div>
      
      {/* Preferences sections */}
      <div className="space-y-8">
        {/* Theme Selection */}
        <section>
          <h4 className="text-sm font-semibold text-msn-gray-700 dark:text-msn-gray-300 mb-3">
            Appearance
          </h4>
          
          <div className="flex justify-between space-x-3">
            <motion.button
              type="button"
              className={`
                flex-1 p-3 rounded-lg border flex flex-col items-center
                ${preferences.theme === 'light'
                  ? 'bg-white border-msn-blue shadow'
                  : 'bg-msn-gray-50 dark:bg-msn-gray-800 border-msn-gray-200 dark:border-msn-gray-700'}
              `}
              variants={themeOptionVariants}
              animate={preferences.theme === 'light' ? 'active' : 'inactive'}
              onClick={() => handleChange('theme', 'light')}
            >
              <Sun 
                size={24} 
                className={preferences.theme === 'light' ? 'text-msn-blue' : 'text-msn-gray-500'} 
              />
              <span className="mt-2 text-sm">Light</span>
              {preferences.theme === 'light' && (
                <div className="mt-2 text-msn-blue">
                  <Check size={16} />
                </div>
              )}
            </motion.button>
            
            <motion.button
              type="button"
              className={`
                flex-1 p-3 rounded-lg border flex flex-col items-center
                ${preferences.theme === 'dark'
                  ? 'bg-msn-gray-900 border-msn-blue shadow'
                  : 'bg-msn-gray-50 dark:bg-msn-gray-800 border-msn-gray-200 dark:border-msn-gray-700'}
              `}
              variants={themeOptionVariants}
              animate={preferences.theme === 'dark' ? 'active' : 'inactive'}
              onClick={() => handleChange('theme', 'dark')}
            >
              <Moon 
                size={24} 
                className={preferences.theme === 'dark' ? 'text-msn-blue' : 'text-msn-gray-500'} 
              />
              <span className="mt-2 text-sm">Dark</span>
              {preferences.theme === 'dark' && (
                <div className="mt-2 text-msn-blue">
                  <Check size={16} />
                </div>
              )}
            </motion.button>
            
            <motion.button
              type="button"
              className={`
                flex-1 p-3 rounded-lg border flex flex-col items-center
                ${preferences.theme === 'system'
                  ? 'bg-gradient-to-r from-white to-msn-gray-900 border-msn-blue shadow'
                  : 'bg-msn-gray-50 dark:bg-msn-gray-800 border-msn-gray-200 dark:border-msn-gray-700'}
              `}
              variants={themeOptionVariants}
              animate={preferences.theme === 'system' ? 'active' : 'inactive'}
              onClick={() => handleChange('theme', 'system')}
            >
              <Monitor 
                size={24} 
                className={preferences.theme === 'system' ? 'text-msn-blue' : 'text-msn-gray-500'} 
              />
              <span className="mt-2 text-sm">System</span>
              {preferences.theme === 'system' && (
                <div className="mt-2 text-msn-blue">
                  <Check size={16} />
                </div>
              )}
            </motion.button>
          </div>
        </section>
        
        {/* Notification Settings */}
        <section>
          <h4 className="text-sm font-semibold text-msn-gray-700 dark:text-msn-gray-300 mb-3">
            Notifications
          </h4>
          
          <div className="space-y-3">
            <div className="flex items-center justify-between p-3 bg-msn-gray-50 dark:bg-msn-gray-800 rounded-lg">
              <div className="flex items-center">
                <Bell size={18} className="text-msn-gray-500 mr-3" />
                <span>Enable notifications</span>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  className="sr-only peer"
                  checked={preferences.notifications}
                  onChange={(e) => handleChange('notifications', e.target.checked)}
                />
                <div className="w-11 h-6 bg-msn-gray-200 peer-focus:outline-none rounded-full peer dark:bg-msn-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-msn-blue"></div>
              </label>
            </div>
            
            <div className={`flex items-center justify-between p-3 bg-msn-gray-50 dark:bg-msn-gray-800 rounded-lg ${!preferences.notifications ? 'opacity-50' : ''}`}>
              <div className="flex items-center">
                {preferences.notificationSound ? (
                  <Volume2 size={18} className="text-msn-gray-500 mr-3" />
                ) : (
                  <VolumeX size={18} className="text-msn-gray-500 mr-3" />
                )}
                <span>Notification sounds</span>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  className="sr-only peer"
                  checked={preferences.notificationSound}
                  onChange={(e) => handleChange('notificationSound', e.target.checked)}
                  disabled={!preferences.notifications}
                />
                <div className="w-11 h-6 bg-msn-gray-200 peer-focus:outline-none rounded-full peer dark:bg-msn-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-msn-blue"></div>
              </label>
            </div>
          </div>
        </section>
        
        {/* Desktop-only settings */}
        {isDesktop && (
          <section>
            <h4 className="text-sm font-semibold text-msn-gray-700 dark:text-msn-gray-300 mb-3">
              Desktop Settings
            </h4>
            
            <div className="space-y-3">
              <div className="flex items-center justify-between p-3 bg-msn-gray-50 dark:bg-msn-gray-800 rounded-lg">
                <div className="flex items-center">
                  <Power size={18} className="text-msn-gray-500 mr-3" />
                  <span>Launch at startup</span>
                </div>
                <label className="relative inline-flex items-center cursor-pointer">
                  <input
                    type="checkbox"
                    className="sr-only peer"
                    checked={preferences.startupLaunch}
                    onChange={(e) => handleChange('startupLaunch', e.target.checked)}
                  />
                  <div className="w-11 h-6 bg-msn-gray-200 peer-focus:outline-none rounded-full peer dark:bg-msn-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-msn-blue"></div>
                </label>
              </div>
            </div>
          </section>
        )}
        
        {/* Status and Privacy */}
        <section>
          <h4 className="text-sm font-semibold text-msn-gray-700 dark:text-msn-gray-300 mb-3">
            Status & Privacy
          </h4>
          
          <div className="space-y-3">
            <div className="p-3 bg-msn-gray-50 dark:bg-msn-gray-800 rounded-lg">
              <div className="flex items-center justify-between mb-2">
                <div className="flex items-center">
                  <Clock size={18} className="text-msn-gray-500 mr-3" />
                  <span>Status on startup</span>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-2 mt-2">
                <button
                  type="button"
                  onClick={() => handleChange('statusOnStartup', 'online')}
                  className={`
                    px-3 py-1.5 text-sm rounded
                    ${preferences.statusOnStartup === 'online'
                      ? 'bg-msn-green text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300'}
                  `}
                >
                  Online
                </button>
                
                <button
                  type="button"
                  onClick={() => handleChange('statusOnStartup', 'invisible')}
                  className={`
                    px-3 py-1.5 text-sm rounded
                    ${preferences.statusOnStartup === 'invisible'
                      ? 'bg-msn-gray-500 text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300'}
                  `}
                >
                  Invisible
                </button>
                
                <button
                  type="button"
                  onClick={() => handleChange('statusOnStartup', 'away')}
                  className={`
                    px-3 py-1.5 text-sm rounded
                    ${preferences.statusOnStartup === 'away'
                      ? 'bg-msn-yellow text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300'}
                  `}
                >
                  Away
                </button>
                
                <button
                  type="button"
                  onClick={() => handleChange('statusOnStartup', 'last')}
                  className={`
                    px-3 py-1.5 text-sm rounded
                    ${preferences.statusOnStartup === 'last'
                      ? 'bg-msn-blue text-white'
                      : 'bg-msn-gray-100 dark:bg-msn-gray-700 text-msn-gray-700 dark:text-msn-gray-300'}
                  `}
                >
                  Remember Last
                </button>
              </div>
            </div>
            
            <div className="flex items-center justify-between p-3 bg-msn-gray-50 dark:bg-msn-gray-800 rounded-lg">
              <div className="flex items-center">
                <Eye size={18} className="text-msn-gray-500 mr-3" />
                <span>Show typing indicators</span>
              </div>
              <label className="relative inline-flex items-center cursor-pointer">
                <input
                  type="checkbox"
                  className="sr-only peer"
                  checked={preferences.showTypingIndicators}
                  onChange={(e) => handleChange('showTypingIndicators', e.target.checked)}
                />
                <div className="w-11 h-6 bg-msn-gray-200 peer-focus:outline-none rounded-full peer dark:bg-msn-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-msn-blue"></div>
              </label>
            </div>
          </div>
        </section>
      </div>
      
      {/* Hidden submit button (handled by stepper) */}
      <button 
        className="hidden"
        onClick={handleSubmit}
      >
        Save Preferences
      </button>
    </div>
  );
};

export default PreferencesSetupStep;
