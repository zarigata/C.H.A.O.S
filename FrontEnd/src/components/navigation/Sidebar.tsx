// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▀▀ ▀█▀ █▀█ █▄░█ ▄▀█ █░█ █ █▀▀ ▄▀█ ▀█▀ █ █▀█ █▄░█
 * █▀▄ ██▄ ░█░ █▀▄ █░▀█ █▀█ ▀▄▀ █ █▄█ █▀█ ░█░ █ █▄█ █░▀█
 * 
 * [CODEX] Sidebar Navigation Component
 * 
 * This component provides the primary navigation for the ChatEra app,
 * displaying the user's contacts, servers, and recent conversations.
 * 
 * Features:
 * - Collapsible sidebar with toggle control
 * - Segmented navigation between contacts, groups, and servers
 * - Online status indicators for contacts
 * - Unread message indicators
 * - Contextual menu for contacts/conversations
 * - Search functionality
 */

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { motion } from 'framer-motion';
import { 
  ChevronLeft, 
  ChevronRight,
  Users,
  MessagesSquare,
  Hash,
  Search,
  Plus,
  MoreVertical,
  Phone,
  Video
} from 'lucide-react';
import { useSocket } from '@/lib/socket';

interface SidebarProps {
  collapsed: boolean;
  onToggle: () => void;
}

// Mock data for development
const MOCK_CONTACTS = [
  { 
    id: '1', 
    username: 'sarah_connor', 
    displayName: 'Sarah Connor', 
    status: 'online', 
    statusMessage: '👋 No fate but what we make', 
    avatar: '/avatars/sarah.jpg',
    unread: 3
  },
  { 
    id: '2', 
    username: 'john_smith', 
    displayName: 'John Smith', 
    status: 'away', 
    statusMessage: '🎮 Gaming - Do not disturb', 
    avatar: '/avatars/john.jpg',
    unread: 0
  },
  { 
    id: '3', 
    username: 'morpheus', 
    displayName: 'Morpheus', 
    status: 'offline', 
    statusMessage: 'Free your mind', 
    avatar: '/avatars/morpheus.jpg',
    unread: 0
  },
  { 
    id: '4', 
    username: 'trinity', 
    displayName: 'Trinity', 
    status: 'online', 
    statusMessage: 'Follow the white rabbit', 
    avatar: '/avatars/trinity.jpg',
    unread: 1
  }
];

const MOCK_GROUPS = [
  { 
    id: 'g1', 
    name: 'Project Skynet', 
    avatar: '/groups/skynet.jpg',
    unread: 5,
    members: 8
  },
  { 
    id: 'g2', 
    name: 'Gaming Squad', 
    avatar: '/groups/gaming.jpg',
    unread: 0,
    members: 6
  }
];

const MOCK_SERVERS = [
  { 
    id: 's1', 
    name: 'Zion Community', 
    icon: '/servers/zion.jpg',
    unread: 0,
  },
  { 
    id: 's2', 
    name: 'Resistance HQ', 
    icon: '/servers/resistance.jpg',
    unread: 2,
  }
];

/**
 * [H4X] STATUS COLOR MAPPER
 * 
 * Maps user status values to their corresponding CSS color classes
 */
const getStatusColorClass = (status: string): string => {
  switch (status) {
    case 'online':
      return 'bg-msn-green';
    case 'away':
      return 'bg-msn-orange';
    case 'busy':
      return 'bg-msn-red';
    case 'invisible':
    case 'offline':
    default:
      return 'bg-msn-gray-400';
  }
};

/**
 * [H4X] MAIN SIDEBAR COMPONENT
 * 
 * Provides navigation and access to communication channels
 */
const Sidebar: React.FC<SidebarProps> = ({ collapsed, onToggle }) => {
  const router = useRouter();
  const { isConnected } = useSocket();
  const [activeTab, setActiveTab] = useState<'contacts' | 'groups' | 'servers'>('contacts');
  const [searchQuery, setSearchQuery] = useState('');
  
  /**
   * [H4X] SEARCH FILTER
   * 
   * Filters contacts/groups/servers based on search input
   */
  const filteredContacts = MOCK_CONTACTS.filter(contact =>
    contact.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||
    contact.username.toLowerCase().includes(searchQuery.toLowerCase()) ||
    contact.statusMessage.toLowerCase().includes(searchQuery.toLowerCase())
  );
  
  const filteredGroups = MOCK_GROUPS.filter(group =>
    group.name.toLowerCase().includes(searchQuery.toLowerCase())
  );
  
  const filteredServers = MOCK_SERVERS.filter(server =>
    server.name.toLowerCase().includes(searchQuery.toLowerCase())
  );
  
  /**
   * [H4X] NAVIGATION HANDLERS
   * 
   * Handle navigation to different screens/conversations
   */
  const navigateToContact = (id: string) => {
    router.push(`/messages/${id}`);
  };
  
  const navigateToGroup = (id: string) => {
    router.push(`/groups/${id}`);
  };
  
  const navigateToServer = (id: string) => {
    router.push(`/servers/${id}`);
  };
  
  const createNewChat = () => {
    router.push('/messages/new');
  };
  
  return (
    <div className="h-full flex flex-col">
      {/* [H4X] SIDEBAR HEADER & TOGGLE */}
      <div className="p-3 flex items-center justify-between border-b border-msn-gray-200 dark:border-msn-gray-700">
        <div className="flex items-center">
          {!collapsed && (
            <h2 className="text-lg font-semibold">
              {activeTab === 'contacts' ? 'Contacts' : 
               activeTab === 'groups' ? 'Groups' : 'Servers'}
            </h2>
          )}
        </div>
        
        <button
          onClick={onToggle}
          className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700"
          title={collapsed ? 'Expand sidebar' : 'Collapse sidebar'}
        >
          {collapsed ? <ChevronRight size={18} /> : <ChevronLeft size={18} />}
        </button>
      </div>
      
      {/* [H4X] SEARCH BAR */}
      <div className="p-3 border-b border-msn-gray-200 dark:border-msn-gray-700">
        <div className="relative">
          <input
            type="text"
            placeholder={collapsed ? '' : 'Search'}
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={`
              bg-msn-gray-100 dark:bg-msn-gray-700 
              rounded-full px-3 py-1.5 w-full
              focus:outline-none focus:ring-2 focus:ring-msn-blue
              transition-all
              ${collapsed ? 'pl-8 pr-2' : 'pl-8 pr-3'}
            `}
          />
          <Search 
            size={16} 
            className="absolute left-3 top-1/2 transform -translate-y-1/2 text-msn-gray-400" 
          />
        </div>
      </div>
      
      {/* [H4X] NAVIGATION TABS */}
      {!collapsed && (
        <div className="flex border-b border-msn-gray-200 dark:border-msn-gray-700">
          <button
            onClick={() => setActiveTab('contacts')}
            className={`
              flex-1 py-2 flex items-center justify-center
              ${activeTab === 'contacts' 
                ? 'text-msn-blue border-b-2 border-msn-blue' 
                : 'text-msn-gray-500 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700'}
            `}
          >
            <Users size={18} />
            <span className="ml-1 text-sm">Contacts</span>
          </button>
          
          <button
            onClick={() => setActiveTab('groups')}
            className={`
              flex-1 py-2 flex items-center justify-center
              ${activeTab === 'groups' 
                ? 'text-msn-blue border-b-2 border-msn-blue' 
                : 'text-msn-gray-500 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700'}
            `}
          >
            <MessagesSquare size={18} />
            <span className="ml-1 text-sm">Groups</span>
          </button>
          
          <button
            onClick={() => setActiveTab('servers')}
            className={`
              flex-1 py-2 flex items-center justify-center
              ${activeTab === 'servers' 
                ? 'text-msn-blue border-b-2 border-msn-blue' 
                : 'text-msn-gray-500 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700'}
            `}
          >
            <Hash size={18} />
            <span className="ml-1 text-sm">Servers</span>
          </button>
        </div>
      )}
      
      {/* [H4X] CONTENT DISPLAY AREA - SCROLLABLE */}
      <div className="flex-1 overflow-y-auto custom-scrollbar">
        {/* Display content based on active tab */}
        {activeTab === 'contacts' && (
          <div className="py-2">
            {filteredContacts.length === 0 ? (
              <div className="text-center p-4 text-msn-gray-500 text-sm">
                {searchQuery ? 'No contacts found' : 'Your contacts list is empty'}
              </div>
            ) : (
              filteredContacts.map(contact => (
                <div
                  key={contact.id}
                  onClick={() => navigateToContact(contact.id)}
                  className={`
                    flex items-center ${collapsed ? 'justify-center' : 'justify-between'}
                    px-3 py-2 cursor-pointer
                    hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700
                    ${router.query.id === contact.id ? 'bg-msn-gray-200 dark:bg-msn-gray-700' : ''}
                  `}
                >
                  <div className="flex items-center">
                    {/* Avatar with status indicator */}
                    <div className="relative">
                      <img
                        src={contact.avatar || '/default-avatar.png'}
                        alt={contact.displayName}
                        className="h-10 w-10 rounded-full object-cover"
                      />
                      <span
                        className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-msn-gray-800 ${getStatusColorClass(contact.status)}`}
                      />
                    </div>
                    
                    {/* Contact info */}
                    {!collapsed && (
                      <div className="ml-3 overflow-hidden">
                        <div className="flex items-center">
                          <p className="font-medium truncate">{contact.displayName}</p>
                          {contact.unread > 0 && (
                            <span className="ml-2 bg-msn-red text-white text-xs rounded-full px-1.5 min-w-[20px] text-center">
                              {contact.unread}
                            </span>
                          )}
                        </div>
                        <p className="text-xs text-msn-gray-500 truncate">{contact.statusMessage}</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Action buttons */}
                  {!collapsed && (
                    <div className="flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity">
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          router.push(`/call/${contact.id}`);
                        }}
                        className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                        title="Voice call"
                      >
                        <Phone size={16} />
                      </button>
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          router.push(`/video/${contact.id}`);
                        }}
                        className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                        title="Video call"
                      >
                        <Video size={16} />
                      </button>
                      <button 
                        onClick={(e) => e.stopPropagation()}
                        className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                        title="More options"
                      >
                        <MoreVertical size={16} />
                      </button>
                    </div>
                  )}
                </div>
              ))
            )}
          </div>
        )}
        
        {activeTab === 'groups' && (
          <div className="py-2">
            {filteredGroups.length === 0 ? (
              <div className="text-center p-4 text-msn-gray-500 text-sm">
                {searchQuery ? 'No groups found' : 'Your groups list is empty'}
              </div>
            ) : (
              filteredGroups.map(group => (
                <div
                  key={group.id}
                  onClick={() => navigateToGroup(group.id)}
                  className={`
                    flex items-center ${collapsed ? 'justify-center' : 'justify-between'}
                    px-3 py-2 cursor-pointer
                    hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700
                    ${router.query.id === group.id ? 'bg-msn-gray-200 dark:bg-msn-gray-700' : ''}
                  `}
                >
                  <div className="flex items-center">
                    {/* Group avatar */}
                    <div className="relative">
                      <img
                        src={group.avatar || '/default-group.png'}
                        alt={group.name}
                        className="h-10 w-10 rounded-full object-cover"
                      />
                    </div>
                    
                    {/* Group info */}
                    {!collapsed && (
                      <div className="ml-3 overflow-hidden">
                        <div className="flex items-center">
                          <p className="font-medium truncate">{group.name}</p>
                          {group.unread > 0 && (
                            <span className="ml-2 bg-msn-red text-white text-xs rounded-full px-1.5 min-w-[20px] text-center">
                              {group.unread}
                            </span>
                          )}
                        </div>
                        <p className="text-xs text-msn-gray-500 truncate">{group.members} members</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Action buttons */}
                  {!collapsed && (
                    <button 
                      onClick={(e) => e.stopPropagation()}
                      className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                      title="More options"
                    >
                      <MoreVertical size={16} />
                    </button>
                  )}
                </div>
              ))
            )}
          </div>
        )}
        
        {activeTab === 'servers' && (
          <div className="py-2">
            {filteredServers.length === 0 ? (
              <div className="text-center p-4 text-msn-gray-500 text-sm">
                {searchQuery ? 'No servers found' : 'Your servers list is empty'}
              </div>
            ) : (
              filteredServers.map(server => (
                <div
                  key={server.id}
                  onClick={() => navigateToServer(server.id)}
                  className={`
                    flex items-center ${collapsed ? 'justify-center' : 'justify-between'}
                    px-3 py-2 cursor-pointer
                    hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700
                    ${router.query.id === server.id ? 'bg-msn-gray-200 dark:bg-msn-gray-700' : ''}
                  `}
                >
                  <div className="flex items-center">
                    {/* Server icon */}
                    <div className="relative">
                      <img
                        src={server.icon || '/default-server.png'}
                        alt={server.name}
                        className="h-10 w-10 rounded-md object-cover"
                      />
                      {server.unread > 0 && (
                        <span className="absolute -top-1 -right-1 bg-msn-red text-white text-xs rounded-full px-1.5 min-w-[20px] text-center">
                          {server.unread}
                        </span>
                      )}
                    </div>
                    
                    {/* Server info */}
                    {!collapsed && (
                      <div className="ml-3">
                        <p className="font-medium">{server.name}</p>
                      </div>
                    )}
                  </div>
                  
                  {/* Action buttons */}
                  {!collapsed && (
                    <button 
                      onClick={(e) => e.stopPropagation()}
                      className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                      title="More options"
                    >
                      <MoreVertical size={16} />
                    </button>
                  )}
                </div>
              ))
            )}
          </div>
        )}
      </div>
      
      {/* [H4X] ADD NEW BUTTON */}
      <div className="p-3 border-t border-msn-gray-200 dark:border-msn-gray-700">
        <button 
          onClick={createNewChat}
          className={`
            w-full rounded-full py-2 px-3
            bg-msn-blue hover:bg-msn-blue-dark text-white
            transition-colors flex items-center justify-center
          `}
        >
          <Plus size={18} />
          {!collapsed && <span className="ml-1">New Chat</span>}
        </button>
      </div>
    </div>
  );
};

export default Sidebar;
