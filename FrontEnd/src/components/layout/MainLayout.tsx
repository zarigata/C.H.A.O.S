// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▄▀█ ▄▀█ █ █▄░█   █░░ ▄▀█ █▄█ █▀█ █░█ ▀█▀
 * █░▀░█ █▀█ █ █░▀█   █▄▄ █▀█ ░█░ █▄█ █▄█ ░█░
 * 
 * [CODEX] Main Application Layout
 * 
 * This component provides the primary layout structure for the ChatEra
 * application, inspired by classic MSN Messenger but with modern UX patterns.
 * 
 * Features:
 * - Responsive sidebar with contacts/servers list
 * - Persistent header with user presence controls
 * - Desktop app-specific window controls when running in Tauri
 * - Theming support (light/dark mode)
 * - Offline status indicators
 */

import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { motion } from 'framer-motion';
import { useTheme } from 'next-themes';
import { 
  Sun, 
  Moon,
  Users,
  Settings,
  Bell,
  X,
  Minus,
  Square,
  LogOut,
  Wifi,
  WifiOff
} from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useTauri } from '@/lib/tauri';
import { useSocket } from '@/lib/socket';
import { useNetworkStatus } from '@/hooks/useNetworkStatus';
import Sidebar from '@/components/navigation/Sidebar';
import StatusSelector from '@/components/user/StatusSelector';

interface MainLayoutProps {
  children: React.ReactNode;
  title?: string;
}

/**
 * [H4X] MAIN APPLICATION LAYOUT
 *
 * Top-level layout component that wraps the entire application UI
 * and provides consistent navigation, theming, and structure.
 */
const MainLayout: React.FC<MainLayoutProps> = ({ 
  children,
  title = 'ChatEra' 
}) => {
  const { theme, setTheme } = useTheme();
  const { user, logout } = useAuth();
  const { isDesktop } = useTauri();
  const { isConnected } = useSocket();
  const isOnline = useNetworkStatus();
  const router = useRouter();
  
  // Sidebar state
  const [sidebarOpen, setSidebarOpen] = useState(true);
  
  /**
   * [H4X] PLATFORM-ADAPTIVE WINDOW CONTROLS
   * 
   * This function handles window control operations with platform-specific
   * implementations for both Windows and Linux via Tauri's API
   */
  const handleWindowControls = async (action: 'minimize' | 'maximize' | 'close') => {
    if (!isDesktop) return;
    
    try {
      const { appWindow } = await import('@tauri-apps/api/window');
      
      switch (action) {
        case 'minimize':
          appWindow.minimize();
          break;
        case 'maximize':
          const isMaximized = await appWindow.isMaximized();
          isMaximized ? appWindow.unmaximize() : appWindow.maximize();
          break;
        case 'close':
          appWindow.close();
          break;
      }
    } catch (error) {
      console.error('[WINDOW] Error handling window controls:', error);
    }
  };
  
  // Toggle sidebar visibility
  const toggleSidebar = () => {
    setSidebarOpen(prev => !prev);
  };
  
  // Toggle theme
  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };
  
  /**
   * [H4X] CONNECTION STATUS CALCULATOR
   * 
   * Computes the current connection state based on both network and socket status
   * to provide accurate feedback to the user about their connectivity
   */
  const connectionStatus = !isOnline 
    ? 'offline' 
    : isConnected 
      ? 'connected' 
      : 'connecting';
  
  return (
    <div className="flex flex-col h-screen bg-msn-gray-100 dark:bg-msn-gray-900 text-msn-gray-800 dark:text-white">
      <Head>
        <title>{title}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      
      {/* [H4X] WINDOW TITLE BAR (Desktop Only) */}
      {isDesktop && (
        <div 
          className="msn-window-header h-8 flex items-center justify-between"
          data-tauri-drag-region
        >
          <div className="flex items-center gap-2">
            <img src="/logo.png" alt="ChatEra" className="h-5 w-5" />
            <span className="text-sm font-medium">{title}</span>
          </div>
          
          <div className="flex items-center">
            <button 
              onClick={() => handleWindowControls('minimize')}
              className="p-1 hover:bg-white/10 rounded"
            >
              <Minus size={14} />
            </button>
            <button 
              onClick={() => handleWindowControls('maximize')}
              className="p-1 hover:bg-white/10 rounded"
            >
              <Square size={14} />
            </button>
            <button 
              onClick={() => handleWindowControls('close')}
              className="p-1 hover:bg-red-500 rounded"
            >
              <X size={14} />
            </button>
          </div>
        </div>
      )}
      
      {/* [H4X] MAIN HEADER & NAVIGATION */}
      <header className="h-16 flex items-center justify-between px-4 bg-white dark:bg-msn-gray-800 shadow-sm z-10">
        <div className="flex items-center gap-3">
          {/* App Logo */}
          <div className="flex items-center gap-2">
            <img 
              src="/logo.png" 
              alt="ChatEra" 
              className="h-8 w-8"
            />
            <h1 className="text-xl font-bold hidden md:block">ChatEra</h1>
          </div>
          
          {/* Network Status Indicator */}
          <div className="hidden md:flex items-center text-xs gap-1 px-2 py-1 rounded-full bg-msn-gray-100 dark:bg-msn-gray-700">
            {connectionStatus === 'connected' ? (
              <>
                <Wifi size={12} className="text-msn-green" />
                <span>Connected</span>
              </>
            ) : connectionStatus === 'connecting' ? (
              <>
                <Wifi size={12} className="text-msn-orange animate-pulse" />
                <span>Connecting...</span>
              </>
            ) : (
              <>
                <WifiOff size={12} className="text-msn-red" />
                <span>Offline</span>
              </>
            )}
          </div>
        </div>
        
        {/* User Controls */}
        <div className="flex items-center gap-2">
          {/* Theme Toggle */}
          <button 
            onClick={toggleTheme}
            className="p-2 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700"
            title={theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'}
          >
            {theme === 'dark' ? <Sun size={20} /> : <Moon size={20} />}
          </button>
          
          {/* Notifications */}
          <button 
            className="p-2 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700"
            title="Notifications"
          >
            <Bell size={20} />
          </button>
          
          {/* Settings */}
          <button 
            onClick={() => router.push('/settings')}
            className="p-2 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700"
            title="Settings"
          >
            <Settings size={20} />
          </button>
          
          {/* Status Selector */}
          {user && <StatusSelector />}
          
          {/* User Avatar */}
          {user && (
            <div className="flex items-center ml-2">
              <div className="relative">
                <img 
                  src={user.avatar || '/default-avatar.png'} 
                  alt={user.displayName} 
                  className="h-8 w-8 rounded-full object-cover border-2 border-white dark:border-msn-gray-800"
                />
              </div>
              <div className="ml-2 hidden md:block">
                <p className="text-sm font-medium">{user.displayName}</p>
                <p className="text-xs text-msn-gray-500">@{user.username}</p>
              </div>
            </div>
          )}
          
          {/* Logout Button */}
          <button 
            onClick={logout}
            className="p-2 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700 ml-1"
            title="Log out"
          >
            <LogOut size={20} />
          </button>
        </div>
      </header>
      
      {/* [H4X] MAIN CONTENT AREA WITH SIDEBAR */}
      <div className="flex flex-1 overflow-hidden">
        {/* Sidebar with Contacts/Servers */}
        <motion.div 
          className="bg-white dark:bg-msn-gray-800 border-r border-msn-gray-200 dark:border-msn-gray-700 z-10"
          initial={{ width: sidebarOpen ? 280 : 70 }}
          animate={{ width: sidebarOpen ? 280 : 70 }}
          transition={{ duration: 0.2 }}
        >
          <Sidebar collapsed={!sidebarOpen} onToggle={toggleSidebar} />
        </motion.div>
        
        {/* Main Content */}
        <main className="flex-1 overflow-auto bg-msn-gray-100 dark:bg-msn-gray-900">
          {children}
        </main>
      </div>
      
      {/* [H4X] CONNECTION STATUS BAR */}
      {!isOnline && (
        <div className="bg-msn-red text-white text-center py-1 text-sm animate-pulse">
          You are currently offline. Reconnecting...
        </div>
      )}
    </div>
  );
};

export default MainLayout;
