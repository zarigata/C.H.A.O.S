// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀ ▀█▀ ▄▀█ ▀█▀ █░█ █▀   █▀ █▀▀ █░░ █▀▀ █▀▀ ▀█▀ █▀█ █▀█
 * ▄█ ░█░ █▀█ ░█░ █▄█ ▄█   ▄█ ██▄ █▄▄ ██▄ █▄▄ ░█░ █▄█ █▀▄
 * 
 * [CODEX] User Status Selector Component
 * 
 * This component provides a dropdown to select the user's online presence status.
 * It mimics the classic MSN Messenger status options with modern UX improvements.
 * 
 * Features:
 * - Visual indicators for each status type
 * - Custom status message support
 * - Real-time status updates via the socket connection
 * - Status change animations
 * - Cross-platform compatibility (desktop/web)
 */

import React, { useState, useRef, useEffect } from 'react';
import * as DropdownMenu from '@radix-ui/react-dropdown-menu';
import { AnimatePresence, motion } from 'framer-motion';
import { ChevronDown, Check, Edit2, X } from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useSocket } from '@/lib/socket';
import { useTauri } from '@/lib/tauri';
import { useOnClickOutside } from '@/hooks/useOnClickOutside';

/**
 * [H4X] USER STATUS OPTIONS
 * 
 * Defines available presence states with metadata for UI and backend
 */
const STATUS_OPTIONS = [
  {
    id: 'online',
    label: 'Online',
    color: 'bg-msn-green',
    icon: '●',
    description: 'Available to chat'
  },
  {
    id: 'away',
    label: 'Away',
    color: 'bg-msn-orange',
    icon: '◐',
    description: 'Temporarily away'
  },
  {
    id: 'busy',
    label: 'Busy',
    color: 'bg-msn-red',
    icon: '⊘',
    description: 'Do not disturb'
  },
  {
    id: 'appear_offline',
    label: 'Appear Offline',
    color: 'bg-msn-gray-400',
    icon: '○',
    description: 'Invisible to others'
  }
];

/**
 * [H4X] CROSS-PLATFORM STATUS SELECTOR
 * 
 * Provides UI for selecting and broadcasting user presence status
 */
const StatusSelector: React.FC = () => {
  const { user, updateUserStatus } = useAuth();
  const { emit } = useSocket();
  const { isDesktop } = useTauri();
  const [open, setOpen] = useState(false);
  const [currentStatus, setCurrentStatus] = useState<string>(user?.status || 'online');
  const [statusMessage, setStatusMessage] = useState<string>(user?.statusMessage || '');
  const [editingMessage, setEditingMessage] = useState(false);
  const messageInputRef = useRef<HTMLInputElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  // Close dropdown when clicking outside
  useOnClickOutside(dropdownRef, () => {
    setOpen(false);
    setEditingMessage(false);
  });

  // Focus input when editing message
  useEffect(() => {
    if (editingMessage && messageInputRef.current) {
      messageInputRef.current.focus();
    }
  }, [editingMessage]);

  /**
   * [H4X] STATUS CHANGE HANDLER
   * 
   * Updates local state and broadcasts to server
   */
  const handleStatusChange = (statusId: string) => {
    setCurrentStatus(statusId);
    setOpen(false);
    
    // Update backend and notify contacts via socket
    updateUserStatus(statusId);
    emit('presence:update', { status: statusId });
    
    // Set default status message for auto-away on desktop
    if (isDesktop && statusId === 'away' && !statusMessage) {
      const defaultMessage = '🔍 Away from keyboard';
      setStatusMessage(defaultMessage);
      handleStatusMessageChange(defaultMessage);
    }
  };

  /**
   * [H4X] STATUS MESSAGE UPDATER
   * 
   * Broadcasts custom status message to server
   */
  const handleStatusMessageChange = (message: string) => {
    setStatusMessage(message);
    
    // Update backend
    updateUserStatus(currentStatus, message);
    
    // Broadcast to contacts
    emit('presence:update', { 
      status: currentStatus, 
      statusMessage: message 
    });
    
    setEditingMessage(false);
  };

  // Find current status object
  const currentStatusObj = STATUS_OPTIONS.find(s => s.id === currentStatus) || STATUS_OPTIONS[0];

  return (
    <div className="relative" ref={dropdownRef}>
      <DropdownMenu.Root open={open} onOpenChange={setOpen}>
        <DropdownMenu.Trigger asChild>
          <button 
            className="flex items-center p-2 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700 transition-colors"
            aria-label="Select status"
          >
            <span className={`h-3 w-3 rounded-full ${currentStatusObj.color}`} />
            <ChevronDown size={14} className="ml-1 text-msn-gray-500" />
          </button>
        </DropdownMenu.Trigger>

        <DropdownMenu.Portal>
          <DropdownMenu.Content
            className="bg-white dark:bg-msn-gray-800 rounded-md shadow-md border border-msn-gray-200 dark:border-msn-gray-700 p-1 w-52 z-50"
            sideOffset={5}
            align="center"
          >
            <motion.div
              initial={{ opacity: 0, y: -5 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -5 }}
              transition={{ duration: 0.15 }}
            >
              {/* [H4X] STATUS OPTIONS */}
              <div className="py-1">
                {STATUS_OPTIONS.map((status) => (
                  <DropdownMenu.Item
                    key={status.id}
                    className="flex items-center px-3 py-2 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700 rounded-sm cursor-pointer outline-none"
                    onSelect={() => handleStatusChange(status.id)}
                  >
                    <div className="flex items-center flex-1">
                      <span className={`h-3 w-3 rounded-full ${status.color}`} />
                      <span className="ml-2 text-sm">{status.label}</span>
                    </div>
                    {currentStatus === status.id && (
                      <Check size={14} className="text-msn-blue" />
                    )}
                  </DropdownMenu.Item>
                ))}
              </div>

              <div className="border-t border-msn-gray-200 dark:border-msn-gray-700 my-1" />

              {/* [H4X] STATUS MESSAGE EDITOR */}
              <div className="px-3 py-2">
                {editingMessage ? (
                  <div className="flex items-center">
                    <input
                      ref={messageInputRef}
                      type="text"
                      value={statusMessage}
                      onChange={(e) => setStatusMessage(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          handleStatusMessageChange(statusMessage);
                        } else if (e.key === 'Escape') {
                          setEditingMessage(false);
                        }
                      }}
                      className="flex-1 px-2 py-1 text-sm bg-msn-gray-100 dark:bg-msn-gray-700 rounded-sm border-none focus:outline-none focus:ring-1 focus:ring-msn-blue"
                      placeholder="What's on your mind?"
                      maxLength={50}
                    />
                    <button
                      onClick={() => handleStatusMessageChange(statusMessage)}
                      className="ml-1 p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                    >
                      <Check size={14} className="text-msn-green" />
                    </button>
                    <button
                      onClick={() => setEditingMessage(false)}
                      className="ml-1 p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                    >
                      <X size={14} className="text-msn-red" />
                    </button>
                  </div>
                ) : (
                  <div 
                    className="flex items-center cursor-pointer hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700 rounded-sm p-1"
                    onClick={() => setEditingMessage(true)}
                  >
                    <span className="text-xs text-msn-gray-500 flex-1 truncate">
                      {statusMessage || "Set a status message..."}
                    </span>
                    <Edit2 size={12} className="text-msn-gray-400 ml-1" />
                  </div>
                )}
              </div>
            </motion.div>
          </DropdownMenu.Content>
        </DropdownMenu.Portal>
      </DropdownMenu.Root>
    </div>
  );
};

export default StatusSelector;
