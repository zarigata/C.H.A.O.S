// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▀▀ █▀▀ █ █▀ ▀█▀ █▀▀ █▀█   █▀▀ █▀█ █▀█ █▀▄▀█
 * █▀▄ ██▄ █▄█ █ ▄█ ░█░ ██▄ █▀▄   █▀  █▄█ █▀▄ █░▀░█
 * 
 * [CODEX] Registration Form Component
 * 
 * This component handles new user registration with comprehensive
 * form validation, security checks, and guided user onboarding.
 * 
 * Features:
 * - Multi-step validation with password strength meter
 * - Username availability checking
 * - Email verification initiation
 * - Cross-platform compatible for web and desktop
 * - Security compliance tips and notifications
 */

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { 
  Eye, 
  EyeOff, 
  UserPlus, 
  AlertCircle, 
  Check, 
  X,
  Info,
  Shield
} from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useTauri } from '@/lib/tauri';

interface RegisterFormProps {
  onRegistrationSuccess?: () => void;
}

/**
 * [H4X] USER REGISTRATION FORM
 *
 * Comprehensive form for new account creation with validation
 */
const RegisterForm: React.FC<RegisterFormProps> = ({ 
  onRegistrationSuccess 
}) => {
  const router = useRouter();
  const { register, status, error: authError } = useAuth();
  const { isDesktop } = useTauri();
  
  // Form state
  const [displayName, setDisplayName] = useState('');
  const [email, setEmail] = useState('');
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Validation state
  const [displayNameError, setDisplayNameError] = useState<string | null>(null);
  const [emailError, setEmailError] = useState<string | null>(null);
  const [usernameError, setUsernameError] = useState<string | null>(null);
  const [passwordError, setPasswordError] = useState<string | null>(null);
  const [confirmPasswordError, setConfirmPasswordError] = useState<string | null>(null);
  const [termsError, setTermsError] = useState<string | null>(null);
  
  // Username check state
  const [isCheckingUsername, setIsCheckingUsername] = useState(false);
  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);
  const usernameCheckTimeoutRef = React.useRef<NodeJS.Timeout | null>(null);
  
  // Password strength state
  const [passwordStrength, setPasswordStrength] = useState<
    'weak' | 'medium' | 'strong' | 'very-strong' | null
  >(null);
  
  // Clear errors when inputs change
  useEffect(() => {
    if (displayName) setDisplayNameError(null);
    if (email) setEmailError(null);
    if (username) setUsernameError(null);
    if (password) setPasswordError(null);
    if (confirmPassword) setConfirmPasswordError(null);
    if (agreedToTerms) setTermsError(null);
    if (displayName || email || username || password || confirmPassword) setError(null);
  }, [displayName, email, username, password, confirmPassword, agreedToTerms]);
  
  // If already authenticated, redirect
  useEffect(() => {
    if (status === 'authenticated') {
      if (onRegistrationSuccess) {
        onRegistrationSuccess();
      } else {
        router.push('/onboarding');
      }
    }
  }, [status, router, onRegistrationSuccess]);
  
  // Set error from auth provider
  useEffect(() => {
    if (authError) {
      setError(authError);
      setLoading(false);
    }
  }, [authError]);
  
  /**
   * [H4X] USERNAME AVAILABILITY CHECKER
   * 
   * Checks if the username is available with debouncing
   */
  useEffect(() => {
    // Clear any existing timeout
    if (usernameCheckTimeoutRef.current) {
      clearTimeout(usernameCheckTimeoutRef.current);
    }
    
    // Reset state when username changes
    setUsernameAvailable(null);
    
    // Skip empty usernames
    if (!username || username.length < 3) return;
    
    // Set a timeout to check username availability
    setIsCheckingUsername(true);
    usernameCheckTimeoutRef.current = setTimeout(async () => {
      try {
        // In a real app, this would call your API
        // const response = await api.checkUsernameAvailability(username);
        
        // Mock API call - randomize for demo
        const mockResponse = { available: Math.random() > 0.3 };
        setUsernameAvailable(mockResponse.available);
      } catch (err) {
        console.error('Error checking username:', err);
        setUsernameAvailable(null);
      } finally {
        setIsCheckingUsername(false);
      }
    }, 600);
    
    // Cleanup
    return () => {
      if (usernameCheckTimeoutRef.current) {
        clearTimeout(usernameCheckTimeoutRef.current);
      }
    };
  }, [username]);
  
  /**
   * [H4X] PASSWORD STRENGTH CALCULATOR
   * 
   * Evaluates and categorizes password security level
   */
  useEffect(() => {
    if (!password) {
      setPasswordStrength(null);
      return;
    }
    
    // Check password strength
    const hasLowercase = /[a-z]/.test(password);
    const hasUppercase = /[A-Z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[!@#$%^&*()_+\-=[\]{};':"\\|,.<>/?]/.test(password);
    const isLongEnough = password.length >= 8;
    
    const strength = [hasLowercase, hasUppercase, hasNumber, hasSpecialChar, isLongEnough]
      .filter(Boolean).length;
    
    if (strength <= 2) {
      setPasswordStrength('weak');
    } else if (strength === 3) {
      setPasswordStrength('medium');
    } else if (strength === 4) {
      setPasswordStrength('strong');
    } else {
      setPasswordStrength('very-strong');
    }
  }, [password]);
  
  /**
   * [H4X] PASSWORD STRENGTH INDICATOR
   * 
   * Visual indicator for password security level
   */
  const renderPasswordStrength = () => {
    if (!passwordStrength) return null;
    
    const getColorClass = () => {
      switch (passwordStrength) {
        case 'weak':
          return 'bg-msn-red';
        case 'medium':
          return 'bg-msn-orange';
        case 'strong':
          return 'bg-msn-green';
        case 'very-strong':
          return 'bg-msn-blue';
        default:
          return 'bg-msn-gray-300';
      }
    };
    
    const getWidthClass = () => {
      switch (passwordStrength) {
        case 'weak':
          return 'w-1/4';
        case 'medium':
          return 'w-2/4';
        case 'strong':
          return 'w-3/4';
        case 'very-strong':
          return 'w-full';
        default:
          return 'w-0';
      }
    };
    
    const getMessage = () => {
      switch (passwordStrength) {
        case 'weak':
          return 'Weak password';
        case 'medium':
          return 'Medium strength';
        case 'strong':
          return 'Strong password';
        case 'very-strong':
          return 'Very strong password';
        default:
          return '';
      }
    };
    
    return (
      <div className="mt-1">
        <div className="h-1.5 w-full bg-msn-gray-200 dark:bg-msn-gray-700 rounded-full overflow-hidden">
          <div 
            className={`h-full ${getColorClass()} ${getWidthClass()} transition-all duration-300`}
          ></div>
        </div>
        <p className={`text-xs mt-1 ${getColorClass().replace('bg-', 'text-')}`}>
          {getMessage()}
        </p>
      </div>
    );
  };
  
  /**
   * [H4X] FORM VALIDATION
   * 
   * Comprehensive validation for all registration fields
   */
  const validateForm = (): boolean => {
    let isValid = true;
    
    // Display name validation
    if (!displayName.trim()) {
      setDisplayNameError('Display name is required');
      isValid = false;
    } else if (displayName.length < 2) {
      setDisplayNameError('Display name must be at least 2 characters');
      isValid = false;
    }
    
    // Email validation
    if (!email.trim()) {
      setEmailError('Email is required');
      isValid = false;
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      setEmailError('Please enter a valid email address');
      isValid = false;
    }
    
    // Username validation
    if (!username.trim()) {
      setUsernameError('Username is required');
      isValid = false;
    } else if (username.length < 3) {
      setUsernameError('Username must be at least 3 characters');
      isValid = false;
    } else if (!/^[a-zA-Z0-9_]+$/.test(username)) {
      setUsernameError('Username can only contain letters, numbers, and underscores');
      isValid = false;
    } else if (usernameAvailable === false) {
      setUsernameError('This username is already taken');
      isValid = false;
    }
    
    // Password validation
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 8) {
      setPasswordError('Password must be at least 8 characters');
      isValid = false;
    } else if (passwordStrength === 'weak') {
      setPasswordError('Please use a stronger password');
      isValid = false;
    }
    
    // Confirm password validation
    if (!confirmPassword) {
      setConfirmPasswordError('Please confirm your password');
      isValid = false;
    } else if (confirmPassword !== password) {
      setConfirmPasswordError('Passwords do not match');
      isValid = false;
    }
    
    // Terms agreement validation
    if (!agreedToTerms) {
      setTermsError('You must agree to the terms and privacy policy');
      isValid = false;
    }
    
    return isValid;
  };
  
  /**
   * [H4X] REGISTRATION HANDLER
   * 
   * Processes form submission with validation and error handling
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);
    setError(null);
    
    try {
      await register({
        displayName: displayName.trim(),
        email: email.trim(),
        username: username.trim(),
        password
      });
      
      // Registration success is handled by the useEffect that watches auth status
    } catch (err) {
      setLoading(false);
      
      // Error is handled by the useEffect that watches authError
    }
  };
  
  /**
   * [H4X] PLATFORM-SPECIFIC BUTTON TEXT
   * 
   * Tailors messaging based on desktop or web platform
   */
  const getButtonText = () => {
    if (loading) return 'Creating your account...';
    return isDesktop ? 'Create your ChatEra Desktop account' : 'Create account';
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* Global Error Message */}
      {error && (
        <motion.div 
          className="p-3 bg-msn-red-light text-msn-red-dark rounded-md flex items-center text-sm"
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <AlertCircle size={16} className="mr-2 flex-shrink-0" />
          <span>{error}</span>
        </motion.div>
      )}
      
      {/* Display Name Field */}
      <div>
        <label htmlFor="displayName" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
          Display Name
        </label>
        <input
          id="displayName"
          type="text"
          value={displayName}
          onChange={(e) => setDisplayName(e.target.value)}
          className={`
            w-full px-3 py-2 rounded-md 
            bg-white dark:bg-msn-gray-700 
            border ${displayNameError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
            focus:outline-none focus:ring-2 focus:ring-msn-blue
          `}
          placeholder="Your full name"
        />
        {displayNameError && (
          <p className="mt-1 text-sm text-msn-red">{displayNameError}</p>
        )}
      </div>
      
      {/* Email Field */}
      <div>
        <label htmlFor="email" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
          Email Address
        </label>
        <input
          id="email"
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          autoComplete="email"
          className={`
            w-full px-3 py-2 rounded-md 
            bg-white dark:bg-msn-gray-700 
            border ${emailError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
            focus:outline-none focus:ring-2 focus:ring-msn-blue
          `}
          placeholder="your.email@example.com"
        />
        {emailError && (
          <p className="mt-1 text-sm text-msn-red">{emailError}</p>
        )}
        <p className="mt-1 text-xs text-msn-gray-500 dark:text-msn-gray-400">
          We'll send a verification email to this address
        </p>
      </div>
      
      {/* Username Field */}
      <div>
        <label htmlFor="username" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
          Username
        </label>
        <div className="relative">
          <input
            id="username"
            type="text"
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            autoComplete="username"
            className={`
              w-full px-3 py-2 rounded-md 
              bg-white dark:bg-msn-gray-700 
              border ${usernameError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
              focus:outline-none focus:ring-2 focus:ring-msn-blue
              pr-10
            `}
            placeholder="Choose a unique username"
          />
          
          {/* Username availability indicator */}
          {username.length >= 3 && (
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
              {isCheckingUsername && (
                <div className="h-4 w-4 border-2 border-msn-gray-400 border-t-transparent rounded-full animate-spin"></div>
              )}
              {!isCheckingUsername && usernameAvailable === true && (
                <Check size={18} className="text-msn-green" />
              )}
              {!isCheckingUsername && usernameAvailable === false && (
                <X size={18} className="text-msn-red" />
              )}
            </div>
          )}
        </div>
        {usernameError && (
          <p className="mt-1 text-sm text-msn-red">{usernameError}</p>
        )}
        {!usernameError && usernameAvailable === true && (
          <p className="mt-1 text-sm text-msn-green">Username is available</p>
        )}
      </div>
      
      {/* Password Field */}
      <div>
        <label htmlFor="password" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
          Password
        </label>
        <div className="relative">
          <input
            id="password"
            type={showPassword ? 'text' : 'password'}
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            autoComplete="new-password"
            className={`
              w-full px-3 py-2 rounded-md 
              bg-white dark:bg-msn-gray-700 
              border ${passwordError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
              focus:outline-none focus:ring-2 focus:ring-msn-blue
              pr-10
            `}
            placeholder="Create a secure password"
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-msn-gray-500"
            tabIndex={-1}
          >
            {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
          </button>
        </div>
        {passwordError && (
          <p className="mt-1 text-sm text-msn-red">{passwordError}</p>
        )}
        {password && !passwordError && renderPasswordStrength()}
      </div>
      
      {/* Confirm Password Field */}
      <div>
        <label htmlFor="confirmPassword" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
          Confirm Password
        </label>
        <input
          id="confirmPassword"
          type={showPassword ? 'text' : 'password'}
          value={confirmPassword}
          onChange={(e) => setConfirmPassword(e.target.value)}
          autoComplete="new-password"
          className={`
            w-full px-3 py-2 rounded-md 
            bg-white dark:bg-msn-gray-700 
            border ${confirmPasswordError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
            focus:outline-none focus:ring-2 focus:ring-msn-blue
          `}
          placeholder="Confirm your password"
        />
        {confirmPasswordError && (
          <p className="mt-1 text-sm text-msn-red">{confirmPasswordError}</p>
        )}
      </div>
      
      {/* Security Notice */}
      <div className="p-3 bg-msn-blue-light text-msn-blue-dark rounded-md flex items-start text-sm">
        <Shield size={16} className="mr-2 flex-shrink-0 mt-0.5" />
        <span>
          Your password is securely stored using Argon2 hashing and never stored in plain text.
          <br />
          We recommend using a password manager to generate and store unique passwords.
        </span>
      </div>
      
      {/* Terms and Privacy Agreement */}
      <div>
        <div className="flex items-start">
          <div className="flex items-center h-5">
            <input
              id="terms"
              type="checkbox"
              checked={agreedToTerms}
              onChange={(e) => setAgreedToTerms(e.target.checked)}
              className="h-4 w-4 text-msn-blue focus:ring-msn-blue border-msn-gray-300 rounded"
            />
          </div>
          <div className="ml-3 text-sm">
            <label htmlFor="terms" className="text-msn-gray-700 dark:text-msn-gray-300">
              I agree to the{' '}
              <Link href="/terms" className="text-msn-blue hover:underline">
                Terms of Service
              </Link>
              {' '}and{' '}
              <Link href="/privacy" className="text-msn-blue hover:underline">
                Privacy Policy
              </Link>
            </label>
          </div>
        </div>
        {termsError && (
          <p className="mt-1 text-sm text-msn-red">{termsError}</p>
        )}
      </div>
      
      {/* Submit Button */}
      <button
        type="submit"
        disabled={loading}
        className={`
          w-full px-4 py-2 rounded-md flex items-center justify-center
          text-white font-medium
          ${loading 
            ? 'bg-msn-gray-400 cursor-not-allowed' 
            : 'bg-msn-blue hover:bg-msn-blue-dark'}
          transition-colors duration-200
        `}
      >
        {loading ? (
          <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
        ) : (
          <UserPlus size={18} className="mr-2" />
        )}
        {getButtonText()}
      </button>
      
      {/* Sign In Link */}
      <div className="text-center mt-4 text-sm">
        <span className="text-msn-gray-600 dark:text-msn-gray-400">
          Already have an account?{' '}
        </span>
        <Link 
          href="/auth/login" 
          className="text-msn-blue font-medium hover:text-msn-blue-dark dark:hover:text-msn-blue-light"
        >
          Sign in
        </Link>
      </div>
    </form>
  );
};

export default RegisterForm;
