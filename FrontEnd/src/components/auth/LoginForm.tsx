// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █░░ █▀█ █▀▀ █ █▄░█   █▀▀ █▀█ █▀█ █▀▄▀█
 * █▄▄ █▄█ █▄█ █ █░▀█   █▀  █▄█ █▀▄ █░▀░█
 * 
 * [CODEX] Login Form Component
 * 
 * This component provides user authentication functionality
 * with username/password validation, "remember me" option,
 * and redirect handling for protected routes.
 * 
 * Features:
 * - Form validation with real-time feedback
 * - Error message handling for auth failures
 * - Persistent session with "remember me" option
 * - Platform-specific optimizations
 * - Dark/light mode support
 */

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { Eye, EyeOff, LogIn, AlertCircle } from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useTauri } from '@/lib/tauri';

interface LoginFormProps {
  redirectPath?: string;
  onLoginSuccess?: () => void;
}

/**
 * [H4X] LOGIN FORM COMPONENT
 *
 * Handles user authentication with validation and feedback
 */
const LoginForm: React.FC<LoginFormProps> = ({ 
  redirectPath = '/messages',
  onLoginSuccess 
}) => {
  const router = useRouter();
  const { login, status, error: authError } = useAuth();
  const { isDesktop } = useTauri();
  
  // Form state
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [rememberMe, setRememberMe] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // Form validation
  const [usernameError, setUsernameError] = useState<string | null>(null);
  const [passwordError, setPasswordError] = useState<string | null>(null);
  
  // Clear errors when inputs change
  useEffect(() => {
    if (username) setUsernameError(null);
    if (password) setPasswordError(null);
    if (username || password) setError(null);
  }, [username, password]);
  
  // If already authenticated, redirect
  useEffect(() => {
    if (status === 'authenticated') {
      if (onLoginSuccess) {
        onLoginSuccess();
      } else {
        const redirect = router.query.redirect as string || redirectPath;
        router.push(redirect);
      }
    }
  }, [status, router, redirectPath, onLoginSuccess]);
  
  // Set error from auth provider
  useEffect(() => {
    if (authError) {
      setError(authError);
      setLoading(false);
    }
  }, [authError]);
  
  /**
   * [H4X] FORM VALIDATION
   * 
   * Validates form inputs before submission
   */
  const validateForm = (): boolean => {
    let isValid = true;
    
    if (!username.trim()) {
      setUsernameError('Username is required');
      isValid = false;
    }
    
    if (!password) {
      setPasswordError('Password is required');
      isValid = false;
    } else if (password.length < 6) {
      setPasswordError('Password must be at least 6 characters');
      isValid = false;
    }
    
    return isValid;
  };
  
  /**
   * [H4X] HANDLE LOGIN SUBMISSION
   * 
   * Processes login attempt with validation and feedback
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);
    setError(null);
    
    try {
      await login({
        username: username.trim(),
        password,
        rememberMe
      });
      
      // Login is handled by the useEffect above that watches auth status
    } catch (err) {
      setLoading(false);
      
      // Error is handled by the useEffect that watches authError
    }
  };
  
  /**
   * [H4X] PLATFORM-SPECIFIC BUTTON TEXT
   * 
   * Shows tailored messaging based on desktop or web platform
   */
  const getButtonText = () => {
    if (loading) return 'Logging in...';
    return isDesktop ? 'Sign in to ChatEra Desktop' : 'Sign in';
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {/* Global Error Message */}
      {error && (
        <motion.div 
          className="p-3 bg-msn-red-light text-msn-red-dark rounded-md flex items-center text-sm"
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <AlertCircle size={16} className="mr-2 flex-shrink-0" />
          <span>{error}</span>
        </motion.div>
      )}
      
      {/* Username Field */}
      <div>
        <label htmlFor="username" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300 mb-1">
          Username
        </label>
        <input
          id="username"
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          autoComplete="username"
          className={`
            w-full px-3 py-2 rounded-md 
            bg-white dark:bg-msn-gray-700 
            border ${usernameError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
            focus:outline-none focus:ring-2 focus:ring-msn-blue
          `}
          placeholder="Enter your username"
        />
        {usernameError && (
          <p className="mt-1 text-sm text-msn-red">{usernameError}</p>
        )}
      </div>
      
      {/* Password Field */}
      <div>
        <div className="flex items-center justify-between mb-1">
          <label htmlFor="password" className="block text-sm font-medium text-msn-gray-700 dark:text-msn-gray-300">
            Password
          </label>
          <Link 
            href="/auth/reset-password"
            className="text-xs text-msn-blue hover:text-msn-blue-dark dark:hover:text-msn-blue-light"
          >
            Forgot password?
          </Link>
        </div>
        <div className="relative">
          <input
            id="password"
            type={showPassword ? 'text' : 'password'}
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            autoComplete="current-password"
            className={`
              w-full px-3 py-2 rounded-md 
              bg-white dark:bg-msn-gray-700 
              border ${passwordError ? 'border-msn-red' : 'border-msn-gray-300 dark:border-msn-gray-600'} 
              focus:outline-none focus:ring-2 focus:ring-msn-blue
              pr-10
            `}
            placeholder="Enter your password"
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-msn-gray-500"
            tabIndex={-1}
          >
            {showPassword ? <EyeOff size={18} /> : <Eye size={18} />}
          </button>
        </div>
        {passwordError && (
          <p className="mt-1 text-sm text-msn-red">{passwordError}</p>
        )}
      </div>
      
      {/* Remember Me Checkbox */}
      <div className="flex items-center">
        <input
          id="remember-me"
          type="checkbox"
          checked={rememberMe}
          onChange={(e) => setRememberMe(e.target.checked)}
          className="h-4 w-4 text-msn-blue focus:ring-msn-blue border-msn-gray-300 rounded"
        />
        <label htmlFor="remember-me" className="ml-2 block text-sm text-msn-gray-700 dark:text-msn-gray-300">
          Keep me signed in
        </label>
      </div>
      
      {/* Submit Button */}
      <button
        type="submit"
        disabled={loading}
        className={`
          w-full px-4 py-2 rounded-md flex items-center justify-center
          text-white font-medium
          ${loading 
            ? 'bg-msn-gray-400 cursor-not-allowed' 
            : 'bg-msn-blue hover:bg-msn-blue-dark'}
          transition-colors duration-200
        `}
      >
        {loading ? (
          <div className="h-5 w-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
        ) : (
          <LogIn size={18} className="mr-2" />
        )}
        {getButtonText()}
      </button>
      
      {/* Sign Up Link */}
      <div className="text-center mt-4 text-sm">
        <span className="text-msn-gray-600 dark:text-msn-gray-400">
          Don't have an account?{' '}
        </span>
        <Link 
          href="/auth/register" 
          className="text-msn-blue font-medium hover:text-msn-blue-dark dark:hover:text-msn-blue-light"
        >
          Sign up
        </Link>
      </div>
    </form>
  );
};

export default LoginForm;
