// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▀█ █▀█ ▀█▀ █▀▀ █▀▀ ▀█▀ █▀▀ █▀▄   █▀█ █▀█ █░█ ▀█▀ █▀▀
 * █▀▀ █▀▄ █▄█ ░█░ ██▄ █▄▄ ░█░ ██▄ █▄▀   █▀▄ █▄█ █▄█ ░█░ ██▄
 * 
 * [CODEX] Protected Route Component
 * 
 * This component secures routes that require authentication,
 * redirecting unauthenticated users to the login page.
 * 
 * Features:
 * - Authentication state checking
 * - Redirect handling
 * - Loading state management
 * - Return URL tracking
 */

import React, { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useAuth } from '@/lib/auth';
import LoadingScreen from '@/components/ui/LoadingScreen';

interface ProtectedRouteProps {
  children: React.ReactNode;
  allowOnboarding?: boolean;
}

/**
 * [H4X] PROTECTED ROUTE WRAPPER
 * 
 * Higher-order component to restrict access to authenticated users only
 */
const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children,
  allowOnboarding = false
}) => {
  const router = useRouter();
  const { status, user } = useAuth();
  
  useEffect(() => {
    // Handle authentication state changes
    if (status === 'unauthenticated') {
      // Redirect to login, preserving the intended destination
      const returnUrl = encodeURIComponent(router.asPath);
      router.replace(`/auth/login?returnUrl=${returnUrl}`);
    }
    
    // If onboarding is not allowed and user hasn't completed onboarding
    if (status === 'authenticated' && 
        !allowOnboarding && 
        user?.requiresOnboarding) {
      router.replace('/onboarding');
    }
  }, [status, router, user, allowOnboarding]);
  
  // Show loading state while checking authentication
  if (status === 'loading') {
    return <LoadingScreen message="Verifying your session..." />;
  }
  
  // Show onboarding if required
  if (status === 'authenticated' && 
      !allowOnboarding && 
      user?.requiresOnboarding) {
    return <LoadingScreen message="Preparing your onboarding..." />;
  }
  
  // If authenticated, render children
  return status === 'authenticated' ? <>{children}</> : <LoadingScreen message="Redirecting to login..." />;
};

export default ProtectedRoute;
