// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▀ █░█ ▄▀█ ▀█▀   █░█ █ █▀▀ █░█░█
 * █▄▄ █▀█ █▀█ ░█░   ▀▄▀ █ ██▄ ▀▄▀▄▀
 * 
 * [CODEX] Chat View Component
 * 
 * Main component that combines message list, input, and conversation header
 * to provide a complete chat interface with real-time messaging.
 * 
 * Features:
 * - Real-time message display and sending
 * - Message editing and deletion
 * - File sharing and multimedia support
 * - Typing indicators
 * - Message reactions and replies
 * - Contact information and presence display
 */

import React, { useState, useEffect, useCallback, useRef } from 'react';
import { useRouter } from 'next/router';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  Phone, 
  Video, 
  MoreVertical, 
  Info, 
  X,
  ArrowLeft,
  Paperclip
} from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useSocket } from '@/lib/socket';
import { Message, User } from '@chatera/shared';
import MessageList from './MessageList';
import MessageInput from './MessageInput';

interface ChatViewProps {
  recipientId: string;
  onBack?: () => void;
}

/**
 * [H4X] MOCK DATA
 * 
 * Placeholder data for development until backend is connected
 */
const MOCK_RECIPIENT: User = {
  id: 'recipient-1',
  username: 'sarah_connor',
  displayName: 'Sarah Connor',
  email: 'sarah@resistance.org',
  avatar: '/avatars/sarah.jpg',
  status: 'online',
  statusMessage: 'No fate but what we make'
};

const MOCK_MESSAGES: Message[] = [
  {
    id: 'm1',
    conversationId: 'conv1',
    sender: {
      id: 'recipient-1',
      username: 'sarah_connor',
      displayName: 'Sarah Connor',
      avatar: '/avatars/sarah.jpg'
    },
    content: 'Hey there! How are you doing today?',
    timestamp: Date.now() - 3600000 * 48, // 48 hours ago
    status: 'read'
  },
  {
    id: 'm2',
    conversationId: 'conv1',
    sender: {
      id: 'current-user',
      username: 'john_doe',
      displayName: 'John Doe',
      avatar: '/avatars/john.jpg'
    },
    content: 'I'm good, thanks! Just working on some code. How about you?',
    timestamp: Date.now() - 3600000 * 47.5, // 47.5 hours ago
    status: 'read'
  },
  {
    id: 'm3',
    conversationId: 'conv1',
    sender: {
      id: 'recipient-1',
      username: 'sarah_connor',
      displayName: 'Sarah Connor',
      avatar: '/avatars/sarah.jpg'
    },
    content: 'Same here. Working on a new project. It's pretty exciting!',
    timestamp: Date.now() - 3600000 * 24, // 24 hours ago
    status: 'read'
  },
  {
    id: 'm4',
    conversationId: 'conv1',
    sender: {
      id: 'recipient-1',
      username: 'sarah_connor',
      displayName: 'Sarah Connor',
      avatar: '/avatars/sarah.jpg'
    },
    content: 'Check out this cool image I found. It might be useful for your project.',
    timestamp: Date.now() - 3600000 * 23.5, // 23.5 hours ago
    status: 'read',
    attachments: [
      {
        url: '/attachments/code-example.jpg',
        name: 'code-example.jpg',
        size: 256000,
        type: 'image/jpeg'
      }
    ]
  },
  {
    id: 'm5',
    conversationId: 'conv1',
    sender: {
      id: 'current-user',
      username: 'john_doe',
      displayName: 'John Doe',
      avatar: '/avatars/john.jpg'
    },
    content: 'Thanks! That looks really useful. I'll check it out.',
    timestamp: Date.now() - 3600000 * 23, // 23 hours ago
    status: 'read'
  },
  {
    id: 'm6',
    conversationId: 'conv1',
    sender: {
      id: 'system',
      username: 'system',
      displayName: 'System',
      avatar: '/system.png'
    },
    content: 'Call ended. Duration: 5 minutes, 23 seconds',
    timestamp: Date.now() - 3600000 * 3, // 3 hours ago
    isSystemMessage: true,
    status: 'read'
  },
  {
    id: 'm7',
    conversationId: 'conv1',
    sender: {
      id: 'recipient-1',
      username: 'sarah_connor',
      displayName: 'Sarah Connor',
      avatar: '/avatars/sarah.jpg'
    },
    content: 'Are we still meeting tomorrow to discuss the project?',
    timestamp: Date.now() - 3600000 * 2, // 2 hours ago
    status: 'read'
  },
  {
    id: 'm8',
    conversationId: 'conv1',
    sender: {
      id: 'current-user',
      username: 'john_doe',
      displayName: 'John Doe',
      avatar: '/avatars/john.jpg'
    },
    content: 'Yes, definitely! Let's meet at 10am at the usual place.',
    timestamp: Date.now() - 3600000, // 1 hour ago
    status: 'delivered'
  }
];

/**
 * [H4X] CHAT VIEW COMPONENT
 * 
 * Integrates messaging functionality with UI components
 */
const ChatView: React.FC<ChatViewProps> = ({ recipientId, onBack }) => {
  const { user } = useAuth();
  const { socket, isConnected, emit, on, off } = useSocket();
  const router = useRouter();
  
  // State
  const [recipient, setRecipient] = useState<User>(MOCK_RECIPIENT);
  const [messages, setMessages] = useState<Message[]>(MOCK_MESSAGES);
  const [isTyping, setIsTyping] = useState(false);
  const [showInfo, setShowInfo] = useState(false);
  const [replyTo, setReplyTo] = useState<Message | null>(null);
  const [editMessage, setEditMessage] = useState<Message | null>(null);
  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  
  const conversationId = `conv_${user?.id}_${recipientId}`;
  
  /**
   * [H4X] MESSAGE HANDLERS
   * 
   * Functions to manage messages and real-time events
   */
  const handleSendMessage = (content: string, attachments: any[] = []) => {
    if (!user) return;
    
    const newMessage: Message = {
      id: `temp_${Date.now()}`,
      conversationId,
      sender: {
        id: user.id,
        username: user.username,
        displayName: user.displayName,
        avatar: user.avatar || ''
      },
      content,
      timestamp: Date.now(),
      status: 'sent',
      attachments
    };
    
    setMessages(prev => [...prev, newMessage]);
    
    // In a real app, emit to socket server
    // socket.emit('message:send', newMessage);
  };
  
  const handleDeleteMessage = (messageId: string) => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId 
          ? { ...msg, isDeleted: true, content: '' } 
          : msg
      )
    );
    
    // In a real app, emit to socket server
    // socket.emit('message:delete', { messageId });
  };
  
  const handleEditMessage = (messageId: string, newContent: string) => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId 
          ? { ...msg, content: newContent, isEdited: true } 
          : msg
      )
    );
    
    // In a real app, emit to socket server
    // socket.emit('message:edit', { messageId, content: newContent });
  };
  
  /**
   * [H4X] EVENT LISTENERS
   * 
   * Socket event handlers for real-time updates
   */
  useEffect(() => {
    if (!socket || !isConnected) return;
    
    // Register socket event listeners for real-time updates
    const messageHandler = (message: Message) => {
      if (message.conversationId === conversationId) {
        setMessages(prev => [...prev, message]);
      }
    };
    
    const typingHandler = ({ userId }: { userId: string }) => {
      if (userId === recipientId) {
        setIsTyping(true);
        
        // Clear previous timeout if exists
        if (typingTimeoutRef.current) {
          clearTimeout(typingTimeoutRef.current);
        }
        
        // Set timeout to clear typing indicator after 3 seconds
        typingTimeoutRef.current = setTimeout(() => {
          setIsTyping(false);
        }, 3000);
      }
    };
    
    const typingStopHandler = ({ userId }: { userId: string }) => {
      if (userId === recipientId) {
        setIsTyping(false);
        
        if (typingTimeoutRef.current) {
          clearTimeout(typingTimeoutRef.current);
        }
      }
    };
    
    // Register listeners
    on('message:new', messageHandler);
    on('typing', typingHandler);
    on('typing:stop', typingStopHandler);
    
    // Cleanup
    return () => {
      off('message:new');
      off('typing');
      off('typing:stop');
      
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
    };
  }, [socket, isConnected, conversationId, recipientId, on, off]);
  
  /**
   * [H4X] UI MESSAGE INTERACTIONS
   * 
   * Handle user actions on messages
   */
  const handleMessageReply = (message: Message) => {
    setReplyTo(message);
    setEditMessage(null);
  };
  
  const handleMessageEdit = (message: Message) => {
    setEditMessage(message);
    setReplyTo(null);
  };
  
  /**
   * [H4X] CALL FUNCTIONS
   * 
   * Initiate voice and video calls
   */
  const startVoiceCall = () => {
    router.push(`/call/${recipientId}`);
  };
  
  const startVideoCall = () => {
    router.push(`/video/${recipientId}`);
  };
  
  /**
   * [H4X] STATUS DOT COMPONENT
   * 
   * Visual indicator for user's online status
   */
  const StatusDot = () => {
    const statusColorClass = recipient.status === 'online'
      ? 'bg-msn-green'
      : recipient.status === 'away'
        ? 'bg-msn-orange'
        : recipient.status === 'busy'
          ? 'bg-msn-red'
          : 'bg-msn-gray-400';
          
    return (
      <span className={`h-3 w-3 rounded-full ${statusColorClass} absolute bottom-0 right-0 border-2 border-white dark:border-msn-gray-800`}></span>
    );
  };
  
  return (
    <div className="h-full flex flex-col bg-white dark:bg-msn-gray-800 rounded-lg shadow-sm overflow-hidden">
      {/* [H4X] CONVERSATION HEADER */}
      <div className="flex items-center justify-between px-4 py-3 border-b border-msn-gray-200 dark:border-msn-gray-700">
        <div className="flex items-center">
          {/* Back button for mobile */}
          {onBack && (
            <button 
              onClick={onBack}
              className="mr-2 p-1.5 rounded-full hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700 md:hidden"
            >
              <ArrowLeft size={20} />
            </button>
          )}
          
          {/* User avatar with status */}
          <div className="relative mr-3">
            <img 
              src={recipient.avatar || '/default-avatar.png'} 
              alt={recipient.displayName}
              className="h-10 w-10 rounded-full object-cover"
            />
            <StatusDot />
          </div>
          
          {/* User info */}
          <div>
            <h2 className="font-semibold text-msn-gray-900 dark:text-white">
              {recipient.displayName}
            </h2>
            <div className="flex items-center">
              {isTyping ? (
                <span className="text-xs text-msn-blue animate-pulse">
                  Typing...
                </span>
              ) : (
                <span className="text-xs text-msn-gray-500 truncate max-w-[150px] md:max-w-[300px]">
                  {recipient.statusMessage || recipient.status}
                </span>
              )}
            </div>
          </div>
        </div>
        
        {/* Action buttons */}
        <div className="flex items-center gap-1">
          <button 
            onClick={startVoiceCall}
            className="p-2 rounded-full hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700"
            title="Voice call"
          >
            <Phone size={18} />
          </button>
          <button 
            onClick={startVideoCall}
            className="p-2 rounded-full hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700"
            title="Video call"
          >
            <Video size={18} />
          </button>
          <button 
            onClick={() => setShowInfo(!showInfo)}
            className={`
              p-2 rounded-full
              ${showInfo 
                ? 'bg-msn-gray-200 dark:bg-msn-gray-700' 
                : 'hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700'
              }
            `}
            title="Contact info"
          >
            <Info size={18} />
          </button>
          <button 
            className="p-2 rounded-full hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700"
            title="More options"
          >
            <MoreVertical size={18} />
          </button>
        </div>
      </div>
      
      {/* [H4X] MAIN CONVERSATION AREA */}
      <div className="flex flex-1 overflow-hidden">
        {/* Messages area */}
        <div className="flex-1 flex flex-col">
          <MessageList 
            messages={messages}
            recipient={recipient}
            onReply={handleMessageReply}
            onEdit={handleMessageEdit}
            onDelete={handleDeleteMessage}
          />
          <MessageInput 
            recipientId={recipientId}
            conversationId={conversationId}
            replyTo={replyTo}
            editMessage={editMessage}
            onCancelReply={() => setReplyTo(null)}
            onCancelEdit={() => setEditMessage(null)}
          />
        </div>
        
        {/* Contact info sidebar */}
        <AnimatePresence>
          {showInfo && (
            <motion.div 
              className="w-72 border-l border-msn-gray-200 dark:border-msn-gray-700 bg-white dark:bg-msn-gray-800 overflow-y-auto"
              initial={{ width: 0, opacity: 0 }}
              animate={{ width: 288, opacity: 1 }}
              exit={{ width: 0, opacity: 0 }}
              transition={{ duration: 0.2 }}
            >
              <div className="p-4">
                {/* Header */}
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold">Contact Info</h3>
                  <button 
                    onClick={() => setShowInfo(false)}
                    className="p-1.5 rounded-full hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700"
                  >
                    <X size={18} />
                  </button>
                </div>
                
                {/* Profile */}
                <div className="flex flex-col items-center mb-4">
                  <div className="relative mb-3">
                    <img 
                      src={recipient.avatar || '/default-avatar.png'} 
                      alt={recipient.displayName}
                      className="h-24 w-24 rounded-full object-cover"
                    />
                    <span className={`
                      h-4 w-4 rounded-full
                      ${recipient.status === 'online' ? 'bg-msn-green' : 
                        recipient.status === 'away' ? 'bg-msn-orange' : 
                        recipient.status === 'busy' ? 'bg-msn-red' : 'bg-msn-gray-400'}
                      absolute bottom-0 right-0 border-2 border-white dark:border-msn-gray-800
                    `}></span>
                  </div>
                  <h4 className="text-lg font-semibold">{recipient.displayName}</h4>
                  <p className="text-sm text-msn-gray-500">@{recipient.username}</p>
                  {recipient.statusMessage && (
                    <p className="text-sm mt-1 text-center">
                      "{recipient.statusMessage}"
                    </p>
                  )}
                </div>
                
                {/* Actions */}
                <div className="flex justify-center gap-3 mb-6">
                  <button 
                    onClick={startVoiceCall}
                    className="p-3 rounded-full bg-msn-gray-100 dark:bg-msn-gray-700 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                    title="Voice call"
                  >
                    <Phone size={20} />
                  </button>
                  <button 
                    onClick={startVideoCall}
                    className="p-3 rounded-full bg-msn-gray-100 dark:bg-msn-gray-700 hover:bg-msn-gray-200 dark:hover:bg-msn-gray-600"
                    title="Video call"
                  >
                    <Video size={20} />
                  </button>
                </div>
                
                {/* Media and files */}
                <div className="mb-6">
                  <h4 className="text-sm font-semibold mb-2">Media & Files</h4>
                  <div className="grid grid-cols-3 gap-2">
                    {messages
                      .filter(m => m.attachments && m.attachments.length > 0)
                      .flatMap(m => m.attachments || [])
                      .slice(0, 6)
                      .map((attachment, index) => (
                        <div 
                          key={index}
                          className="aspect-square rounded-md overflow-hidden bg-msn-gray-100 dark:bg-msn-gray-700 flex items-center justify-center"
                        >
                          {attachment.type?.startsWith('image/') ? (
                            <img 
                              src={attachment.url} 
                              alt="Attachment" 
                              className="w-full h-full object-cover"
                            />
                          ) : (
                            <Paperclip size={20} className="text-msn-gray-500" />
                          )}
                        </div>
                      ))}
                  </div>
                  <button className="text-sm text-msn-blue mt-2 hover:underline">
                    View all media and files
                  </button>
                </div>
                
                {/* Additional info could be added here */}
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
};

export default ChatView;
