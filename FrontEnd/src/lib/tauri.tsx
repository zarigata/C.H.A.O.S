// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * ▀█▀ ▄▀█ █░█ █▀█ █   █ █▄░█ ▀█▀ █▀▀ █▀▀ █▀█ ▄▀█ ▀█▀ █ █▀█ █▄░█
 * ░█░ █▀█ █▄█ █▀▄ █   █ █░▀█ ░█░ ██▄ █▄█ █▀▄ █▀█ ░█░ █ █▄█ █░▀█
 * 
 * [CODEX] Tauri Desktop Integration Provider
 * 
 * This module provides integration with Tauri for desktop application
 * capabilities including file system access, notifications, and 
 * cross-platform bridge functionality.
 * 
 * The TauriProvider creates a React context that makes desktop-specific
 * functions available throughout the application while gracefully
 * degrading when running in a browser environment.
 */

import React, { createContext, useContext, useEffect, useState } from 'react';

// Type definitions for Tauri functionality
type TauriContextType = {
  isDesktop: boolean;
  platform: 'windows' | 'macos' | 'linux' | 'browser';
  notification: {
    show: (options: { title: string; body: string }) => Promise<void>;
  };
  fs: {
    readTextFile: (path: string) => Promise<string>;
    writeTextFile: (path: string, contents: string) => Promise<void>;
    exists: (path: string) => Promise<boolean>;
  };
  path: {
    appDataDir: () => Promise<string>;
    join: (...paths: string[]) => Promise<string>;
  };
  app: {
    getVersion: () => Promise<string>;
  };
};

// Create the context with default values for browser environment
const TauriContext = createContext<TauriContextType>({
  isDesktop: false,
  platform: 'browser',
  notification: {
    show: async () => {
      console.warn('Notifications are not available in browser');
    },
  },
  fs: {
    readTextFile: async () => {
      console.warn('File system operations are not available in browser');
      return '';
    },
    writeTextFile: async () => {
      console.warn('File system operations are not available in browser');
    },
    exists: async () => {
      console.warn('File system operations are not available in browser');
      return false;
    },
  },
  path: {
    appDataDir: async () => {
      console.warn('Path operations are not available in browser');
      return '';
    },
    join: async () => {
      console.warn('Path operations are not available in browser');
      return '';
    },
  },
  app: {
    getVersion: async () => {
      return '0.1.0'; // Default browser version
    },
  },
});

/**
 * [H4X] TAURI PROVIDER COMPONENT
 * 
 * This provider initializes Tauri functionality when available
 * and provides a consistent API for desktop-specific operations.
 */
export const TauriProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [isDesktop, setIsDesktop] = useState(false);
  const [platform, setPlatform] = useState<'windows' | 'macos' | 'linux' | 'browser'>('browser');
  
  // Initialize Tauri integration
  useEffect(() => {
    const detectTauri = async () => {
      try {
        // Check if running in Tauri environment
        if (typeof window !== 'undefined' && 'Tauri' in window) {
          setIsDesktop(true);
          
          // Detect platform
          const os = await import('@tauri-apps/api/os');
          const type = await os.type();
          
          if (type.includes('Windows')) {
            setPlatform('windows');
          } else if (type.includes('Darwin')) {
            setPlatform('macos');
          } else if (type.includes('Linux')) {
            setPlatform('linux');
          }
          
          console.info(`[TAURI] Running on ${platform} platform`);
        }
      } catch (error) {
        console.warn('[TAURI] Not running in Tauri environment:', error);
      }
    };
    
    detectTauri();
  }, []);
  
  // Create context value with platform-specific functionality
  const contextValue: TauriContextType = {
    isDesktop,
    platform,
    notification: {
      show: async ({ title, body }) => {
        if (isDesktop) {
          try {
            const { isPermissionGranted, requestPermission, sendNotification } = 
              await import('@tauri-apps/api/notification');
            
            // Check if we have notification permissions
            let permissionGranted = await isPermissionGranted();
            if (!permissionGranted) {
              const permission = await requestPermission();
              permissionGranted = permission === 'granted';
            }
            
            if (permissionGranted) {
              sendNotification({ title, body });
            }
          } catch (error) {
            console.error('[TAURI] Notification error:', error);
          }
        } else if ('Notification' in window) {
          // Fall back to web notifications
          if (Notification.permission === 'granted') {
            new Notification(title, { body });
          } else if (Notification.permission !== 'denied') {
            const permission = await Notification.requestPermission();
            if (permission === 'granted') {
              new Notification(title, { body });
            }
          }
        }
      },
    },
    fs: {
      readTextFile: async (path: string) => {
        if (isDesktop) {
          try {
            const { readTextFile } = await import('@tauri-apps/api/fs');
            return await readTextFile(path);
          } catch (error) {
            console.error('[TAURI] File read error:', error);
            return '';
          }
        }
        return '';
      },
      writeTextFile: async (path: string, contents: string) => {
        if (isDesktop) {
          try {
            const { writeTextFile } = await import('@tauri-apps/api/fs');
            await writeTextFile(path, contents);
          } catch (error) {
            console.error('[TAURI] File write error:', error);
          }
        }
      },
      exists: async (path: string) => {
        if (isDesktop) {
          try {
            const { exists } = await import('@tauri-apps/api/fs');
            return await exists(path);
          } catch (error) {
            console.error('[TAURI] File exists check error:', error);
            return false;
          }
        }
        return false;
      },
    },
    path: {
      appDataDir: async () => {
        if (isDesktop) {
          try {
            const { appDataDir } = await import('@tauri-apps/api/path');
            return await appDataDir();
          } catch (error) {
            console.error('[TAURI] App data directory error:', error);
            return '';
          }
        }
        return '';
      },
      join: async (...paths: string[]) => {
        if (isDesktop) {
          try {
            const { join } = await import('@tauri-apps/api/path');
            return await join(...paths);
          } catch (error) {
            console.error('[TAURI] Path join error:', error);
            return paths.join('/');
          }
        }
        return paths.join('/');
      },
    },
    app: {
      getVersion: async () => {
        if (isDesktop) {
          try {
            const { getVersion } = await import('@tauri-apps/api/app');
            return await getVersion();
          } catch (error) {
            console.error('[TAURI] Get version error:', error);
            return '0.1.0';
          }
        }
        return '0.1.0';
      },
    },
  };
  
  return (
    <TauriContext.Provider value={contextValue}>
      {children}
    </TauriContext.Provider>
  );
};

/**
 * [H4X] TAURI HOOK
 * 
 * Custom hook to access Tauri functionality from any component
 */
export const useTauri = () => useContext(TauriContext);
