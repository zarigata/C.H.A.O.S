// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▄▀█ █▀▀ █▀ █▀ ▄▀█ █▀▀ █ █▄░█ █▀▀   █▀█ ▄▀█ █▀▀ █▀▀
 * █░▀░█ ██▄ ▄█ ▄█ █▀█ █▄█ █ █░▀█ █▄█   █▀▀ █▀█ █▄█ ██▄
 * 
 * [CODEX] Individual Message Conversation Page
 * 
 * Dynamic route page for one-on-one conversations, handling
 * real-time messaging with a specific contact. This page
 * demonstrates the ChatEra messaging experience with MSN-inspired
 * interface elements and modern UX patterns.
 * 
 * Features:
 * - Dynamic contact loading based on URL parameter
 * - Responsive layout adapting to different screen sizes
 * - Cross-platform compatibility (desktop/web)
 * - Error handling and authentication protection
 */

import React, { useEffect, useState } from 'react';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';
import { AnimatePresence, motion } from 'framer-motion';
import Head from 'next/head';
import { User } from '@chatera/shared';
import { useAuth } from '@/lib/auth';
import { useSocket } from '@/lib/socket';
import MainLayout from '@/components/layout/MainLayout';
import ChatView from '@/components/chat/ChatView';

interface MessagePageProps {
  contactId: string;
}

/**
 * [H4X] MOCK CONTACT DATA
 * 
 * Temporary mock data for development until API integration
 */
const MOCK_CONTACTS: User[] = [
  {
    id: 'contact-1',
    username: 'sarah_connor',
    displayName: 'Sarah Connor',
    email: 'sarah@resistance.org',
    avatar: '/avatars/sarah.jpg',
    status: 'online',
    statusMessage: 'No fate but what we make'
  },
  {
    id: 'contact-2',
    username: 'john_smith',
    displayName: 'John Smith',
    email: 'john@example.com',
    avatar: '/avatars/john.jpg',
    status: 'away',
    statusMessage: '🎮 Gaming - Do not disturb'
  },
  {
    id: 'contact-3',
    username: 'morpheus',
    displayName: 'Morpheus',
    email: 'morpheus@zion.org',
    avatar: '/avatars/morpheus.jpg',
    status: 'offline',
    statusMessage: 'Free your mind'
  }
];

/**
 * [H4X] CROSS-PLATFORM MESSAGE PAGE
 * 
 * Individual conversation page with responsive layout
 */
const MessagePage: React.FC<MessagePageProps> = ({ contactId }) => {
  const router = useRouter();
  const { id } = router.query;
  const { user, status: authStatus } = useAuth();
  const { isConnected } = useSocket();
  
  // Contact state
  const [contact, setContact] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // For mobile responsive layout
  const [showSidebar, setShowSidebar] = useState(false);
  
  /**
   * [H4X] CONTACT LOADER
   * 
   * Fetch contact data based on URL parameter
   */
  useEffect(() => {
    if (!id) return;
    
    const fetchContact = async () => {
      setLoading(true);
      setError(null);
      
      try {
        // In a real app, this would be an API call
        // const response = await api.getContact(id as string);
        
        // For now, use mock data
        const foundContact = MOCK_CONTACTS.find(c => c.id === id || c.username === id);
        
        if (foundContact) {
          setContact(foundContact);
        } else {
          setError('Contact not found');
        }
      } catch (err) {
        console.error('Error fetching contact:', err);
        setError('Failed to load contact information');
      } finally {
        setLoading(false);
      }
    };
    
    fetchContact();
  }, [id]);
  
  /**
   * [H4X] AUTHENTICATION CHECK
   * 
   * Redirect unauthenticated users to login
   */
  useEffect(() => {
    if (authStatus === 'unauthenticated') {
      router.replace('/login?redirect=' + encodeURIComponent(router.asPath));
    }
  }, [authStatus, router]);
  
  // Handle connection status changes
  useEffect(() => {
    if (!isConnected) {
      // Could show a toast notification here
      console.warn('Connection lost. Messages will be queued until reconnection.');
    }
  }, [isConnected]);
  
  // Handle going back to contacts list (mobile only)
  const handleBack = () => {
    router.push('/messages');
  };
  
  // Show loading state
  if (loading) {
    return (
      <MainLayout title="Loading...">
        <div className="h-full flex items-center justify-center">
          <div className="animate-pulse flex flex-col items-center">
            <div className="h-10 w-10 bg-msn-gray-200 dark:bg-msn-gray-700 rounded-full mb-3"></div>
            <div className="h-4 w-32 bg-msn-gray-200 dark:bg-msn-gray-700 rounded mb-2"></div>
            <div className="h-3 w-24 bg-msn-gray-200 dark:bg-msn-gray-700 rounded"></div>
          </div>
        </div>
      </MainLayout>
    );
  }
  
  // Show error state
  if (error || !contact) {
    return (
      <MainLayout title="Error">
        <div className="h-full flex items-center justify-center">
          <div className="bg-white dark:bg-msn-gray-800 p-6 rounded-lg shadow-md max-w-md text-center">
            <h2 className="text-xl font-semibold mb-3">Oops! Something went wrong</h2>
            <p className="text-msn-gray-600 dark:text-msn-gray-400 mb-4">
              {error || 'Contact not found'}
            </p>
            <button
              onClick={() => router.push('/messages')}
              className="px-4 py-2 bg-msn-blue text-white rounded-md hover:bg-msn-blue-dark"
            >
              Back to Messages
            </button>
          </div>
        </div>
      </MainLayout>
    );
  }
  
  return (
    <MainLayout title={`Chat with ${contact.displayName}`}>
      <Head>
        <title>ChatEra - {contact.displayName}</title>
      </Head>
      
      <div className="h-full flex flex-col md:p-4">
        {/* Main chat interface */}
        <div className="flex-1 overflow-hidden rounded-lg shadow-sm">
          <ChatView 
            recipientId={contact.id} 
            onBack={handleBack}
          />
        </div>
      </div>
    </MainLayout>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { id } = context.params || {};
  
  if (!id) {
    return {
      redirect: {
        destination: '/messages',
        permanent: false,
      },
    };
  }
  
  return {
    props: {
      contactId: id,
    },
  };
};

export default MessagePage;
