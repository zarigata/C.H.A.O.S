// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀▄▀█ █▀▀ █▀ █▀ ▄▀█ █▀▀ █▀▀ █▀   █░█ █░█ █▄▄
 * █░▀░█ ██▄ ▄█ ▄█ █▀█ █▄█ ██▄ ▄█   █▀█ █▄█ █▄█
 * 
 * [CODEX] Messages Dashboard
 * 
 * This page displays all user conversations, providing quick access 
 * to recent chats and contacts. Inspired by MSN Messenger's conversation
 * list with modern UX enhancements for web and desktop platforms.
 * 
 * Features:
 * - Recent conversations list with unread indicators
 * - Search functionality to find contacts and messages
 * - Responsive design with mobile-optimized layout
 * - New conversation creation flow
 * - Real-time conversation updates
 */

import React, { useState, useEffect } from 'react';
import { GetServerSideProps } from 'next';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { AnimatePresence, motion } from 'framer-motion';
import { 
  Search, 
  Plus, 
  Users,
  MessageSquare,
  Settings,
  ArrowRight,
  X,
  Check
} from 'lucide-react';
import { useAuth } from '@/lib/auth';
import { useSocket } from '@/lib/socket';
import MainLayout from '@/components/layout/MainLayout';
import { Conversation, User } from '@chatera/shared';

/**
 * [H4X] MOCK DATA
 * 
 * Temporary data for development until API integration
 */
const MOCK_CONVERSATIONS: Conversation[] = [
  {
    id: 'conv1',
    participants: [
      {
        id: 'current-user',
        username: 'john_doe',
        displayName: 'John Doe',
        avatar: '/avatars/john.jpg'
      },
      {
        id: 'contact-1',
        username: 'sarah_connor',
        displayName: 'Sarah Connor',
        avatar: '/avatars/sarah.jpg',
        status: 'online',
        statusMessage: 'No fate but what we make'
      }
    ],
    lastMessage: {
      id: 'msg1',
      conversationId: 'conv1',
      sender: {
        id: 'contact-1',
        username: 'sarah_connor',
        displayName: 'Sarah Connor',
        avatar: '/avatars/sarah.jpg'
      },
      content: 'Are we still meeting tomorrow to discuss the project?',
      timestamp: Date.now() - 3600000 * 2, // 2 hours ago
      status: 'read'
    },
    unreadCount: 0,
    createdAt: new Date(Date.now() - 86400000 * 30), // 30 days ago
    updatedAt: new Date(Date.now() - 3600000 * 2), // 2 hours ago
    isGroup: false
  },
  {
    id: 'conv2',
    participants: [
      {
        id: 'current-user',
        username: 'john_doe',
        displayName: 'John Doe',
        avatar: '/avatars/john.jpg'
      },
      {
        id: 'contact-2',
        username: 'john_smith',
        displayName: 'John Smith',
        avatar: '/avatars/john-smith.jpg',
        status: 'away',
        statusMessage: '🎮 Gaming - Do not disturb'
      }
    ],
    lastMessage: {
      id: 'msg2',
      conversationId: 'conv2',
      sender: {
        id: 'contact-2',
        username: 'john_smith',
        displayName: 'John Smith',
        avatar: '/avatars/john-smith.jpg'
      },
      content: 'Check out this awesome new game I found!',
      timestamp: Date.now() - 3600000 * 5, // 5 hours ago
      status: 'read'
    },
    unreadCount: 2,
    createdAt: new Date(Date.now() - 86400000 * 60), // 60 days ago
    updatedAt: new Date(Date.now() - 3600000 * 5), // 5 hours ago
    isGroup: false
  },
  {
    id: 'conv3',
    participants: [
      {
        id: 'current-user',
        username: 'john_doe',
        displayName: 'John Doe',
        avatar: '/avatars/john.jpg'
      },
      {
        id: 'contact-3',
        username: 'morpheus',
        displayName: 'Morpheus',
        avatar: '/avatars/morpheus.jpg',
        status: 'offline',
        statusMessage: 'Free your mind'
      },
      {
        id: 'contact-4',
        username: 'trinity',
        displayName: 'Trinity',
        avatar: '/avatars/trinity.jpg',
        status: 'online'
      }
    ],
    lastMessage: {
      id: 'msg3',
      conversationId: 'conv3',
      sender: {
        id: 'current-user',
        username: 'john_doe',
        displayName: 'John Doe',
        avatar: '/avatars/john.jpg'
      },
      content: 'I need to talk to both of you about the upcoming mission.',
      timestamp: Date.now() - 86400000, // 1 day ago
      status: 'delivered'
    },
    unreadCount: 0,
    createdAt: new Date(Date.now() - 86400000 * 10), // 10 days ago
    updatedAt: new Date(Date.now() - 86400000), // 1 day ago
    isGroup: true,
    groupName: 'Zion Team',
    groupAvatar: '/groups/zion.jpg'
  }
];

const MOCK_CONTACTS: User[] = [
  {
    id: 'contact-1',
    username: 'sarah_connor',
    displayName: 'Sarah Connor',
    email: 'sarah@resistance.org',
    avatar: '/avatars/sarah.jpg',
    status: 'online',
    statusMessage: 'No fate but what we make'
  },
  {
    id: 'contact-2',
    username: 'john_smith',
    displayName: 'John Smith',
    email: 'john@example.com',
    avatar: '/avatars/john-smith.jpg',
    status: 'away',
    statusMessage: '🎮 Gaming - Do not disturb'
  },
  {
    id: 'contact-3',
    username: 'morpheus',
    displayName: 'Morpheus',
    email: 'morpheus@zion.org',
    avatar: '/avatars/morpheus.jpg',
    status: 'offline',
    statusMessage: 'Free your mind'
  },
  {
    id: 'contact-4',
    username: 'trinity',
    displayName: 'Trinity',
    email: 'trinity@zion.org',
    avatar: '/avatars/trinity.jpg',
    status: 'online'
  },
  {
    id: 'contact-5',
    username: 'neo',
    displayName: 'Neo',
    email: 'neo@zion.org',
    avatar: '/avatars/neo.jpg',
    status: 'online',
    statusMessage: 'I know kung fu'
  }
];

/**
 * [H4X] CONVERSATION LIST COMPONENT
 * 
 * Displays recent conversations with sorting and filtering
 */
const ConversationList: React.FC<{
  conversations: Conversation[];
  currentUserId: string;
  onSelectConversation: (conversation: Conversation) => void;
  searchQuery: string;
}> = ({ conversations, currentUserId, onSelectConversation, searchQuery }) => {
  // Filter conversations based on search query
  const filteredConversations = conversations.filter(conv => {
    if (!searchQuery) return true;
    
    const query = searchQuery.toLowerCase();
    
    // Search in participant names
    const participantMatch = conv.participants.some(p => 
      p.id !== currentUserId && 
      (p.displayName.toLowerCase().includes(query) || 
       p.username.toLowerCase().includes(query))
    );
    
    // Search in group name if it's a group
    const groupNameMatch = conv.isGroup && 
      conv.groupName?.toLowerCase().includes(query);
    
    // Search in last message content
    const messageMatch = conv.lastMessage && 
      conv.lastMessage.content.toLowerCase().includes(query);
    
    return participantMatch || groupNameMatch || messageMatch;
  });
  
  // Sort conversations: first by unread count, then by last message time
  const sortedConversations = [...filteredConversations].sort((a, b) => {
    // First sort by unread count
    if (a.unreadCount !== b.unreadCount) {
      return b.unreadCount - a.unreadCount;
    }
    
    // Then sort by last message timestamp
    const aTime = a.lastMessage?.timestamp || new Date(a.updatedAt).getTime();
    const bTime = b.lastMessage?.timestamp || new Date(b.updatedAt).getTime();
    
    return bTime - aTime;
  });
  
  /**
   * [H4X] STATUS COLOR MAPPER
   * 
   * Maps status values to CSS color classes
   */
  const getStatusColorClass = (status?: string): string => {
    switch (status) {
      case 'online':
        return 'bg-msn-green';
      case 'away':
        return 'bg-msn-orange';
      case 'busy':
        return 'bg-msn-red';
      case 'invisible':
      case 'offline':
      default:
        return 'bg-msn-gray-400';
    }
  };
  
  /**
   * [H4X] CONVERSATION NAME RESOLVER
   * 
   * Gets the appropriate display name for a conversation
   */
  const getConversationName = (conversation: Conversation): string => {
    if (conversation.isGroup) {
      return conversation.groupName || 'Group Conversation';
    }
    
    // For 1:1 conversations, get the other participant's name
    const otherParticipant = conversation.participants.find(
      p => p.id !== currentUserId
    );
    
    return otherParticipant?.displayName || 'Unknown Contact';
  };
  
  /**
   * [H4X] CONVERSATION AVATAR RESOLVER
   * 
   * Gets the appropriate avatar for a conversation
   */
  const getConversationAvatar = (conversation: Conversation): string => {
    if (conversation.isGroup) {
      return conversation.groupAvatar || '/default-group.png';
    }
    
    // For 1:1 conversations, get the other participant's avatar
    const otherParticipant = conversation.participants.find(
      p => p.id !== currentUserId
    );
    
    return otherParticipant?.avatar || '/default-avatar.png';
  };
  
  /**
   * [H4X] CONTACT STATUS RESOLVER
   * 
   * Gets the status of the contact in a 1:1 conversation
   */
  const getContactStatus = (conversation: Conversation): string | undefined => {
    if (conversation.isGroup) return undefined;
    
    // For 1:1 conversations, get the other participant's status
    const otherParticipant = conversation.participants.find(
      p => p.id !== currentUserId
    );
    
    return otherParticipant?.status;
  };
  
  /**
   * [H4X] TIME FORMATTER
   * 
   * Formats the timestamp for the last message
   */
  const formatTime = (timestamp: number): string => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffDays = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffDays === 0) {
      // Today: show time
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else if (diffDays === 1) {
      // Yesterday
      return 'Yesterday';
    } else if (diffDays < 7) {
      // Within a week: show day name
      return date.toLocaleDateString([], { weekday: 'short' });
    } else {
      // Older: show date
      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });
    }
  };
  
  if (sortedConversations.length === 0) {
    return (
      <div className="h-full flex flex-col items-center justify-center p-4 text-center text-msn-gray-500">
        <MessageSquare size={48} className="mb-4 opacity-50" />
        {searchQuery ? (
          <>
            <h3 className="text-lg font-medium mb-2">No conversations found</h3>
            <p>Try a different search term</p>
          </>
        ) : (
          <>
            <h3 className="text-lg font-medium mb-2">No conversations yet</h3>
            <p>Start a new chat to begin messaging</p>
          </>
        )}
      </div>
    );
  }
  
  return (
    <div className="h-full overflow-y-auto custom-scrollbar">
      {sortedConversations.map(conversation => (
        <div 
          key={conversation.id}
          onClick={() => onSelectConversation(conversation)}
          className="flex items-center px-4 py-3 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700 cursor-pointer border-b border-msn-gray-200 dark:border-msn-gray-700"
        >
          {/* Avatar with status */}
          <div className="relative">
            <img
              src={getConversationAvatar(conversation)}
              alt={getConversationName(conversation)}
              className="h-12 w-12 rounded-full object-cover"
            />
            {!conversation.isGroup && (
              <span 
                className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-msn-gray-800 ${getStatusColorClass(getContactStatus(conversation))}`}
              />
            )}
            {conversation.unreadCount > 0 && (
              <span className="absolute -top-1 -right-1 bg-msn-red text-white text-xs px-1.5 min-w-[20px] h-5 flex items-center justify-center rounded-full">
                {conversation.unreadCount}
              </span>
            )}
          </div>
          
          {/* Conversation details */}
          <div className="ml-3 flex-1 min-w-0">
            <div className="flex items-center justify-between">
              <h3 className="font-semibold truncate">
                {getConversationName(conversation)}
              </h3>
              <span className="text-xs text-msn-gray-500 whitespace-nowrap ml-2">
                {conversation.lastMessage && formatTime(conversation.lastMessage.timestamp)}
              </span>
            </div>
            
            <div className="flex items-center text-sm text-msn-gray-500">
              {conversation.lastMessage && (
                <p className="truncate flex-1">
                  {conversation.lastMessage.sender.id === currentUserId ? (
                    <span className="font-medium">You: </span>
                  ) : (
                    conversation.isGroup && (
                      <span className="font-medium">{conversation.lastMessage.sender.displayName.split(' ')[0]}: </span>
                    )
                  )}
                  {conversation.lastMessage.isDeleted ? (
                    <span className="italic">This message was deleted</span>
                  ) : (
                    conversation.lastMessage.content
                  )}
                </p>
              )}
              
              {/* Delivery status for last message */}
              {conversation.lastMessage && conversation.lastMessage.sender.id === currentUserId && (
                <span className="ml-1 flex-shrink-0">
                  {conversation.lastMessage.status === 'sent' && (
                    <Check size={14} className="text-msn-gray-400" />
                  )}
                  {conversation.lastMessage.status === 'delivered' && (
                    <Check size={14} className="text-msn-gray-500" />
                  )}
                  {conversation.lastMessage.status === 'read' && (
                    <Check size={14} className="text-msn-blue" />
                  )}
                </span>
              )}
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

/**
 * [H4X] NEW CONVERSATION COMPONENT
 * 
 * Modal for creating a new conversation
 */
const NewConversationModal: React.FC<{
  isOpen: boolean;
  onClose: () => void;
  onSelectContact: (contact: User) => void;
  contacts: User[];
  currentUserId: string;
}> = ({ isOpen, onClose, onSelectContact, contacts, currentUserId }) => {
  const [searchQuery, setSearchQuery] = useState('');
  
  // Filter contacts based on search query
  const filteredContacts = contacts.filter(contact => {
    if (contact.id === currentUserId) return false;
    
    if (!searchQuery) return true;
    
    const query = searchQuery.toLowerCase();
    return (
      contact.displayName.toLowerCase().includes(query) || 
      contact.username.toLowerCase().includes(query) ||
      (contact.statusMessage && contact.statusMessage.toLowerCase().includes(query))
    );
  });
  
  /**
   * [H4X] STATUS COLOR MAPPER
   * 
   * Maps status values to CSS color classes
   */
  const getStatusColorClass = (status?: string): string => {
    switch (status) {
      case 'online':
        return 'bg-msn-green';
      case 'away':
        return 'bg-msn-orange';
      case 'busy':
        return 'bg-msn-red';
      case 'invisible':
      case 'offline':
      default:
        return 'bg-msn-gray-400';
    }
  };
  
  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          onClick={onClose}
        >
          <motion.div
            className="bg-white dark:bg-msn-gray-800 rounded-lg shadow-xl w-full max-w-md overflow-hidden"
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            onClick={e => e.stopPropagation()}
          >
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-msn-gray-200 dark:border-msn-gray-700">
              <h2 className="text-lg font-semibold">New Conversation</h2>
              <button onClick={onClose} className="p-1 rounded-full hover:bg-msn-gray-200 dark:hover:bg-msn-gray-700">
                <X size={20} />
              </button>
            </div>
            
            {/* Search */}
            <div className="p-4 border-b border-msn-gray-200 dark:border-msn-gray-700">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Search contacts..."
                  value={searchQuery}
                  onChange={e => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-2 pl-10 bg-msn-gray-100 dark:bg-msn-gray-700 rounded-full focus:outline-none focus:ring-2 focus:ring-msn-blue"
                  autoFocus
                />
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-msn-gray-500" size={18} />
              </div>
            </div>
            
            {/* Contact list */}
            <div className="max-h-96 overflow-y-auto custom-scrollbar">
              {filteredContacts.length === 0 ? (
                <div className="p-4 text-center text-msn-gray-500">
                  <Users size={32} className="mx-auto mb-2 opacity-50" />
                  <p>No contacts found</p>
                </div>
              ) : (
                filteredContacts.map(contact => (
                  <div 
                    key={contact.id}
                    onClick={() => onSelectContact(contact)}
                    className="flex items-center px-4 py-3 hover:bg-msn-gray-100 dark:hover:bg-msn-gray-700 cursor-pointer border-b border-msn-gray-200 dark:border-msn-gray-700"
                  >
                    {/* Avatar with status */}
                    <div className="relative">
                      <img
                        src={contact.avatar || '/default-avatar.png'}
                        alt={contact.displayName}
                        className="h-10 w-10 rounded-full object-cover"
                      />
                      <span 
                        className={`absolute bottom-0 right-0 h-3 w-3 rounded-full border-2 border-white dark:border-msn-gray-800 ${getStatusColorClass(contact.status)}`}
                      />
                    </div>
                    
                    {/* Contact details */}
                    <div className="ml-3 flex-1">
                      <h3 className="font-medium">{contact.displayName}</h3>
                      <div className="flex items-center">
                        <p className="text-sm text-msn-gray-500 truncate">
                          {contact.statusMessage || `@${contact.username}`}
                        </p>
                      </div>
                    </div>
                    
                    <ArrowRight size={18} className="text-msn-gray-400" />
                  </div>
                ))
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

/**
 * [H4X] MESSAGES DASHBOARD
 * 
 * Main messages page showing all conversations
 */
const MessagesPage: React.FC = () => {
  const router = useRouter();
  const { user, status: authStatus } = useAuth();
  const { isConnected } = useSocket();
  
  // Search state
  const [searchQuery, setSearchQuery] = useState('');
  const [showNewConversationModal, setShowNewConversationModal] = useState(false);
  
  // Conversations state (would be fetched from API)
  const [conversations, setConversations] = useState<Conversation[]>(MOCK_CONVERSATIONS);
  
  /**
   * [H4X] AUTHENTICATION CHECK
   * 
   * Redirect unauthenticated users to login
   */
  useEffect(() => {
    if (authStatus === 'unauthenticated') {
      router.replace('/login?redirect=' + encodeURIComponent(router.asPath));
    }
  }, [authStatus, router]);
  
  /**
   * [H4X] CONVERSATION HANDLERS
   * 
   * Functions to manage conversations
   */
  const handleSelectConversation = (conversation: Conversation) => {
    // For 1:1 conversations, navigate to the contact's page
    if (!conversation.isGroup) {
      const otherParticipant = conversation.participants.find(
        p => p.id !== user?.id
      );
      
      if (otherParticipant) {
        router.push(`/messages/${otherParticipant.id}`);
      }
    } else {
      // For group conversations
      router.push(`/groups/${conversation.id}`);
    }
  };
  
  const handleSelectContact = (contact: User) => {
    // Close the modal
    setShowNewConversationModal(false);
    
    // Navigate to the contact's message page
    router.push(`/messages/${contact.id}`);
  };
  
  const handleNewConversation = () => {
    setShowNewConversationModal(true);
  };
  
  // If not authenticated, show loading spinner
  if (authStatus !== 'authenticated' || !user) {
    return (
      <MainLayout title="Messages">
        <div className="h-full flex items-center justify-center">
          <div className="animate-spin h-10 w-10 border-4 border-msn-blue border-t-transparent rounded-full"></div>
        </div>
      </MainLayout>
    );
  }
  
  return (
    <MainLayout title="Messages">
      <Head>
        <title>ChatEra - Messages</title>
      </Head>
      
      <div className="h-full flex flex-col bg-white dark:bg-msn-gray-800 rounded-lg shadow-sm overflow-hidden">
        {/* Header */}
        <div className="px-4 py-3 border-b border-msn-gray-200 dark:border-msn-gray-700 flex items-center justify-between">
          <h1 className="text-xl font-semibold">Messages</h1>
          
          <div className="flex items-center gap-2">
            <div className="relative w-full md:w-64">
              <input
                type="text"
                placeholder="Search conversations..."
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                className="w-full px-4 py-2 pr-8 bg-msn-gray-100 dark:bg-msn-gray-700 rounded-full text-sm focus:outline-none focus:ring-2 focus:ring-msn-blue"
              />
              <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-msn-gray-500" size={16} />
            </div>
            
            <button
              onClick={handleNewConversation}
              className="p-2 rounded-full bg-msn-blue text-white hover:bg-msn-blue-dark"
              title="New conversation"
            >
              <Plus size={20} />
            </button>
          </div>
        </div>
        
        {/* Connection status warning */}
        {!isConnected && (
          <div className="bg-msn-red-light text-msn-red-dark px-3 py-2 text-sm text-center animate-pulse">
            You are currently offline. Messages will be sent when you reconnect.
          </div>
        )}
        
        {/* Conversations list */}
        <div className="flex-1 overflow-hidden">
          <ConversationList
            conversations={conversations}
            currentUserId={user.id}
            onSelectConversation={handleSelectConversation}
            searchQuery={searchQuery}
          />
        </div>
        
        {/* New conversation modal */}
        <NewConversationModal
          isOpen={showNewConversationModal}
          onClose={() => setShowNewConversationModal(false)}
          onSelectContact={handleSelectContact}
          contacts={MOCK_CONTACTS}
          currentUserId={user.id}
        />
      </div>
    </MainLayout>
  );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
  // In a real app, you might fetch initial conversations data here
  return {
    props: {}
  };
};

export default MessagesPage;
