// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▄░█ █▀█ ▀█▀ █ █▀▀ █ █▀▀ ▄▀█ ▀█▀ █ █▀█ █▄░█ █▀   █▀█ ▄▀█ █▀▀ █▀▀
 * █░▀█ █▄█ ░█░ █ █▀░ █ █▄▄ █▀█ ░█░ █ █▄█ █░▀█ ▄█   █▀▀ █▀█ █▄█ ██▄
 * 
 * [CODEX] Notifications Settings Page
 * 
 * This page allows users to customize notification preferences
 * including sounds, displays, and scheduling for the ChatEra application.
 * 
 * Features:
 * - Global notification toggle
 * - Sound notification options
 * - Do Not Disturb scheduling
 * - Per-contact notification rules
 * - Cross-platform support (Windows/Linux)
 */

import React, { useState } from 'react';
import Head from 'next/head';
import SettingsLayout from '@/components/settings/SettingsLayout';
import NotificationSettings from '@/components/settings/NotificationSettings';
import ProtectedRoute from '@/components/auth/ProtectedRoute';

/**
 * [H4X] NOTIFICATION SETTINGS PAGE
 * 
 * Page container for notification settings management
 */
const NotificationSettingsPage: React.FC = () => {
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  
  /**
   * [H4X] SAVE CHANGES HANDLER
   * 
   * Callback function to handle saving changes from child components
   */
  const handleSaveChanges = async () => {
    setIsSaving(true);
    
    try {
      // This would normally be the place to aggregate all settings changes
      // and submit them to the API, but since the actual changes happen
      // within the component, we're just simulating the save here
      await new Promise(resolve => setTimeout(resolve, 1000));
      setHasUnsavedChanges(false);
    } catch (error) {
      console.error('Error saving notification settings:', error);
    } finally {
      setIsSaving(false);
    }
  };
  
  /**
   * [H4X] CANCEL CHANGES HANDLER
   * 
   * Resets all unsaved changes
   */
  const handleCancelChanges = () => {
    setHasUnsavedChanges(false);
    // The actual reset happens in the child component
  };
  
  /**
   * [H4X] TRACK UNSAVED CHANGES
   * 
   * Callback function to track changes from child components
   */
  const trackChanges = (hasChanges: boolean) => {
    setHasUnsavedChanges(hasChanges);
  };
  
  return (
    <ProtectedRoute>
      <Head>
        <title>Notification Settings | ChatEra</title>
        <meta name="description" content="Customize notification preferences for ChatEra" />
      </Head>
      
      <SettingsLayout
        title="Notification Settings"
        hasUnsavedChanges={hasUnsavedChanges}
        onSave={handleSaveChanges}
        onCancel={handleCancelChanges}
        currentSection="notifications"
      >
        <NotificationSettings onSaveChanges={trackChanges} />
      </SettingsLayout>
    </ProtectedRoute>
  );
};

export default NotificationSettingsPage;
