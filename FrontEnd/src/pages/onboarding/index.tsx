// =================================================================
// ██████╗██╗  ██╗ █████╗ ████████╗███████╗██████╗  █████╗ 
// ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██╔════╝██╔══██╗██╔══██╗
// ██║     ███████║███████║   ██║   █████╗  ██████╔╝███████║
// ██║     ██╔══██║██╔══██║   ██║   ██╔══╝  ██╔══██╗██╔══██║
// ╚██████╗██║  ██║██║  ██║   ██║   ███████╗██║  ██║██║  ██║
//  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝
// GENERATED BY CLAUDE: ChatEra v1.0 – 2025-05-13
// =================================================================

/**
 * █▀█ █▄░█ █▄▄ █▀█ ▄▀█ █▀█ █▀▄ █ █▄░█ █▀▀   █▀█ ▄▀█ █▀▀ █▀▀
 * █▄█ █░▀█ █▄█ █▄█ █▀█ █▀▄ █▄▀ █ █░▀█ █▄█   █▀▀ █▀█ █▄█ ██▄
 * 
 * [CODEX] Onboarding Main Page
 * 
 * Main page for the user onboarding flow that guides new users
 * through setting up their profile and preferences with a
 * nostalgic MSN-inspired design.
 * 
 * Features:
 * - Multi-step wizard interface
 * - Welcome introduction
 * - Profile setup
 * - Preferences configuration
 * - Connections and contacts exploration
 * - Cross-platform compatibility (web/desktop)
 */

import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { motion } from 'framer-motion';
import { toast } from 'react-hot-toast';
import { useAuth } from '@/lib/auth';
import OnboardingStepper, { Step } from '@/components/onboarding/OnboardingStepper';
import WelcomeStep from '@/components/onboarding/WelcomeStep';
import ProfileSetupStep, { ProfileData } from '@/components/onboarding/ProfileSetupStep';
import PreferencesSetupStep, { PreferencesData } from '@/components/onboarding/PreferencesSetupStep';

/**
 * [H4X] ONBOARDING MAIN PAGE
 * 
 * Multi-step onboarding flow for new users
 */
const OnboardingPage: React.FC = () => {
  const router = useRouter();
  const { status, user, updateProfile } = useAuth();
  const [onboardingData, setOnboardingData] = useState<{
    welcome?: any;
    profile?: ProfileData;
    preferences?: PreferencesData;
  }>({});
  
  // Redirect if not authenticated
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.replace('/auth/login');
    }
  }, [status, router]);
  
  // Define onboarding steps
  const steps: Step[] = [
    {
      id: 'welcome',
      title: 'Welcome to ChatEra',
      component: <WelcomeStep onComplete={(data) => handleStepUpdate('welcome', data)} />,
    },
    {
      id: 'profile',
      title: 'Setup Your Profile',
      component: <ProfileSetupStep onComplete={(data) => handleStepUpdate('profile', data)} />,
    },
    {
      id: 'preferences',
      title: 'Your Preferences',
      component: <PreferencesSetupStep onComplete={(data) => handleStepUpdate('preferences', data)} isOptional={true} />,
      optional: true,
    }
  ];
  
  // Handle step data updates
  const handleStepUpdate = (stepId: string, data: any) => {
    setOnboardingData(prev => ({
      ...prev,
      [stepId]: data
    }));
  };
  
  // Handle onboarding completion
  const handleOnboardingComplete = async () => {
    try {
      // In a real app, this would be an API call to update user profile and preferences
      // For demo, we'll simulate the call with a delay
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Show success message
      toast.success('Setup complete! Welcome to ChatEra!', {
        duration: 5000,
        position: 'bottom-center',
        style: {
          borderRadius: '10px',
          background: '#333',
          color: '#fff',
        },
      });
      
      // Redirect to the main app
      router.replace('/messages');
    } catch (error) {
      console.error('Error completing onboarding:', error);
      toast.error('There was an error saving your settings. Please try again.');
    }
  };
  
  // Background animation variants
  const backgroundVariants = {
    initial: {
      backgroundPosition: '0% 0%',
    },
    animate: {
      backgroundPosition: '100% 100%',
      transition: {
        duration: 20,
        ease: 'linear',
        repeat: Infinity,
        repeatType: 'reverse' as const,
      },
    },
  };
  
  // If not authenticated, show loading state
  if (status === 'loading' || status === 'unauthenticated') {
    return (
      <div className="h-screen flex items-center justify-center">
        <div className="animate-pulse text-msn-blue">Loading...</div>
      </div>
    );
  }
  
  return (
    <>
      <Head>
        <title>Welcome to ChatEra</title>
        <meta name="description" content="Set up your ChatEra account and get started" />
      </Head>
      
      <motion.div 
        className="min-h-screen flex items-center justify-center bg-gradient-to-br from-msn-gray-100 to-msn-gray-200 dark:from-msn-gray-900 dark:to-msn-gray-800 p-4"
        initial="initial"
        animate="animate"
        variants={backgroundVariants}
      >
        {/* Dancing gradient background elements */}
        <div className="absolute inset-0 overflow-hidden opacity-30 dark:opacity-20 pointer-events-none">
          <div className="absolute -top-[30%] -left-[10%] w-[70%] h-[70%] rounded-full bg-msn-blue/30 blur-[120px]" />
          <div className="absolute -bottom-[30%] -right-[10%] w-[70%] h-[70%] rounded-full bg-msn-purple/30 blur-[120px]" />
          <div className="absolute top-[40%] right-[20%] w-[40%] h-[40%] rounded-full bg-msn-green/20 blur-[100px]" />
        </div>
        
        {/* Onboarding card */}
        <div className="z-10 w-full max-w-3xl">
          <div className="bg-white dark:bg-msn-gray-900 rounded-xl shadow-lg overflow-hidden">
            {/* Classic MSN-style header */}
            <div className="bg-gradient-to-r from-msn-blue to-msn-blue-light dark:from-msn-blue-dark dark:to-msn-blue p-4 text-white">
              <h1 className="font-bold text-xl">ChatEra Setup</h1>
              <p className="text-sm opacity-90">Personalize your messaging experience</p>
            </div>
            
            {/* Stepper content */}
            <div className="p-6 h-[600px]">
              <OnboardingStepper
                steps={steps}
                onComplete={handleOnboardingComplete}
                onUpdateStep={handleStepUpdate}
              />
            </div>
          </div>
        </div>
      </motion.div>
    </>
  );
};

export default OnboardingPage;
